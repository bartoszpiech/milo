
milo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08009948  08009948  00019948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d50  08009d50  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009d50  08009d50  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d50  08009d50  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d50  08009d50  00019d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d54  08009d54  00019d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000078  08009dcc  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08009dcc  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013789  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c7c  00000000  00000000  0003382d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  000364b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  000373c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222be  00000000  00000000  000381a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126a2  00000000  00000000  0005a466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4047  00000000  00000000  0006cb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130b4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b60  00000000  00000000  00130ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800992c 	.word	0x0800992c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800992c 	.word	0x0800992c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b39      	ldr	r3, [pc, #228]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4a38      	ldr	r2, [pc, #224]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000bf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bf8:	6153      	str	r3, [r2, #20]
 8000bfa:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a32      	ldr	r2, [pc, #200]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a2c      	ldr	r2, [pc, #176]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	6153      	str	r3, [r2, #20]
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a26      	ldr	r2, [pc, #152]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2120      	movs	r1, #32
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f002 febb 	bl	80039d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_GPIO_Init+0x100>)
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481b      	ldr	r0, [pc, #108]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000c70:	f002 fd3c 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 8000c74:	2310      	movs	r3, #16
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_GPIO_Init+0x100>)
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f002 fd2f 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c8e:	2320      	movs	r3, #32
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f002 fd20 	bl	80036ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	200a      	movs	r0, #10
 8000cb2:	f002 fc6e 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f002 fc87 	bl	80035ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2028      	movs	r0, #40	; 0x28
 8000cc2:	f002 fc66 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cc6:	2028      	movs	r0, #40	; 0x28
 8000cc8:	f002 fc7f 	bl	80035ca <HAL_NVIC_EnableIRQ>

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	10210000 	.word	0x10210000
 8000cdc:	48000800 	.word	0x48000800

08000ce0 <string_to_int>:

#define IS_NUMERIC_STRING(d) (*(char*)d >= 48) && (*(char*)d<= 57)
#define CONVERSION(d,k)  ((d<<3) +(d<<1))+(*(char*)k-48);

uint32_t
string_to_int(uint8_t *pszBuffer) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    uint32_t u32Number=0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
    while( IS_NUMERIC_STRING(pszBuffer)) {
 8000cec:	e00c      	b.n	8000d08 <string_to_int+0x28>
        u32Number=CONVERSION(u32Number,pszBuffer);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	00da      	lsls	r2, r3, #3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	7812      	ldrb	r2, [r2, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	60fb      	str	r3, [r7, #12]
        pszBuffer++;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3301      	adds	r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
    while( IS_NUMERIC_STRING(pszBuffer)) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8000d0e:	d903      	bls.n	8000d18 <string_to_int+0x38>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b39      	cmp	r3, #57	; 0x39
 8000d16:	d9ea      	bls.n	8000cee <string_to_int+0xe>
    }
    return u32Number;
 8000d18:	68fb      	ldr	r3, [r7, #12]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int
_write(int file, uint8_t *ptr, int len) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, ptr, len);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	4803      	ldr	r0, [pc, #12]	; (8000d4c <_write+0x24>)
 8000d3e:	f005 fa43 	bl	80061c8 <HAL_UART_Transmit_IT>
	return len;
 8000d42:	687b      	ldr	r3, [r7, #4]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200002e0 	.word	0x200002e0

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d54:	b085      	sub	sp, #20
 8000d56:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d58:	f002 fab6 	bl	80032c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f8d4 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f7ff ff3a 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d64:	f001 ffbe 	bl	8002ce4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d68:	f001 fbf2 	bl	8002550 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000d6c:	f001 fcd6 	bl	800271c <MX_TIM15_Init>
  MX_TIM16_Init();
 8000d70:	f001 fd5a 	bl	8002828 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000d74:	f001 fdd2 	bl	800291c <MX_TIM17_Init>
  MX_TIM3_Init();
 8000d78:	f001 fc3e 	bl	80025f8 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000d7c:	f001 fc96 	bl	80026ac <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim6); // debug
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d80:	2100      	movs	r1, #0
 8000d82:	4855      	ldr	r0, [pc, #340]	; (8000ed8 <main+0x188>)
 8000d84:	f004 f840 	bl	8004e08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4854      	ldr	r0, [pc, #336]	; (8000edc <main+0x18c>)
 8000d8c:	f004 f83c 	bl	8004e08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000d90:	2100      	movs	r1, #0
 8000d92:	4853      	ldr	r0, [pc, #332]	; (8000ee0 <main+0x190>)
 8000d94:	f004 f838 	bl	8004e08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4852      	ldr	r0, [pc, #328]	; (8000ee4 <main+0x194>)
 8000d9c:	f004 f834 	bl	8004e08 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000da0:	2100      	movs	r1, #0
 8000da2:	4851      	ldr	r0, [pc, #324]	; (8000ee8 <main+0x198>)
 8000da4:	f004 f9c2 	bl	800512c <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_IT(&huart2, &message, 1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	4950      	ldr	r1, [pc, #320]	; (8000eec <main+0x19c>)
 8000dac:	4850      	ldr	r0, [pc, #320]	; (8000ef0 <main+0x1a0>)
 8000dae:	f005 fa67 	bl	8006280 <HAL_UART_Receive_IT>
  manipulator_init(&milo);
 8000db2:	4850      	ldr	r0, [pc, #320]	; (8000ef4 <main+0x1a4>)
 8000db4:	f000 fb1c 	bl	80013f0 <manipulator_init>
		while (!HAL_GPIO_ReadPin(ENCODER_BUTTON_GPIO_Port, ENCODER_BUTTON_Pin));
	}
	*/

	 // sprawdzenie overflow
	 if (mode == 0) {
 8000db8:	4b4f      	ldr	r3, [pc, #316]	; (8000ef8 <main+0x1a8>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d12b      	bne.n	8000e18 <main+0xc8>
		 enc_val = __HAL_TIM_GET_COUNTER(&htim2);
 8000dc0:	4b49      	ldr	r3, [pc, #292]	; (8000ee8 <main+0x198>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	b21a      	sxth	r2, r3
 8000dc8:	4b4c      	ldr	r3, [pc, #304]	; (8000efc <main+0x1ac>)
 8000dca:	801a      	strh	r2, [r3, #0]
		 if (enc_val < 0) {
 8000dcc:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <main+0x1ac>)
 8000dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da03      	bge.n	8000dde <main+0x8e>
			 enc_val = 0;
 8000dd6:	4b49      	ldr	r3, [pc, #292]	; (8000efc <main+0x1ac>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	801a      	strh	r2, [r3, #0]
 8000ddc:	e007      	b.n	8000dee <main+0x9e>
		 } else if (enc_val > 180) {
 8000dde:	4b47      	ldr	r3, [pc, #284]	; (8000efc <main+0x1ac>)
 8000de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de4:	2bb4      	cmp	r3, #180	; 0xb4
 8000de6:	dd02      	ble.n	8000dee <main+0x9e>
			 enc_val = 180;
 8000de8:	4b44      	ldr	r3, [pc, #272]	; (8000efc <main+0x1ac>)
 8000dea:	22b4      	movs	r2, #180	; 0xb4
 8000dec:	801a      	strh	r2, [r3, #0]
		 }
		 milo.q[button] = enc_val;
 8000dee:	4b43      	ldr	r3, [pc, #268]	; (8000efc <main+0x1ac>)
 8000df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df4:	4a42      	ldr	r2, [pc, #264]	; (8000f00 <main+0x1b0>)
 8000df6:	6814      	ldr	r4, [r2, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fb8b 	bl	8000514 <__aeabi_i2d>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	483c      	ldr	r0, [pc, #240]	; (8000ef4 <main+0x1a4>)
 8000e04:	f104 0112 	add.w	r1, r4, #18
 8000e08:	00c9      	lsls	r1, r1, #3
 8000e0a:	4401      	add	r1, r0
 8000e0c:	e9c1 2300 	strd	r2, r3, [r1]
		 manipulator_fk(&milo);
 8000e10:	4838      	ldr	r0, [pc, #224]	; (8000ef4 <main+0x1a4>)
 8000e12:	f000 fbe9 	bl	80015e8 <manipulator_fk>
 8000e16:	e022      	b.n	8000e5e <main+0x10e>
	 } else if (mode == 1) {
 8000e18:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <main+0x1a8>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d11e      	bne.n	8000e5e <main+0x10e>
		 manipulator_backward(&milo, 5, milo.effector.x, milo.effector.y, milo.effector.z);
 8000e20:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <main+0x1a4>)
 8000e22:	ed93 7b06 	vldr	d7, [r3, #24]
 8000e26:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <main+0x1a4>)
 8000e28:	ed93 6b08 	vldr	d6, [r3, #32]
 8000e2c:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <main+0x1a4>)
 8000e2e:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8000e32:	eeb0 2a45 	vmov.f32	s4, s10
 8000e36:	eef0 2a65 	vmov.f32	s5, s11
 8000e3a:	eeb0 1a46 	vmov.f32	s2, s12
 8000e3e:	eef0 1a66 	vmov.f32	s3, s13
 8000e42:	eeb0 0a47 	vmov.f32	s0, s14
 8000e46:	eef0 0a67 	vmov.f32	s1, s15
 8000e4a:	2105      	movs	r1, #5
 8000e4c:	4829      	ldr	r0, [pc, #164]	; (8000ef4 <main+0x1a4>)
 8000e4e:	f000 fdc1 	bl	80019d4 <manipulator_backward>
		 manipulator_calculate_angles(&milo);
 8000e52:	4828      	ldr	r0, [pc, #160]	; (8000ef4 <main+0x1a4>)
 8000e54:	f001 f810 	bl	8001e78 <manipulator_calculate_angles>
		 manipulator_update(&milo);
 8000e58:	4826      	ldr	r0, [pc, #152]	; (8000ef4 <main+0x1a4>)
 8000e5a:	f001 f913 	bl	8002084 <manipulator_update>
	 servo_set(&ft[2], servo_angle[2] * 10, 0);
	 */
	 //printf("servo[0]: %d; servo[1]: %d; servo[2]: %d; Przycisk: %ld\r\n", servo_angle[0], servo_angle[1], servo_angle[2], button);

	  //manipulator_update(&milo);
	 printf("q1 = %d, q2 = %d, q3 = %d, x = %d, y = %d, z = %d\r\n", (int)(milo.q[0]), (int)(milo.q[1]), (int)(milo.q[2]), (int)milo.effector.x, (int)milo.effector.y, (int)milo.effector.z);
 8000e5e:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <main+0x1a4>)
 8000e60:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8000e64:	4610      	mov	r0, r2
 8000e66:	4619      	mov	r1, r3
 8000e68:	f7ff fe6e 	bl	8000b48 <__aeabi_d2iz>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <main+0x1a4>)
 8000e70:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f7ff fe66 	bl	8000b48 <__aeabi_d2iz>
 8000e7c:	4680      	mov	r8, r0
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <main+0x1a4>)
 8000e80:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fe5e 	bl	8000b48 <__aeabi_d2iz>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <main+0x1a4>)
 8000e90:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff fe56 	bl	8000b48 <__aeabi_d2iz>
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <main+0x1a4>)
 8000ea0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fe4e 	bl	8000b48 <__aeabi_d2iz>
 8000eac:	4605      	mov	r5, r0
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <main+0x1a4>)
 8000eb0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f7ff fe46 	bl	8000b48 <__aeabi_d2iz>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	9501      	str	r5, [sp, #4]
 8000ec2:	9400      	str	r4, [sp, #0]
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	4631      	mov	r1, r6
 8000eca:	480e      	ldr	r0, [pc, #56]	; (8000f04 <main+0x1b4>)
 8000ecc:	f006 f950 	bl	8007170 <iprintf>
	 HAL_Delay(100);
 8000ed0:	2064      	movs	r0, #100	; 0x64
 8000ed2:	f002 fa5f 	bl	8003394 <HAL_Delay>
	 if (mode == 0) {
 8000ed6:	e76f      	b.n	8000db8 <main+0x68>
 8000ed8:	20000408 	.word	0x20000408
 8000edc:	20000370 	.word	0x20000370
 8000ee0:	200004ec 	.word	0x200004ec
 8000ee4:	200003bc 	.word	0x200003bc
 8000ee8:	200004a0 	.word	0x200004a0
 8000eec:	200002dc 	.word	0x200002dc
 8000ef0:	200002e0 	.word	0x200002e0
 8000ef4:	20000098 	.word	0x20000098
 8000ef8:	200002ce 	.word	0x200002ce
 8000efc:	20000364 	.word	0x20000364
 8000f00:	20000094 	.word	0x20000094
 8000f04:	08009948 	.word	0x08009948

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	2228      	movs	r2, #40	; 0x28
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f006 f922 	bl	8007160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f2e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fd6d 	bl	8003a30 <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f5c:	f000 fa3e 	bl	80013dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f64:	2302      	movs	r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fc60 	bl	8004840 <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f86:	f000 fa29 	bl	80013dc <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3740      	adds	r7, #64	; 0x40
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENCODER_BUTTON_Pin) {
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	2b10      	cmp	r3, #16
 8000fa2:	d121      	bne.n	8000fe8 <HAL_GPIO_EXTI_Callback+0x54>
		button++;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000fac:	6013      	str	r3, [r2, #0]
		button = button % 4;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000fb8:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim2, milo.q[button]);
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a19      	ldr	r2, [pc, #100]	; (8001024 <HAL_GPIO_EXTI_Callback+0x90>)
 8000fc0:	3312      	adds	r3, #18
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	4917      	ldr	r1, [pc, #92]	; (8001028 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fcc:	680c      	ldr	r4, [r1, #0]
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f7ff fde1 	bl	8000b98 <__aeabi_d2uiz>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6263      	str	r3, [r4, #36]	; 0x24
		printf("button: %ld\r\n", button);
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4812      	ldr	r0, [pc, #72]	; (800102c <HAL_GPIO_EXTI_Callback+0x98>)
 8000fe2:	f006 f8c5 	bl	8007170 <iprintf>
		mode++;
		mode = mode % 2;
		printf("mode: %d\r\n", mode);
	}

}
 8000fe6:	e016      	b.n	8001016 <HAL_GPIO_EXTI_Callback+0x82>
	} else if (GPIO_Pin == B1_Pin) {
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fee:	d112      	bne.n	8001016 <HAL_GPIO_EXTI_Callback+0x82>
		mode++;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ffa:	701a      	strb	r2, [r3, #0]
		mode = mode % 2;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001008:	701a      	strb	r2, [r3, #0]
		printf("mode: %d\r\n", mode);
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_GPIO_EXTI_Callback+0x9c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4619      	mov	r1, r3
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001012:	f006 f8ad 	bl	8007170 <iprintf>
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bd90      	pop	{r4, r7, pc}
 800101e:	bf00      	nop
 8001020:	20000094 	.word	0x20000094
 8001024:	20000098 	.word	0x20000098
 8001028:	200004a0 	.word	0x200004a0
 800102c:	0800997c 	.word	0x0800997c
 8001030:	200002ce 	.word	0x200002ce
 8001034:	0800998c 	.word	0x0800998c

08001038 <HAL_UART_RxCpltCallback>:

void
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af02      	add	r7, sp, #8
 800103e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4aa5      	ldr	r2, [pc, #660]	; (80012dc <HAL_UART_RxCpltCallback+0x2a4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	f040 8194 	bne.w	8001374 <HAL_UART_RxCpltCallback+0x33c>
		if (message == 'b') {
 800104c:	4ba4      	ldr	r3, [pc, #656]	; (80012e0 <HAL_UART_RxCpltCallback+0x2a8>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b62      	cmp	r3, #98	; 0x62
 8001052:	d106      	bne.n	8001062 <HAL_UART_RxCpltCallback+0x2a>
			printf("b %ld;\r\n", button);
 8001054:	4ba3      	ldr	r3, [pc, #652]	; (80012e4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	48a3      	ldr	r0, [pc, #652]	; (80012e8 <HAL_UART_RxCpltCallback+0x2b0>)
 800105c:	f006 f888 	bl	8007170 <iprintf>
 8001060:	e183      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
		} else if (message == 'c') {
 8001062:	4b9f      	ldr	r3, [pc, #636]	; (80012e0 <HAL_UART_RxCpltCallback+0x2a8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b63      	cmp	r3, #99	; 0x63
 8001068:	d112      	bne.n	8001090 <HAL_UART_RxCpltCallback+0x58>
			uint8_t button_number;
			HAL_UART_Receive(huart, &button_number, 1, 10);
 800106a:	f107 0115 	add.w	r1, r7, #21
 800106e:	230a      	movs	r3, #10
 8001070:	2201      	movs	r2, #1
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f004 ffd6 	bl	8006024 <HAL_UART_Receive>
			button = button_number - '0';
 8001078:	7d7b      	ldrb	r3, [r7, #21]
 800107a:	3b30      	subs	r3, #48	; 0x30
 800107c:	461a      	mov	r2, r3
 800107e:	4b99      	ldr	r3, [pc, #612]	; (80012e4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001080:	601a      	str	r2, [r3, #0]
			printf("c %ld;\r\n", button);
 8001082:	4b98      	ldr	r3, [pc, #608]	; (80012e4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	4898      	ldr	r0, [pc, #608]	; (80012ec <HAL_UART_RxCpltCallback+0x2b4>)
 800108a:	f006 f871 	bl	8007170 <iprintf>
 800108e:	e16c      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
		} else if (message == 'e') {
 8001090:	4b93      	ldr	r3, [pc, #588]	; (80012e0 <HAL_UART_RxCpltCallback+0x2a8>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b65      	cmp	r3, #101	; 0x65
 8001096:	d107      	bne.n	80010a8 <HAL_UART_RxCpltCallback+0x70>
			printf("e %ld;\r\n", __HAL_TIM_GET_COUNTER(&htim2));
 8001098:	4b95      	ldr	r3, [pc, #596]	; (80012f0 <HAL_UART_RxCpltCallback+0x2b8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4894      	ldr	r0, [pc, #592]	; (80012f4 <HAL_UART_RxCpltCallback+0x2bc>)
 80010a2:	f006 f865 	bl	8007170 <iprintf>
 80010a6:	e160      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
		} else if (message == 'a') {
 80010a8:	4b8d      	ldr	r3, [pc, #564]	; (80012e0 <HAL_UART_RxCpltCallback+0x2a8>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b61      	cmp	r3, #97	; 0x61
 80010ae:	d122      	bne.n	80010f6 <HAL_UART_RxCpltCallback+0xbe>
			uint8_t servo_number, semicolon;
			HAL_UART_Receive(huart, &servo_number, 1, 10);
 80010b0:	f107 0114 	add.w	r1, r7, #20
 80010b4:	230a      	movs	r3, #10
 80010b6:	2201      	movs	r2, #1
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f004 ffb3 	bl	8006024 <HAL_UART_Receive>
			HAL_UART_Receive(huart, &semicolon, 1, 10);	// semicolon
 80010be:	f107 0113 	add.w	r1, r7, #19
 80010c2:	230a      	movs	r3, #10
 80010c4:	2201      	movs	r2, #1
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f004 ffac 	bl	8006024 <HAL_UART_Receive>
			printf("a%c %d;\r\n", servo_number, (int)milo.q[servo_number - '0']);
 80010cc:	7d3b      	ldrb	r3, [r7, #20]
 80010ce:	461c      	mov	r4, r3
 80010d0:	7d3b      	ldrb	r3, [r7, #20]
 80010d2:	3b30      	subs	r3, #48	; 0x30
 80010d4:	4a88      	ldr	r2, [pc, #544]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 80010d6:	3312      	adds	r3, #18
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4413      	add	r3, r2
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd30 	bl	8000b48 <__aeabi_d2iz>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	4621      	mov	r1, r4
 80010ee:	4883      	ldr	r0, [pc, #524]	; (80012fc <HAL_UART_RxCpltCallback+0x2c4>)
 80010f0:	f006 f83e 	bl	8007170 <iprintf>
 80010f4:	e139      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
		} else if (message == 'd') {
 80010f6:	4b7a      	ldr	r3, [pc, #488]	; (80012e0 <HAL_UART_RxCpltCallback+0x2a8>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d12e      	bne.n	800115c <HAL_UART_RxCpltCallback+0x124>
			uint8_t semicolon;
			HAL_UART_Receive(huart, &semicolon, 1, 10);	// semicolon
 80010fe:	f107 0112 	add.w	r1, r7, #18
 8001102:	230a      	movs	r3, #10
 8001104:	2201      	movs	r2, #1
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f004 ff8c 	bl	8006024 <HAL_UART_Receive>
			printf("d;%d;%d;%d;%d\r\n", (int)milo.q[0], (int)milo.q[1], (int)milo.q[2], (int)milo.q[3]);
 800110c:	4b7a      	ldr	r3, [pc, #488]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 800110e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fd17 	bl	8000b48 <__aeabi_d2iz>
 800111a:	4604      	mov	r4, r0
 800111c:	4b76      	ldr	r3, [pc, #472]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 800111e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fd0f 	bl	8000b48 <__aeabi_d2iz>
 800112a:	4605      	mov	r5, r0
 800112c:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 800112e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fd07 	bl	8000b48 <__aeabi_d2iz>
 800113a:	4606      	mov	r6, r0
 800113c:	4b6e      	ldr	r3, [pc, #440]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 800113e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fcff 	bl	8000b48 <__aeabi_d2iz>
 800114a:	4603      	mov	r3, r0
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	4633      	mov	r3, r6
 8001150:	462a      	mov	r2, r5
 8001152:	4621      	mov	r1, r4
 8001154:	486a      	ldr	r0, [pc, #424]	; (8001300 <HAL_UART_RxCpltCallback+0x2c8>)
 8001156:	f006 f80b 	bl	8007170 <iprintf>
 800115a:	e106      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
		} else if (message == 's') {
 800115c:	4b60      	ldr	r3, [pc, #384]	; (80012e0 <HAL_UART_RxCpltCallback+0x2a8>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b73      	cmp	r3, #115	; 0x73
 8001162:	d160      	bne.n	8001226 <HAL_UART_RxCpltCallback+0x1ee>
			uint8_t set_servo_number, tmp, set_servo_angle_str[4];
			uint8_t set_servo_angle_int;
			HAL_UART_Receive(huart, &set_servo_number, 1, 10);
 8001164:	f107 0111 	add.w	r1, r7, #17
 8001168:	230a      	movs	r3, #10
 800116a:	2201      	movs	r2, #1
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f004 ff59 	bl	8006024 <HAL_UART_Receive>
			HAL_UART_Receive(huart, &tmp, 1, 10); // space
 8001172:	f107 0110 	add.w	r1, r7, #16
 8001176:	230a      	movs	r3, #10
 8001178:	2201      	movs	r2, #1
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f004 ff52 	bl	8006024 <HAL_UART_Receive>
			for (uint8_t i = 0; i < 4; i++) {
 8001180:	2300      	movs	r3, #0
 8001182:	75bb      	strb	r3, [r7, #22]
 8001184:	e01b      	b.n	80011be <HAL_UART_RxCpltCallback+0x186>
			HAL_UART_Receive(huart, &tmp, 1, 10);
 8001186:	f107 0110 	add.w	r1, r7, #16
 800118a:	230a      	movs	r3, #10
 800118c:	2201      	movs	r2, #1
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f004 ff48 	bl	8006024 <HAL_UART_Receive>
				if (tmp == ';') {
 8001194:	7c3b      	ldrb	r3, [r7, #16]
 8001196:	2b3b      	cmp	r3, #59	; 0x3b
 8001198:	d107      	bne.n	80011aa <HAL_UART_RxCpltCallback+0x172>
					set_servo_angle_str[i] = 0;
 800119a:	7dbb      	ldrb	r3, [r7, #22]
 800119c:	f107 0218 	add.w	r2, r7, #24
 80011a0:	4413      	add	r3, r2
 80011a2:	2200      	movs	r2, #0
 80011a4:	f803 2c0c 	strb.w	r2, [r3, #-12]
					break;
 80011a8:	e00c      	b.n	80011c4 <HAL_UART_RxCpltCallback+0x18c>
				}
				set_servo_angle_str[i] = tmp;
 80011aa:	7dbb      	ldrb	r3, [r7, #22]
 80011ac:	7c3a      	ldrb	r2, [r7, #16]
 80011ae:	f107 0118 	add.w	r1, r7, #24
 80011b2:	440b      	add	r3, r1
 80011b4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (uint8_t i = 0; i < 4; i++) {
 80011b8:	7dbb      	ldrb	r3, [r7, #22]
 80011ba:	3301      	adds	r3, #1
 80011bc:	75bb      	strb	r3, [r7, #22]
 80011be:	7dbb      	ldrb	r3, [r7, #22]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d9e0      	bls.n	8001186 <HAL_UART_RxCpltCallback+0x14e>
			}
			set_servo_angle_int = string_to_int(set_servo_angle_str);
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fd89 	bl	8000ce0 <string_to_int>
 80011ce:	4603      	mov	r3, r0
 80011d0:	75fb      	strb	r3, [r7, #23]
			if (set_servo_angle_int > 180) {
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
 80011d4:	2bb4      	cmp	r3, #180	; 0xb4
 80011d6:	d904      	bls.n	80011e2 <HAL_UART_RxCpltCallback+0x1aa>
				set_servo_angle_int = 180;
 80011d8:	23b4      	movs	r3, #180	; 0xb4
 80011da:	75fb      	strb	r3, [r7, #23]
				printf("zbyt duzy kat\r\n");
 80011dc:	4849      	ldr	r0, [pc, #292]	; (8001304 <HAL_UART_RxCpltCallback+0x2cc>)
 80011de:	f006 f84d 	bl	800727c <puts>
			} else if (set_servo_angle_int < 0) {
				set_servo_angle_int = 0;
				printf("zbyt maly kat\r\n");
			}
			milo.q[set_servo_number - '0'] = set_servo_angle_int;
 80011e2:	7c7b      	ldrb	r3, [r7, #17]
 80011e4:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f982 	bl	80004f4 <__aeabi_ui2d>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4840      	ldr	r0, [pc, #256]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 80011f6:	f104 0112 	add.w	r1, r4, #18
 80011fa:	00c9      	lsls	r1, r1, #3
 80011fc:	4401      	add	r1, r0
 80011fe:	e9c1 2300 	strd	r2, r3, [r1]
			if (set_servo_number - '0' == button) {
 8001202:	7c7b      	ldrb	r3, [r7, #17]
 8001204:	3b30      	subs	r3, #48	; 0x30
 8001206:	4a37      	ldr	r2, [pc, #220]	; (80012e4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	4293      	cmp	r3, r2
 800120c:	d103      	bne.n	8001216 <HAL_UART_RxCpltCallback+0x1de>
				__HAL_TIM_SET_COUNTER(&htim2, set_servo_angle_int);
 800120e:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <HAL_UART_RxCpltCallback+0x2b8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	7dfa      	ldrb	r2, [r7, #23]
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
			}
			printf("s%c %d;\r\n", set_servo_number, set_servo_angle_int);
 8001216:	7c7b      	ldrb	r3, [r7, #17]
 8001218:	4619      	mov	r1, r3
 800121a:	7dfb      	ldrb	r3, [r7, #23]
 800121c:	461a      	mov	r2, r3
 800121e:	483a      	ldr	r0, [pc, #232]	; (8001308 <HAL_UART_RxCpltCallback+0x2d0>)
 8001220:	f005 ffa6 	bl	8007170 <iprintf>
 8001224:	e0a1      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
		} else if (message == 'h') {
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <HAL_UART_RxCpltCallback+0x2a8>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b68      	cmp	r3, #104	; 0x68
 800122c:	d10d      	bne.n	800124a <HAL_UART_RxCpltCallback+0x212>
			milo.effector.x--;
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 8001230:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b34      	ldr	r3, [pc, #208]	; (800130c <HAL_UART_RxCpltCallback+0x2d4>)
 800123a:	f7ff f81d 	bl	8000278 <__aeabi_dsub>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	492d      	ldr	r1, [pc, #180]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 8001244:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001248:	e08f      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
		} else if (message == 'y') {
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_UART_RxCpltCallback+0x2a8>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b79      	cmp	r3, #121	; 0x79
 8001250:	d10d      	bne.n	800126e <HAL_UART_RxCpltCallback+0x236>
			milo.effector.x++;
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 8001254:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_UART_RxCpltCallback+0x2d4>)
 800125e:	f7ff f80d 	bl	800027c <__adddf3>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4924      	ldr	r1, [pc, #144]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 8001268:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800126c:	e07d      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
		} else if (message == 'j') {
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_UART_RxCpltCallback+0x2a8>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b6a      	cmp	r3, #106	; 0x6a
 8001274:	d10d      	bne.n	8001292 <HAL_UART_RxCpltCallback+0x25a>
			milo.effector.y--;
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 8001278:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_UART_RxCpltCallback+0x2d4>)
 8001282:	f7fe fff9 	bl	8000278 <__aeabi_dsub>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	491b      	ldr	r1, [pc, #108]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 800128c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001290:	e06b      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
		} else if (message == 'u') {
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_UART_RxCpltCallback+0x2a8>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b75      	cmp	r3, #117	; 0x75
 8001298:	d10d      	bne.n	80012b6 <HAL_UART_RxCpltCallback+0x27e>
			milo.effector.y++;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 800129c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_UART_RxCpltCallback+0x2d4>)
 80012a6:	f7fe ffe9 	bl	800027c <__adddf3>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4912      	ldr	r1, [pc, #72]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 80012b0:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80012b4:	e059      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
		} else if (message == 'k') {
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_UART_RxCpltCallback+0x2a8>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b6b      	cmp	r3, #107	; 0x6b
 80012bc:	d128      	bne.n	8001310 <HAL_UART_RxCpltCallback+0x2d8>
			milo.effector.z--;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 80012c0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_UART_RxCpltCallback+0x2d4>)
 80012ca:	f7fe ffd5 	bl	8000278 <__aeabi_dsub>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4909      	ldr	r1, [pc, #36]	; (80012f8 <HAL_UART_RxCpltCallback+0x2c0>)
 80012d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80012d8:	e047      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
 80012da:	bf00      	nop
 80012dc:	40004400 	.word	0x40004400
 80012e0:	200002dc 	.word	0x200002dc
 80012e4:	20000094 	.word	0x20000094
 80012e8:	08009998 	.word	0x08009998
 80012ec:	080099a4 	.word	0x080099a4
 80012f0:	200004a0 	.word	0x200004a0
 80012f4:	080099b0 	.word	0x080099b0
 80012f8:	20000098 	.word	0x20000098
 80012fc:	080099bc 	.word	0x080099bc
 8001300:	080099c8 	.word	0x080099c8
 8001304:	080099d8 	.word	0x080099d8
 8001308:	080099e8 	.word	0x080099e8
 800130c:	3ff00000 	.word	0x3ff00000
		} else if (message == 'i') {
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <HAL_UART_RxCpltCallback+0x344>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b69      	cmp	r3, #105	; 0x69
 8001316:	d10d      	bne.n	8001334 <HAL_UART_RxCpltCallback+0x2fc>
			milo.effector.z++;
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_UART_RxCpltCallback+0x348>)
 800131a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_UART_RxCpltCallback+0x34c>)
 8001324:	f7fe ffaa 	bl	800027c <__adddf3>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4914      	ldr	r1, [pc, #80]	; (8001380 <HAL_UART_RxCpltCallback+0x348>)
 800132e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001332:	e01a      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
		} else if (message == 'o') {
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_UART_RxCpltCallback+0x344>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b6f      	cmp	r3, #111	; 0x6f
 800133a:	d113      	bne.n	8001364 <HAL_UART_RxCpltCallback+0x32c>
			milo.effector.x = 49.0;
 800133c:	4910      	ldr	r1, [pc, #64]	; (8001380 <HAL_UART_RxCpltCallback+0x348>)
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_UART_RxCpltCallback+0x350>)
 8001344:	e9c1 2306 	strd	r2, r3, [r1, #24]
			milo.effector.y = 29.0;
 8001348:	490d      	ldr	r1, [pc, #52]	; (8001380 <HAL_UART_RxCpltCallback+0x348>)
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_UART_RxCpltCallback+0x354>)
 8001350:	e9c1 2308 	strd	r2, r3, [r1, #32]
			milo.effector.z = 0.0;
 8001354:	490a      	ldr	r1, [pc, #40]	; (8001380 <HAL_UART_RxCpltCallback+0x348>)
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001362:	e002      	b.n	800136a <HAL_UART_RxCpltCallback+0x332>
		} else {
			printf("Niepoprawne dane\r\n");
 8001364:	480a      	ldr	r0, [pc, #40]	; (8001390 <HAL_UART_RxCpltCallback+0x358>)
 8001366:	f005 ff89 	bl	800727c <puts>
		}
		HAL_UART_Receive_IT(huart, &message, 1);
 800136a:	2201      	movs	r2, #1
 800136c:	4903      	ldr	r1, [pc, #12]	; (800137c <HAL_UART_RxCpltCallback+0x344>)
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f004 ff86 	bl	8006280 <HAL_UART_Receive_IT>
	}
}
 8001374:	bf00      	nop
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137c:	200002dc 	.word	0x200002dc
 8001380:	20000098 	.word	0x20000098
 8001384:	3ff00000 	.word	0x3ff00000
 8001388:	40488000 	.word	0x40488000
 800138c:	403d0000 	.word	0x403d0000
 8001390:	080099f4 	.word	0x080099f4

08001394 <HAL_TIM_PeriodElapsedCallback>:

void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af02      	add	r7, sp, #8
 800139a:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {	// wyswietlanie aktualnych danych do debugu
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d10f      	bne.n	80013c4 <HAL_TIM_PeriodElapsedCallback+0x30>
		printf("a0: %d; a1: %d; a2: %d; b: %ld\r\n", servo_angle[0], servo_angle[1], servo_angle[2], button);
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013ac:	885b      	ldrh	r3, [r3, #2]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013b2:	889b      	ldrh	r3, [r3, #4]
 80013b4:	4618      	mov	r0, r3
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4603      	mov	r3, r0
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80013c0:	f005 fed6 	bl	8007170 <iprintf>
	}
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000454 	.word	0x20000454
 80013d0:	200002c8 	.word	0x200002c8
 80013d4:	20000094 	.word	0x20000094
 80013d8:	08009a08 	.word	0x08009a08

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	0000      	movs	r0, r0
 80013ec:	0000      	movs	r0, r0
	...

080013f0 <manipulator_init>:
#include "manipulator.h"

void
manipulator_init(manipulator_t *m) {
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b099      	sub	sp, #100	; 0x64
 80013f4:	af16      	add	r7, sp, #88	; 0x58
 80013f6:	6078      	str	r0, [r7, #4]
	vector_init_d(&m->origin, 0, 0, 0);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	ed9f 2b6f 	vldr	d2, [pc, #444]	; 80015b8 <manipulator_init+0x1c8>
 80013fe:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 80015b8 <manipulator_init+0x1c8>
 8001402:	ed9f 0b6d 	vldr	d0, [pc, #436]	; 80015b8 <manipulator_init+0x1c8>
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fce6 	bl	8002dd8 <vector_init_d>

	m->q[0] = 0.0;
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	m->q[1] = 45.0;
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b69      	ldr	r3, [pc, #420]	; (80015c8 <manipulator_init+0x1d8>)
 8001422:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	m->q[2] = 45.0;
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b66      	ldr	r3, [pc, #408]	; (80015c8 <manipulator_init+0x1d8>)
 800142e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	m->q[3] = 0.0;
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

	m->len[0] = 40.0;
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b61      	ldr	r3, [pc, #388]	; (80015cc <manipulator_init+0x1dc>)
 8001448:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
	m->len[1] = 30.0;
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	4b5f      	ldr	r3, [pc, #380]	; (80015d0 <manipulator_init+0x1e0>)
 8001454:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	m->total_len = m->len[0] + m->len[1];
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8001464:	f7fe ff0a 	bl	800027c <__adddf3>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	m->error = 0.1;
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	a352      	add	r3, pc, #328	; (adr r3, 80015c0 <manipulator_init+0x1d0>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8

	manipulator_fk(m);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f8b2 	bl	80015e8 <manipulator_fk>

	servo_init(&m->servo[0], htim15, TIM_CHANNEL_1, 0, 0, 1800, 500, 2500);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f103 0cd0 	add.w	ip, r3, #208	; 0xd0
 800148a:	4e52      	ldr	r6, [pc, #328]	; (80015d4 <manipulator_init+0x1e4>)
 800148c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001490:	9315      	str	r3, [sp, #84]	; 0x54
 8001492:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001496:	9314      	str	r3, [sp, #80]	; 0x50
 8001498:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800149c:	9313      	str	r3, [sp, #76]	; 0x4c
 800149e:	2300      	movs	r3, #0
 80014a0:	9312      	str	r3, [sp, #72]	; 0x48
 80014a2:	2300      	movs	r3, #0
 80014a4:	9311      	str	r3, [sp, #68]	; 0x44
 80014a6:	2300      	movs	r3, #0
 80014a8:	9310      	str	r3, [sp, #64]	; 0x40
 80014aa:	466d      	mov	r5, sp
 80014ac:	f106 040c 	add.w	r4, r6, #12
 80014b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80014c4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80014c8:	4660      	mov	r0, ip
 80014ca:	f000 fe39 	bl	8002140 <servo_init>
	servo_init(&m->servo[1], htim16, TIM_CHANNEL_1, 0, 0, 1800, 500, 2500);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f503 7c94 	add.w	ip, r3, #296	; 0x128
 80014d4:	4e40      	ldr	r6, [pc, #256]	; (80015d8 <manipulator_init+0x1e8>)
 80014d6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014da:	9315      	str	r3, [sp, #84]	; 0x54
 80014dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014e0:	9314      	str	r3, [sp, #80]	; 0x50
 80014e2:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80014e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80014e8:	2300      	movs	r3, #0
 80014ea:	9312      	str	r3, [sp, #72]	; 0x48
 80014ec:	2300      	movs	r3, #0
 80014ee:	9311      	str	r3, [sp, #68]	; 0x44
 80014f0:	2300      	movs	r3, #0
 80014f2:	9310      	str	r3, [sp, #64]	; 0x40
 80014f4:	466d      	mov	r5, sp
 80014f6:	f106 040c 	add.w	r4, r6, #12
 80014fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800150a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800150e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001512:	4660      	mov	r0, ip
 8001514:	f000 fe14 	bl	8002140 <servo_init>
	servo_init(&m->servo[2], htim17, TIM_CHANNEL_1, 0, 0, 1800, 500, 2500);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f503 7cc0 	add.w	ip, r3, #384	; 0x180
 800151e:	4e2f      	ldr	r6, [pc, #188]	; (80015dc <manipulator_init+0x1ec>)
 8001520:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001524:	9315      	str	r3, [sp, #84]	; 0x54
 8001526:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800152a:	9314      	str	r3, [sp, #80]	; 0x50
 800152c:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001530:	9313      	str	r3, [sp, #76]	; 0x4c
 8001532:	2300      	movs	r3, #0
 8001534:	9312      	str	r3, [sp, #72]	; 0x48
 8001536:	2300      	movs	r3, #0
 8001538:	9311      	str	r3, [sp, #68]	; 0x44
 800153a:	2300      	movs	r3, #0
 800153c:	9310      	str	r3, [sp, #64]	; 0x40
 800153e:	466d      	mov	r5, sp
 8001540:	f106 040c 	add.w	r4, r6, #12
 8001544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001550:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001554:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001558:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800155c:	4660      	mov	r0, ip
 800155e:	f000 fdef 	bl	8002140 <servo_init>
	servo_init(&m->servo[3], htim3, TIM_CHANNEL_1, 0, 0, 1800, 500, 2500);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f503 7cec 	add.w	ip, r3, #472	; 0x1d8
 8001568:	4e1d      	ldr	r6, [pc, #116]	; (80015e0 <manipulator_init+0x1f0>)
 800156a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800156e:	9315      	str	r3, [sp, #84]	; 0x54
 8001570:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001574:	9314      	str	r3, [sp, #80]	; 0x50
 8001576:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800157a:	9313      	str	r3, [sp, #76]	; 0x4c
 800157c:	2300      	movs	r3, #0
 800157e:	9312      	str	r3, [sp, #72]	; 0x48
 8001580:	2300      	movs	r3, #0
 8001582:	9311      	str	r3, [sp, #68]	; 0x44
 8001584:	2300      	movs	r3, #0
 8001586:	9310      	str	r3, [sp, #64]	; 0x40
 8001588:	466d      	mov	r5, sp
 800158a:	f106 040c 	add.w	r4, r6, #12
 800158e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800159e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015a2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80015a6:	4660      	mov	r0, ip
 80015a8:	f000 fdca 	bl	8002140 <servo_init>
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b4:	f3af 8000 	nop.w
	...
 80015c0:	9999999a 	.word	0x9999999a
 80015c4:	3fb99999 	.word	0x3fb99999
 80015c8:	40468000 	.word	0x40468000
 80015cc:	40440000 	.word	0x40440000
 80015d0:	403e0000 	.word	0x403e0000
 80015d4:	20000370 	.word	0x20000370
 80015d8:	200004ec 	.word	0x200004ec
 80015dc:	200003bc 	.word	0x200003bc
 80015e0:	20000408 	.word	0x20000408
 80015e4:	00000000 	.word	0x00000000

080015e8 <manipulator_fk>:
	vector_print(m.j2[1]);
	printf("\n}\n");
}

void
manipulator_fk(manipulator_t *m) {
 80015e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015ec:	ed2d 8b04 	vpush	{d8-d9}
 80015f0:	b089      	sub	sp, #36	; 0x24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
	double qr[3] = { m->q[0] * M_PI / 180.0 , m->q[1] * M_PI / 180.0, m->q[2] * M_PI / 180.0 };
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80015fc:	a3e2      	add	r3, pc, #904	; (adr r3, 8001988 <manipulator_fk+0x3a0>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7fe fff1 	bl	80005e8 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	4bdf      	ldr	r3, [pc, #892]	; (8001990 <manipulator_fk+0x3a8>)
 8001614:	f7ff f912 	bl	800083c <__aeabi_ddiv>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8001626:	a3d8      	add	r3, pc, #864	; (adr r3, 8001988 <manipulator_fk+0x3a0>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7fe ffdc 	bl	80005e8 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4bd4      	ldr	r3, [pc, #848]	; (8001990 <manipulator_fk+0x3a8>)
 800163e:	f7ff f8fd 	bl	800083c <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8001650:	a3cd      	add	r3, pc, #820	; (adr r3, 8001988 <manipulator_fk+0x3a0>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7fe ffc7 	bl	80005e8 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4bca      	ldr	r3, [pc, #808]	; (8001990 <manipulator_fk+0x3a8>)
 8001668:	f7ff f8e8 	bl	800083c <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	e9c7 2306 	strd	r2, r3, [r7, #24]
	vector_init_v(&m->j1[0], m->origin);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	ed93 5b00 	vldr	d5, [r3]
 8001680:	ed93 6b02 	vldr	d6, [r3, #8]
 8001684:	ed93 7b04 	vldr	d7, [r3, #16]
 8001688:	eeb0 0a45 	vmov.f32	s0, s10
 800168c:	eef0 0a65 	vmov.f32	s1, s11
 8001690:	eeb0 1a46 	vmov.f32	s2, s12
 8001694:	eef0 1a66 	vmov.f32	s3, s13
 8001698:	eeb0 2a47 	vmov.f32	s4, s14
 800169c:	eef0 2a67 	vmov.f32	s5, s15
 80016a0:	4610      	mov	r0, r2
 80016a2:	f001 fbb8 	bl	8002e16 <vector_init_v>
	vector_init_d(&m->j1[1],
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f103 0648 	add.w	r6, r3, #72	; 0x48
				m->len[0] * cos(qr[1]) * cos(qr[0]),
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 80016b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80016b6:	eeb0 0a47 	vmov.f32	s0, s14
 80016ba:	eef0 0a67 	vmov.f32	s1, s15
 80016be:	f006 fd23 	bl	8008108 <cos>
 80016c2:	ec53 2b10 	vmov	r2, r3, d0
 80016c6:	4620      	mov	r0, r4
 80016c8:	4629      	mov	r1, r5
 80016ca:	f7fe ff8d 	bl	80005e8 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4614      	mov	r4, r2
 80016d4:	461d      	mov	r5, r3
 80016d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80016da:	eeb0 0a47 	vmov.f32	s0, s14
 80016de:	eef0 0a67 	vmov.f32	s1, s15
 80016e2:	f006 fd11 	bl	8008108 <cos>
 80016e6:	ec53 2b10 	vmov	r2, r3, d0
	vector_init_d(&m->j1[1],
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe ff7b 	bl	80005e8 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	ec43 2b18 	vmov	d8, r2, r3
				m->len[0] * sin(qr[1]),
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8001700:	ed97 7b04 	vldr	d7, [r7, #16]
 8001704:	eeb0 0a47 	vmov.f32	s0, s14
 8001708:	eef0 0a67 	vmov.f32	s1, s15
 800170c:	f006 fd4c 	bl	80081a8 <sin>
 8001710:	ec53 2b10 	vmov	r2, r3, d0
	vector_init_d(&m->j1[1],
 8001714:	4620      	mov	r0, r4
 8001716:	4629      	mov	r1, r5
 8001718:	f7fe ff66 	bl	80005e8 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	ec43 2b19 	vmov	d9, r2, r3
				m->len[0] * cos(qr[1]) * sin(qr[0]));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800172a:	ed97 7b04 	vldr	d7, [r7, #16]
 800172e:	eeb0 0a47 	vmov.f32	s0, s14
 8001732:	eef0 0a67 	vmov.f32	s1, s15
 8001736:	f006 fce7 	bl	8008108 <cos>
 800173a:	ec53 2b10 	vmov	r2, r3, d0
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	f7fe ff51 	bl	80005e8 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4614      	mov	r4, r2
 800174c:	461d      	mov	r5, r3
 800174e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001752:	eeb0 0a47 	vmov.f32	s0, s14
 8001756:	eef0 0a67 	vmov.f32	s1, s15
 800175a:	f006 fd25 	bl	80081a8 <sin>
 800175e:	ec53 2b10 	vmov	r2, r3, d0
	vector_init_d(&m->j1[1],
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe ff3f 	bl	80005e8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	ec43 2b17 	vmov	d7, r2, r3
 8001772:	eeb0 2a47 	vmov.f32	s4, s14
 8001776:	eef0 2a67 	vmov.f32	s5, s15
 800177a:	eeb0 1a49 	vmov.f32	s2, s18
 800177e:	eef0 1a69 	vmov.f32	s3, s19
 8001782:	eeb0 0a48 	vmov.f32	s0, s16
 8001786:	eef0 0a68 	vmov.f32	s1, s17
 800178a:	4630      	mov	r0, r6
 800178c:	f001 fb24 	bl	8002dd8 <vector_init_d>
	vector_init_v(&m->j2[0], m->j1[1]);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	ed93 5b12 	vldr	d5, [r3, #72]	; 0x48
 800179c:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80017a0:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80017a4:	eeb0 0a45 	vmov.f32	s0, s10
 80017a8:	eef0 0a65 	vmov.f32	s1, s11
 80017ac:	eeb0 1a46 	vmov.f32	s2, s12
 80017b0:	eef0 1a66 	vmov.f32	s3, s13
 80017b4:	eeb0 2a47 	vmov.f32	s4, s14
 80017b8:	eef0 2a67 	vmov.f32	s5, s15
 80017bc:	4610      	mov	r0, r2
 80017be:	f001 fb2a 	bl	8002e16 <vector_init_v>
	vector_init_d(&m->j2[1],
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f103 0678 	add.w	r6, r3, #120	; 0x78
				(m->len[0] * cos(qr[1]) + m->len[1] * cos(qr[1] - qr[2])) * cos(qr[0]),
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 80017ce:	ed97 7b04 	vldr	d7, [r7, #16]
 80017d2:	eeb0 0a47 	vmov.f32	s0, s14
 80017d6:	eef0 0a67 	vmov.f32	s1, s15
 80017da:	f006 fc95 	bl	8008108 <cos>
 80017de:	ec53 2b10 	vmov	r2, r3, d0
 80017e2:	4620      	mov	r0, r4
 80017e4:	4629      	mov	r1, r5
 80017e6:	f7fe feff 	bl	80005e8 <__aeabi_dmul>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4690      	mov	r8, r2
 80017f0:	4699      	mov	r9, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 80017f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001800:	f7fe fd3a 	bl	8000278 <__aeabi_dsub>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	ec43 2b17 	vmov	d7, r2, r3
 800180c:	eeb0 0a47 	vmov.f32	s0, s14
 8001810:	eef0 0a67 	vmov.f32	s1, s15
 8001814:	f006 fc78 	bl	8008108 <cos>
 8001818:	ec53 2b10 	vmov	r2, r3, d0
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe fee2 	bl	80005e8 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4640      	mov	r0, r8
 800182a:	4649      	mov	r1, r9
 800182c:	f7fe fd26 	bl	800027c <__adddf3>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4614      	mov	r4, r2
 8001836:	461d      	mov	r5, r3
 8001838:	ed97 7b02 	vldr	d7, [r7, #8]
 800183c:	eeb0 0a47 	vmov.f32	s0, s14
 8001840:	eef0 0a67 	vmov.f32	s1, s15
 8001844:	f006 fc60 	bl	8008108 <cos>
 8001848:	ec53 2b10 	vmov	r2, r3, d0
	vector_init_d(&m->j2[1],
 800184c:	4620      	mov	r0, r4
 800184e:	4629      	mov	r1, r5
 8001850:	f7fe feca 	bl	80005e8 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	ec43 2b18 	vmov	d8, r2, r3
				m->len[0] * sin(qr[1]) + m->len[1] * sin(qr[1] - qr[2]),
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8001862:	ed97 7b04 	vldr	d7, [r7, #16]
 8001866:	eeb0 0a47 	vmov.f32	s0, s14
 800186a:	eef0 0a67 	vmov.f32	s1, s15
 800186e:	f006 fc9b 	bl	80081a8 <sin>
 8001872:	ec53 2b10 	vmov	r2, r3, d0
 8001876:	4620      	mov	r0, r4
 8001878:	4629      	mov	r1, r5
 800187a:	f7fe feb5 	bl	80005e8 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4690      	mov	r8, r2
 8001884:	4699      	mov	r9, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 800188c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001894:	f7fe fcf0 	bl	8000278 <__aeabi_dsub>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	ec43 2b17 	vmov	d7, r2, r3
 80018a0:	eeb0 0a47 	vmov.f32	s0, s14
 80018a4:	eef0 0a67 	vmov.f32	s1, s15
 80018a8:	f006 fc7e 	bl	80081a8 <sin>
 80018ac:	ec53 2b10 	vmov	r2, r3, d0
 80018b0:	4620      	mov	r0, r4
 80018b2:	4629      	mov	r1, r5
 80018b4:	f7fe fe98 	bl	80005e8 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
	vector_init_d(&m->j2[1],
 80018bc:	4640      	mov	r0, r8
 80018be:	4649      	mov	r1, r9
 80018c0:	f7fe fcdc 	bl	800027c <__adddf3>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	ec43 2b19 	vmov	d9, r2, r3
				(m->len[0] * cos(qr[1]) + m->len[1] * cos(qr[1] - qr[2])) * sin(qr[0]));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 80018d2:	ed97 7b04 	vldr	d7, [r7, #16]
 80018d6:	eeb0 0a47 	vmov.f32	s0, s14
 80018da:	eef0 0a67 	vmov.f32	s1, s15
 80018de:	f006 fc13 	bl	8008108 <cos>
 80018e2:	ec53 2b10 	vmov	r2, r3, d0
 80018e6:	4620      	mov	r0, r4
 80018e8:	4629      	mov	r1, r5
 80018ea:	f7fe fe7d 	bl	80005e8 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4690      	mov	r8, r2
 80018f4:	4699      	mov	r9, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 80018fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001904:	f7fe fcb8 	bl	8000278 <__aeabi_dsub>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	ec43 2b17 	vmov	d7, r2, r3
 8001910:	eeb0 0a47 	vmov.f32	s0, s14
 8001914:	eef0 0a67 	vmov.f32	s1, s15
 8001918:	f006 fbf6 	bl	8008108 <cos>
 800191c:	ec53 2b10 	vmov	r2, r3, d0
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7fe fe60 	bl	80005e8 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4640      	mov	r0, r8
 800192e:	4649      	mov	r1, r9
 8001930:	f7fe fca4 	bl	800027c <__adddf3>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001940:	eeb0 0a47 	vmov.f32	s0, s14
 8001944:	eef0 0a67 	vmov.f32	s1, s15
 8001948:	f006 fc2e 	bl	80081a8 <sin>
 800194c:	ec53 2b10 	vmov	r2, r3, d0
	vector_init_d(&m->j2[1],
 8001950:	4620      	mov	r0, r4
 8001952:	4629      	mov	r1, r5
 8001954:	f7fe fe48 	bl	80005e8 <__aeabi_dmul>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	ec43 2b17 	vmov	d7, r2, r3
 8001960:	eeb0 2a47 	vmov.f32	s4, s14
 8001964:	eef0 2a67 	vmov.f32	s5, s15
 8001968:	eeb0 1a49 	vmov.f32	s2, s18
 800196c:	eef0 1a69 	vmov.f32	s3, s19
 8001970:	eeb0 0a48 	vmov.f32	s0, s16
 8001974:	eef0 0a68 	vmov.f32	s1, s17
 8001978:	4630      	mov	r0, r6
 800197a:	f001 fa2d 	bl	8002dd8 <vector_init_d>
	vector_init_v(&m->effector, m->j2[1]);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	e008      	b.n	8001994 <manipulator_fk+0x3ac>
 8001982:	bf00      	nop
 8001984:	f3af 8000 	nop.w
 8001988:	54442d18 	.word	0x54442d18
 800198c:	400921fb 	.word	0x400921fb
 8001990:	40668000 	.word	0x40668000
 8001994:	f103 0218 	add.w	r2, r3, #24
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800199e:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 80019a2:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80019a6:	eeb0 0a45 	vmov.f32	s0, s10
 80019aa:	eef0 0a65 	vmov.f32	s1, s11
 80019ae:	eeb0 1a46 	vmov.f32	s2, s12
 80019b2:	eef0 1a66 	vmov.f32	s3, s13
 80019b6:	eeb0 2a47 	vmov.f32	s4, s14
 80019ba:	eef0 2a67 	vmov.f32	s5, s15
 80019be:	4610      	mov	r0, r2
 80019c0:	f001 fa29 	bl	8002e16 <vector_init_v>
}
 80019c4:	bf00      	nop
 80019c6:	3724      	adds	r7, #36	; 0x24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	ecbd 8b04 	vpop	{d8-d9}
 80019ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019d2:	bf00      	nop

080019d4 <manipulator_backward>:
// function declaration
void
manipulator_forward(manipulator_t *m, int depth, double x, double y, double z);

void
manipulator_backward(manipulator_t *m, int depth, double x, double y, double z) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08e      	sub	sp, #56	; 0x38
 80019d8:	af00      	add	r7, sp, #0
 80019da:	61f8      	str	r0, [r7, #28]
 80019dc:	61b9      	str	r1, [r7, #24]
 80019de:	ed87 0b04 	vstr	d0, [r7, #16]
 80019e2:	ed87 1b02 	vstr	d1, [r7, #8]
 80019e6:	ed87 2b00 	vstr	d2, [r7]
	vector_init_d(&m->j2[1], x, y, z);
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3378      	adds	r3, #120	; 0x78
 80019ee:	ed97 2b00 	vldr	d2, [r7]
 80019f2:	ed97 1b02 	vldr	d1, [r7, #8]
 80019f6:	ed97 0b04 	vldr	d0, [r7, #16]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 f9ec 	bl	8002dd8 <vector_init_d>
	if (vector_mag(m->j2[1]) > m->total_len) {
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8001a06:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 8001a0a:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8001a0e:	eeb0 0a45 	vmov.f32	s0, s10
 8001a12:	eef0 0a65 	vmov.f32	s1, s11
 8001a16:	eeb0 1a46 	vmov.f32	s2, s12
 8001a1a:	eef0 1a66 	vmov.f32	s3, s13
 8001a1e:	eeb0 2a47 	vmov.f32	s4, s14
 8001a22:	eef0 2a67 	vmov.f32	s5, s15
 8001a26:	f001 fa21 	bl	8002e6c <vector_mag>
 8001a2a:	ec51 0b10 	vmov	r0, r1, d0
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8001a34:	f7ff f868 	bl	8000b08 <__aeabi_dcmpgt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <manipulator_backward+0x72>
		printf("za daleko\n");
 8001a3e:	487a      	ldr	r0, [pc, #488]	; (8001c28 <manipulator_backward+0x254>)
 8001a40:	f005 fc1c 	bl	800727c <puts>
 8001a44:	e0ec      	b.n	8001c20 <manipulator_backward+0x24c>
		return;
	}
	vector_t tmp;
	// substract end of the joint from it's beginning
	vector_sub(&tmp, m->j2[0], m->j2[1]);
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8001a4c:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8001a50:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	ed93 2b18 	vldr	d2, [r3, #96]	; 0x60
 8001a5a:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 8001a5e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	eeb0 0a42 	vmov.f32	s0, s4
 8001a6a:	eef0 0a62 	vmov.f32	s1, s5
 8001a6e:	eeb0 1a46 	vmov.f32	s2, s12
 8001a72:	eef0 1a66 	vmov.f32	s3, s13
 8001a76:	eeb0 2a47 	vmov.f32	s4, s14
 8001a7a:	eef0 2a67 	vmov.f32	s5, s15
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f001 fb49 	bl	8003116 <vector_sub>
	vector_normalize(&tmp);
 8001a84:	f107 0320 	add.w	r3, r7, #32
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fbaf 	bl	80031ec <vector_normalize>
	// multiplying * length of a joint
	vector_mult(&tmp, m->len[1]);
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 8001a94:	f107 0320 	add.w	r3, r7, #32
 8001a98:	eeb0 0a47 	vmov.f32	s0, s14
 8001a9c:	eef0 0a67 	vmov.f32	s1, s15
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f001 fb75 	bl	8003190 <vector_mult>
	// adding end coords
	vector_add(&tmp, tmp, m->j2[1]);
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8001aac:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8001ab0:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 8001ab4:	ed97 2b08 	vldr	d2, [r7, #32]
 8001ab8:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001abc:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001ac0:	f107 0320 	add.w	r3, r7, #32
 8001ac4:	eeb0 0a42 	vmov.f32	s0, s4
 8001ac8:	eef0 0a62 	vmov.f32	s1, s5
 8001acc:	eeb0 1a46 	vmov.f32	s2, s12
 8001ad0:	eef0 1a66 	vmov.f32	s3, s13
 8001ad4:	eeb0 2a47 	vmov.f32	s4, s14
 8001ad8:	eef0 2a67 	vmov.f32	s5, s15
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 fadd 	bl	800309c <vector_add>
	vector_init_v(&m->j2[0], tmp);
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3360      	adds	r3, #96	; 0x60
 8001ae6:	ed97 5b08 	vldr	d5, [r7, #32]
 8001aea:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001aee:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001af2:	eeb0 0a45 	vmov.f32	s0, s10
 8001af6:	eef0 0a65 	vmov.f32	s1, s11
 8001afa:	eeb0 1a46 	vmov.f32	s2, s12
 8001afe:	eef0 1a66 	vmov.f32	s3, s13
 8001b02:	eeb0 2a47 	vmov.f32	s4, s14
 8001b06:	eef0 2a67 	vmov.f32	s5, s15
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 f983 	bl	8002e16 <vector_init_v>

	// set end of first joint and repeat the process
	vector_init_v(&m->j1[1], m->j2[0]);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8001b1c:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 8001b20:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8001b24:	eeb0 0a45 	vmov.f32	s0, s10
 8001b28:	eef0 0a65 	vmov.f32	s1, s11
 8001b2c:	eeb0 1a46 	vmov.f32	s2, s12
 8001b30:	eef0 1a66 	vmov.f32	s3, s13
 8001b34:	eeb0 2a47 	vmov.f32	s4, s14
 8001b38:	eef0 2a67 	vmov.f32	s5, s15
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f001 f96a 	bl	8002e16 <vector_init_v>
	vector_sub(&tmp, m->j1[0], m->j1[1]);
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	ed93 3b12 	vldr	d3, [r3, #72]	; 0x48
 8001b48:	ed93 4b14 	vldr	d4, [r3, #80]	; 0x50
 8001b4c:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8001b56:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8001b5a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001b5e:	f107 0320 	add.w	r3, r7, #32
 8001b62:	eeb0 0a42 	vmov.f32	s0, s4
 8001b66:	eef0 0a62 	vmov.f32	s1, s5
 8001b6a:	eeb0 1a46 	vmov.f32	s2, s12
 8001b6e:	eef0 1a66 	vmov.f32	s3, s13
 8001b72:	eeb0 2a47 	vmov.f32	s4, s14
 8001b76:	eef0 2a67 	vmov.f32	s5, s15
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f001 facb 	bl	8003116 <vector_sub>
	vector_normalize(&tmp);
 8001b80:	f107 0320 	add.w	r3, r7, #32
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 fb31 	bl	80031ec <vector_normalize>
	vector_mult(&tmp, m->len[0]);
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8001b90:	f107 0320 	add.w	r3, r7, #32
 8001b94:	eeb0 0a47 	vmov.f32	s0, s14
 8001b98:	eef0 0a67 	vmov.f32	s1, s15
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 faf7 	bl	8003190 <vector_mult>
	vector_add(&tmp, tmp, m->j1[1]);
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	ed93 3b12 	vldr	d3, [r3, #72]	; 0x48
 8001ba8:	ed93 4b14 	vldr	d4, [r3, #80]	; 0x50
 8001bac:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 8001bb0:	ed97 2b08 	vldr	d2, [r7, #32]
 8001bb4:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001bb8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001bbc:	f107 0320 	add.w	r3, r7, #32
 8001bc0:	eeb0 0a42 	vmov.f32	s0, s4
 8001bc4:	eef0 0a62 	vmov.f32	s1, s5
 8001bc8:	eeb0 1a46 	vmov.f32	s2, s12
 8001bcc:	eef0 1a66 	vmov.f32	s3, s13
 8001bd0:	eeb0 2a47 	vmov.f32	s4, s14
 8001bd4:	eef0 2a67 	vmov.f32	s5, s15
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fa5f 	bl	800309c <vector_add>
	vector_init_v(&m->j1[0], tmp);
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3330      	adds	r3, #48	; 0x30
 8001be2:	ed97 5b08 	vldr	d5, [r7, #32]
 8001be6:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001bea:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001bee:	eeb0 0a45 	vmov.f32	s0, s10
 8001bf2:	eef0 0a65 	vmov.f32	s1, s11
 8001bf6:	eeb0 1a46 	vmov.f32	s2, s12
 8001bfa:	eef0 1a66 	vmov.f32	s3, s13
 8001bfe:	eeb0 2a47 	vmov.f32	s4, s14
 8001c02:	eef0 2a67 	vmov.f32	s5, s15
 8001c06:	4618      	mov	r0, r3
 8001c08:	f001 f905 	bl	8002e16 <vector_init_v>

	manipulator_forward(m, depth, x, y, z);
 8001c0c:	ed97 2b00 	vldr	d2, [r7]
 8001c10:	ed97 1b02 	vldr	d1, [r7, #8]
 8001c14:	ed97 0b04 	vldr	d0, [r7, #16]
 8001c18:	69b9      	ldr	r1, [r7, #24]
 8001c1a:	69f8      	ldr	r0, [r7, #28]
 8001c1c:	f000 f806 	bl	8001c2c <manipulator_forward>
}
 8001c20:	3738      	adds	r7, #56	; 0x38
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	08009a98 	.word	0x08009a98

08001c2c <manipulator_forward>:

void
manipulator_forward(manipulator_t *m, int depth, double x, double y, double z) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08e      	sub	sp, #56	; 0x38
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	61f8      	str	r0, [r7, #28]
 8001c34:	61b9      	str	r1, [r7, #24]
 8001c36:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c3a:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c3e:	ed87 2b00 	vstr	d2, [r7]
	depth--;
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	61bb      	str	r3, [r7, #24]
	//printf("forward\n");
	vector_init_v(&m->j1[0], m->origin);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	ed93 5b00 	vldr	d5, [r3]
 8001c54:	ed93 6b02 	vldr	d6, [r3, #8]
 8001c58:	ed93 7b04 	vldr	d7, [r3, #16]
 8001c5c:	eeb0 0a45 	vmov.f32	s0, s10
 8001c60:	eef0 0a65 	vmov.f32	s1, s11
 8001c64:	eeb0 1a46 	vmov.f32	s2, s12
 8001c68:	eef0 1a66 	vmov.f32	s3, s13
 8001c6c:	eeb0 2a47 	vmov.f32	s4, s14
 8001c70:	eef0 2a67 	vmov.f32	s5, s15
 8001c74:	4610      	mov	r0, r2
 8001c76:	f001 f8ce 	bl	8002e16 <vector_init_v>
	vector_t tmp;
	vector_sub(&tmp, m->j1[1], m->j1[0]);
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8001c80:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
 8001c84:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	ed93 2b12 	vldr	d2, [r3, #72]	; 0x48
 8001c8e:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001c92:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001c96:	f107 0320 	add.w	r3, r7, #32
 8001c9a:	eeb0 0a42 	vmov.f32	s0, s4
 8001c9e:	eef0 0a62 	vmov.f32	s1, s5
 8001ca2:	eeb0 1a46 	vmov.f32	s2, s12
 8001ca6:	eef0 1a66 	vmov.f32	s3, s13
 8001caa:	eeb0 2a47 	vmov.f32	s4, s14
 8001cae:	eef0 2a67 	vmov.f32	s5, s15
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 fa2f 	bl	8003116 <vector_sub>
	vector_normalize(&tmp);
 8001cb8:	f107 0320 	add.w	r3, r7, #32
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 fa95 	bl	80031ec <vector_normalize>
	vector_mult(&tmp, m->len[0]);
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd0:	eef0 0a67 	vmov.f32	s1, s15
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 fa5b 	bl	8003190 <vector_mult>
	vector_init_v(&m->j1[1], tmp);
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3348      	adds	r3, #72	; 0x48
 8001cde:	ed97 5b08 	vldr	d5, [r7, #32]
 8001ce2:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001ce6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001cea:	eeb0 0a45 	vmov.f32	s0, s10
 8001cee:	eef0 0a65 	vmov.f32	s1, s11
 8001cf2:	eeb0 1a46 	vmov.f32	s2, s12
 8001cf6:	eef0 1a66 	vmov.f32	s3, s13
 8001cfa:	eeb0 2a47 	vmov.f32	s4, s14
 8001cfe:	eef0 2a67 	vmov.f32	s5, s15
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 f887 	bl	8002e16 <vector_init_v>
	vector_init_v(&m->j2[0], m->j1[1]);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	ed93 5b12 	vldr	d5, [r3, #72]	; 0x48
 8001d14:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001d18:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001d1c:	eeb0 0a45 	vmov.f32	s0, s10
 8001d20:	eef0 0a65 	vmov.f32	s1, s11
 8001d24:	eeb0 1a46 	vmov.f32	s2, s12
 8001d28:	eef0 1a66 	vmov.f32	s3, s13
 8001d2c:	eeb0 2a47 	vmov.f32	s4, s14
 8001d30:	eef0 2a67 	vmov.f32	s5, s15
 8001d34:	4610      	mov	r0, r2
 8001d36:	f001 f86e 	bl	8002e16 <vector_init_v>
	//vector_print(m->j1[1]);

	vector_sub(&tmp, m->j2[1], m->j2[0]);
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	ed93 3b18 	vldr	d3, [r3, #96]	; 0x60
 8001d40:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 8001d44:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	ed93 2b1e 	vldr	d2, [r3, #120]	; 0x78
 8001d4e:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 8001d52:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	eeb0 0a42 	vmov.f32	s0, s4
 8001d5e:	eef0 0a62 	vmov.f32	s1, s5
 8001d62:	eeb0 1a46 	vmov.f32	s2, s12
 8001d66:	eef0 1a66 	vmov.f32	s3, s13
 8001d6a:	eeb0 2a47 	vmov.f32	s4, s14
 8001d6e:	eef0 2a67 	vmov.f32	s5, s15
 8001d72:	4618      	mov	r0, r3
 8001d74:	f001 f9cf 	bl	8003116 <vector_sub>
	vector_normalize(&tmp);
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 fa35 	bl	80031ec <vector_normalize>
	vector_mult(&tmp, m->len[1]);
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 8001d88:	f107 0320 	add.w	r3, r7, #32
 8001d8c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d90:	eef0 0a67 	vmov.f32	s1, s15
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 f9fb 	bl	8003190 <vector_mult>
	vector_add(&tmp, tmp, m->j2[0]);
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	ed93 3b18 	vldr	d3, [r3, #96]	; 0x60
 8001da0:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 8001da4:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8001da8:	ed97 2b08 	vldr	d2, [r7, #32]
 8001dac:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001db0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001db4:	f107 0320 	add.w	r3, r7, #32
 8001db8:	eeb0 0a42 	vmov.f32	s0, s4
 8001dbc:	eef0 0a62 	vmov.f32	s1, s5
 8001dc0:	eeb0 1a46 	vmov.f32	s2, s12
 8001dc4:	eef0 1a66 	vmov.f32	s3, s13
 8001dc8:	eeb0 2a47 	vmov.f32	s4, s14
 8001dcc:	eef0 2a67 	vmov.f32	s5, s15
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 f963 	bl	800309c <vector_add>
	vector_init_v(&m->j2[1], tmp);
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3378      	adds	r3, #120	; 0x78
 8001dda:	ed97 5b08 	vldr	d5, [r7, #32]
 8001dde:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001de2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001de6:	eeb0 0a45 	vmov.f32	s0, s10
 8001dea:	eef0 0a65 	vmov.f32	s1, s11
 8001dee:	eeb0 1a46 	vmov.f32	s2, s12
 8001df2:	eef0 1a66 	vmov.f32	s3, s13
 8001df6:	eeb0 2a47 	vmov.f32	s4, s14
 8001dfa:	eef0 2a67 	vmov.f32	s5, s15
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f001 f809 	bl	8002e16 <vector_init_v>
	
	// error check
	vector_init_d(&tmp, x, y, z);
 8001e04:	f107 0320 	add.w	r3, r7, #32
 8001e08:	ed97 2b00 	vldr	d2, [r7]
 8001e0c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001e10:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 ffdf 	bl	8002dd8 <vector_init_d>
	vector_sub(&tmp, tmp, m->j2[1]);
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8001e20:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8001e24:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 8001e28:	ed97 2b08 	vldr	d2, [r7, #32]
 8001e2c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001e30:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001e34:	f107 0320 	add.w	r3, r7, #32
 8001e38:	eeb0 0a42 	vmov.f32	s0, s4
 8001e3c:	eef0 0a62 	vmov.f32	s1, s5
 8001e40:	eeb0 1a46 	vmov.f32	s2, s12
 8001e44:	eef0 1a66 	vmov.f32	s3, s13
 8001e48:	eeb0 2a47 	vmov.f32	s4, s14
 8001e4c:	eef0 2a67 	vmov.f32	s5, s15
 8001e50:	4618      	mov	r0, r3
 8001e52:	f001 f960 	bl	8003116 <vector_sub>
	//if (fabs(vector_mag(tmp)) > m->error || depth >= 0) {
	if (depth >= 0) {
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db09      	blt.n	8001e70 <manipulator_forward+0x244>
		manipulator_backward(m, depth, x, y, z);
 8001e5c:	ed97 2b00 	vldr	d2, [r7]
 8001e60:	ed97 1b02 	vldr	d1, [r7, #8]
 8001e64:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e68:	69b9      	ldr	r1, [r7, #24]
 8001e6a:	69f8      	ldr	r0, [r7, #28]
 8001e6c:	f7ff fdb2 	bl	80019d4 <manipulator_backward>
	}
}
 8001e70:	bf00      	nop
 8001e72:	3738      	adds	r7, #56	; 0x38
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <manipulator_calculate_angles>:

void
manipulator_calculate_angles(manipulator_t *m) {
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b094      	sub	sp, #80	; 0x50
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	vector_t x_tmp;
	vector_t y_tmp;
	vector_t x_axis;

	// set temporary vector to j1b on x plane to calculate q1 and q2
	vector_init_d(&x_tmp, m->j1[1].x, 0, m->j1[1].z);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001e8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e90:	eeb0 2a46 	vmov.f32	s4, s12
 8001e94:	eef0 2a66 	vmov.f32	s5, s13
 8001e98:	ed9f 1b73 	vldr	d1, [pc, #460]	; 8002068 <manipulator_calculate_angles+0x1f0>
 8001e9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001ea0:	eef0 0a67 	vmov.f32	s1, s15
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 ff97 	bl	8002dd8 <vector_init_d>
	// set temporary vector to j2b
	vector_init_v(&y_tmp, m->j2[1]);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8001eb0:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 8001eb4:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8001eb8:	f107 0320 	add.w	r3, r7, #32
 8001ebc:	eeb0 0a45 	vmov.f32	s0, s10
 8001ec0:	eef0 0a65 	vmov.f32	s1, s11
 8001ec4:	eeb0 1a46 	vmov.f32	s2, s12
 8001ec8:	eef0 1a66 	vmov.f32	s3, s13
 8001ecc:	eeb0 2a47 	vmov.f32	s4, s14
 8001ed0:	eef0 2a67 	vmov.f32	s5, s15
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 ff9e 	bl	8002e16 <vector_init_v>
	// set x axis vector to compute q1
	vector_init_d(&x_axis, 1, 0, 0);
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	ed9f 2b62 	vldr	d2, [pc, #392]	; 8002068 <manipulator_calculate_angles+0x1f0>
 8001ee2:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8002068 <manipulator_calculate_angles+0x1f0>
 8001ee6:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8002070 <manipulator_calculate_angles+0x1f8>
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 ff74 	bl	8002dd8 <vector_init_d>
	// move our tmp vector to origin
	vector_sub(&y_tmp, y_tmp, m->j2[0]);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	ed93 3b18 	vldr	d3, [r3, #96]	; 0x60
 8001ef6:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 8001efa:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8001efe:	ed97 2b08 	vldr	d2, [r7, #32]
 8001f02:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001f06:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001f0a:	f107 0320 	add.w	r3, r7, #32
 8001f0e:	eeb0 0a42 	vmov.f32	s0, s4
 8001f12:	eef0 0a62 	vmov.f32	s1, s5
 8001f16:	eeb0 1a46 	vmov.f32	s2, s12
 8001f1a:	eef0 1a66 	vmov.f32	s3, s13
 8001f1e:	eeb0 2a47 	vmov.f32	s4, s14
 8001f22:	eef0 2a67 	vmov.f32	s5, s15
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 f8f5 	bl	8003116 <vector_sub>
	m->q[0] = vector_angle(x_tmp, x_axis) * 180.0 / M_PI;
 8001f2c:	ed97 3b02 	vldr	d3, [r7, #8]
 8001f30:	ed97 4b04 	vldr	d4, [r7, #16]
 8001f34:	ed97 5b06 	vldr	d5, [r7, #24]
 8001f38:	ed97 2b0e 	vldr	d2, [r7, #56]	; 0x38
 8001f3c:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8001f40:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001f44:	eeb0 0a42 	vmov.f32	s0, s4
 8001f48:	eef0 0a62 	vmov.f32	s1, s5
 8001f4c:	eeb0 1a46 	vmov.f32	s2, s12
 8001f50:	eef0 1a66 	vmov.f32	s3, s13
 8001f54:	eeb0 2a47 	vmov.f32	s4, s14
 8001f58:	eef0 2a67 	vmov.f32	s5, s15
 8001f5c:	f001 f81e 	bl	8002f9c <vector_angle>
 8001f60:	ec51 0b10 	vmov	r0, r1, d0
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	4b45      	ldr	r3, [pc, #276]	; (8002080 <manipulator_calculate_angles+0x208>)
 8001f6a:	f7fe fb3d 	bl	80005e8 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	a340      	add	r3, pc, #256	; (adr r3, 8002078 <manipulator_calculate_angles+0x200>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fc5e 	bl	800083c <__aeabi_ddiv>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	m->q[1] = vector_angle(x_tmp, m->j1[1]) * 180.0 / M_PI;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	ed93 3b12 	vldr	d3, [r3, #72]	; 0x48
 8001f90:	ed93 4b14 	vldr	d4, [r3, #80]	; 0x50
 8001f94:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 8001f98:	ed97 2b0e 	vldr	d2, [r7, #56]	; 0x38
 8001f9c:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8001fa0:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001fa4:	eeb0 0a42 	vmov.f32	s0, s4
 8001fa8:	eef0 0a62 	vmov.f32	s1, s5
 8001fac:	eeb0 1a46 	vmov.f32	s2, s12
 8001fb0:	eef0 1a66 	vmov.f32	s3, s13
 8001fb4:	eeb0 2a47 	vmov.f32	s4, s14
 8001fb8:	eef0 2a67 	vmov.f32	s5, s15
 8001fbc:	f000 ffee 	bl	8002f9c <vector_angle>
 8001fc0:	ec51 0b10 	vmov	r0, r1, d0
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <manipulator_calculate_angles+0x208>)
 8001fca:	f7fe fb0d 	bl	80005e8 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	a328      	add	r3, pc, #160	; (adr r3, 8002078 <manipulator_calculate_angles+0x200>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe fc2e 	bl	800083c <__aeabi_ddiv>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	m->q[2] = m->q[1] + (vector_angle(x_tmp, y_tmp) * 180.0 / M_PI);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8001ff0:	ed97 3b08 	vldr	d3, [r7, #32]
 8001ff4:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 8001ff8:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001ffc:	ed97 2b0e 	vldr	d2, [r7, #56]	; 0x38
 8002000:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8002004:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002008:	eeb0 0a42 	vmov.f32	s0, s4
 800200c:	eef0 0a62 	vmov.f32	s1, s5
 8002010:	eeb0 1a46 	vmov.f32	s2, s12
 8002014:	eef0 1a66 	vmov.f32	s3, s13
 8002018:	eeb0 2a47 	vmov.f32	s4, s14
 800201c:	eef0 2a67 	vmov.f32	s5, s15
 8002020:	f000 ffbc 	bl	8002f9c <vector_angle>
 8002024:	ec51 0b10 	vmov	r0, r1, d0
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <manipulator_calculate_angles+0x208>)
 800202e:	f7fe fadb 	bl	80005e8 <__aeabi_dmul>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	a30f      	add	r3, pc, #60	; (adr r3, 8002078 <manipulator_calculate_angles+0x200>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fbfc 	bl	800083c <__aeabi_ddiv>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4620      	mov	r0, r4
 800204a:	4629      	mov	r1, r5
 800204c:	f7fe f916 	bl	800027c <__adddf3>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	//manipulator_print(*m);
}
 800205a:	bf00      	nop
 800205c:	3750      	adds	r7, #80	; 0x50
 800205e:	46bd      	mov	sp, r7
 8002060:	bdb0      	pop	{r4, r5, r7, pc}
 8002062:	bf00      	nop
 8002064:	f3af 8000 	nop.w
	...
 8002074:	3ff00000 	.word	0x3ff00000
 8002078:	54442d18 	.word	0x54442d18
 800207c:	400921fb 	.word	0x400921fb
 8002080:	40668000 	.word	0x40668000

08002084 <manipulator_update>:

void
manipulator_update(manipulator_t *m) {
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

	servo_set(&m->servo[0], (int)(m->q[0] * 10), 0);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	4b26      	ldr	r3, [pc, #152]	; (8002138 <manipulator_update+0xb4>)
 800209e:	f7fe faa3 	bl	80005e8 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f7fe fd4d 	bl	8000b48 <__aeabi_d2iz>
 80020ae:	4603      	mov	r3, r0
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2200      	movs	r2, #0
 80020b4:	4619      	mov	r1, r3
 80020b6:	4620      	mov	r0, r4
 80020b8:	f000 f898 	bl	80021ec <servo_set>
	servo_set(&m->servo[1], (int)(m->q[1] * 10), 0);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f503 7494 	add.w	r4, r3, #296	; 0x128
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <manipulator_update+0xb4>)
 80020ce:	f7fe fa8b 	bl	80005e8 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fd35 	bl	8000b48 <__aeabi_d2iz>
 80020de:	4603      	mov	r3, r0
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2200      	movs	r2, #0
 80020e4:	4619      	mov	r1, r3
 80020e6:	4620      	mov	r0, r4
 80020e8:	f000 f880 	bl	80021ec <servo_set>
	servo_set(&m->servo[2], (int)((180 - m->q[2]) * 10), 1); // TUTAJ 1 A NIE 0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80020f8:	f04f 0000 	mov.w	r0, #0
 80020fc:	490f      	ldr	r1, [pc, #60]	; (800213c <manipulator_update+0xb8>)
 80020fe:	f7fe f8bb 	bl	8000278 <__aeabi_dsub>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <manipulator_update+0xb4>)
 8002110:	f7fe fa6a 	bl	80005e8 <__aeabi_dmul>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	f7fe fd14 	bl	8000b48 <__aeabi_d2iz>
 8002120:	4603      	mov	r3, r0
 8002122:	b29b      	uxth	r3, r3
 8002124:	2201      	movs	r2, #1
 8002126:	4619      	mov	r1, r3
 8002128:	4620      	mov	r0, r4
 800212a:	f000 f85f 	bl	80021ec <servo_set>
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bd90      	pop	{r4, r7, pc}
 8002136:	bf00      	nop
 8002138:	40240000 	.word	0x40240000
 800213c:	40668000 	.word	0x40668000

08002140 <servo_init>:
		uint8_t tch,
		uint16_t a,
		uint16_t amin,
		uint16_t amax,
		uint16_t pmin,
		uint16_t pmax) {
 8002140:	b084      	sub	sp, #16
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	f107 0014 	add.w	r0, r7, #20
 800214e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	servo->htim = htm;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4618      	mov	r0, r3
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	224c      	movs	r2, #76	; 0x4c
 800215c:	4619      	mov	r1, r3
 800215e:	f004 fff1 	bl	8007144 <memcpy>
	servo->tim_channel = tch;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8002168:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	servo->angle = a;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002172:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	servo->angle_min = amin;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 800217c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	servo->angle_max = amax;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8002186:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	servo->pwm_min = pmin;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002190:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	servo->pwm_max = pmax;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800219a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	//servo_set(servo, a, 0);
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021a8:	b004      	add	sp, #16
 80021aa:	4770      	bx	lr

080021ac <servo_step>:

uint16_t
servo_step(servo_t servo) {
 80021ac:	b084      	sub	sp, #16
 80021ae:	b490      	push	{r4, r7}
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	f107 0408 	add.w	r4, r7, #8
 80021b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return ((1000 * (servo.pwm_max - servo.pwm_min)) / (servo.angle_max - servo.angle_min));
 80021ba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80021be:	461a      	mov	r2, r3
 80021c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021ca:	fb02 f203 	mul.w	r2, r2, r3
 80021ce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80021d2:	4619      	mov	r1, r3
 80021d4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80021d8:	1acb      	subs	r3, r1, r3
 80021da:	fb92 f3f3 	sdiv	r3, r2, r3
 80021de:	b29b      	uxth	r3, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc90      	pop	{r4, r7}
 80021e6:	b004      	add	sp, #16
 80021e8:	4770      	bx	lr
	...

080021ec <servo_set>:

void
servo_set(servo_t* servo, uint16_t angle, uint8_t mode) {
 80021ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ee:	b097      	sub	sp, #92	; 0x5c
 80021f0:	af12      	add	r7, sp, #72	; 0x48
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
 80021f8:	4613      	mov	r3, r2
 80021fa:	707b      	strb	r3, [r7, #1]
	uint16_t val;
	servo->angle = angle;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	if (angle > servo->angle_max) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	429a      	cmp	r2, r3
 800220e:	d904      	bls.n	800221a <servo_set+0x2e>
		angle = servo->angle_max;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002216:	807b      	strh	r3, [r7, #2]
 8002218:	e009      	b.n	800222e <servo_set+0x42>
	} else if (angle < servo->angle_min) {
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002220:	887a      	ldrh	r2, [r7, #2]
 8002222:	429a      	cmp	r2, r3
 8002224:	d203      	bcs.n	800222e <servo_set+0x42>
		angle = servo->angle_min;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800222c:	807b      	strh	r3, [r7, #2]
	}
	if (mode) {
 800222e:	787b      	ldrb	r3, [r7, #1]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <servo_set+0x8a>
		val = servo->pwm_min + ((angle - servo->angle_min) * servo_step(*servo)) / 1000;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f8b3 5054 	ldrh.w	r5, [r3, #84]	; 0x54
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8002242:	1a9e      	subs	r6, r3, r2
 8002244:	687c      	ldr	r4, [r7, #4]
 8002246:	4668      	mov	r0, sp
 8002248:	f104 0310 	add.w	r3, r4, #16
 800224c:	2248      	movs	r2, #72	; 0x48
 800224e:	4619      	mov	r1, r3
 8002250:	f004 ff78 	bl	8007144 <memcpy>
 8002254:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002258:	f7ff ffa8 	bl	80021ac <servo_step>
 800225c:	4603      	mov	r3, r0
 800225e:	fb03 f306 	mul.w	r3, r3, r6
 8002262:	4a32      	ldr	r2, [pc, #200]	; (800232c <servo_set+0x140>)
 8002264:	fb82 1203 	smull	r1, r2, r2, r3
 8002268:	1192      	asrs	r2, r2, #6
 800226a:	17db      	asrs	r3, r3, #31
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	b29b      	uxth	r3, r3
 8002270:	442b      	add	r3, r5
 8002272:	81fb      	strh	r3, [r7, #14]
 8002274:	e01f      	b.n	80022b6 <servo_set+0xca>
	} else {
		val = servo->pwm_max - ((angle - servo->angle_min) * servo_step(*servo)) / 1000;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8b3 5056 	ldrh.w	r5, [r3, #86]	; 0x56
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8002284:	1a9e      	subs	r6, r3, r2
 8002286:	687c      	ldr	r4, [r7, #4]
 8002288:	4668      	mov	r0, sp
 800228a:	f104 0310 	add.w	r3, r4, #16
 800228e:	2248      	movs	r2, #72	; 0x48
 8002290:	4619      	mov	r1, r3
 8002292:	f004 ff57 	bl	8007144 <memcpy>
 8002296:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800229a:	f7ff ff87 	bl	80021ac <servo_step>
 800229e:	4603      	mov	r3, r0
 80022a0:	fb03 f306 	mul.w	r3, r3, r6
 80022a4:	4a21      	ldr	r2, [pc, #132]	; (800232c <servo_set+0x140>)
 80022a6:	fb82 1203 	smull	r1, r2, r2, r3
 80022aa:	1192      	asrs	r2, r2, #6
 80022ac:	17db      	asrs	r3, r3, #31
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	442b      	add	r3, r5
 80022b4:	81fb      	strh	r3, [r7, #14]
	}
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d104      	bne.n	80022ca <servo_set+0xde>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	89fa      	ldrh	r2, [r7, #14]
 80022c6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022c8:	e02b      	b.n	8002322 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d104      	bne.n	80022de <servo_set+0xf2>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	89fb      	ldrh	r3, [r7, #14]
 80022da:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022dc:	e021      	b.n	8002322 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d104      	bne.n	80022f2 <servo_set+0x106>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	89fb      	ldrh	r3, [r7, #14]
 80022ee:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80022f0:	e017      	b.n	8002322 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d104      	bne.n	8002306 <servo_set+0x11a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	89fb      	ldrh	r3, [r7, #14]
 8002302:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002304:	e00d      	b.n	8002322 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800230c:	2b10      	cmp	r3, #16
 800230e:	d104      	bne.n	800231a <servo_set+0x12e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	89fb      	ldrh	r3, [r7, #14]
 8002316:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002318:	e003      	b.n	8002322 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	89fb      	ldrh	r3, [r7, #14]
 8002320:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800232a:	bf00      	nop
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_MspInit+0x44>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <HAL_MspInit+0x44>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6193      	str	r3, [r2, #24]
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_MspInit+0x44>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_MspInit+0x44>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <HAL_MspInit+0x44>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	61d3      	str	r3, [r2, #28]
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_MspInit+0x44>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002366:	2007      	movs	r0, #7
 8002368:	f001 f908 	bl	800357c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000

08002378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <MemManage_Handler+0x4>

08002392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <BusFault_Handler+0x4>

08002398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <UsageFault_Handler+0x4>

0800239e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023cc:	f000 ffc2 	bl	8003354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80023d8:	2010      	movs	r0, #16
 80023da:	f001 fb11 	bl	8003a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <USART2_IRQHandler+0x10>)
 80023ea:	f003 ff87 	bl	80062fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200002e0 	.word	0x200002e0

080023f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002400:	f001 fafe 	bl	8003a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}

08002408 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <TIM6_DAC1_IRQHandler+0x10>)
 800240e:	f002 ff1b 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000454 	.word	0x20000454

0800241c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e00a      	b.n	8002444 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800242e:	f3af 8000 	nop.w
 8002432:	4601      	mov	r1, r0
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	60ba      	str	r2, [r7, #8]
 800243a:	b2ca      	uxtb	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3301      	adds	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	dbf0      	blt.n	800242e <_read+0x12>
	}

return len;
 800244c:	687b      	ldr	r3, [r7, #4]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
	return -1;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800247e:	605a      	str	r2, [r3, #4]
	return 0;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <_isatty>:

int _isatty(int file)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
	return 1;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
	return 0;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <_sbrk+0x5c>)
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <_sbrk+0x60>)
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <_sbrk+0x64>)
 80024de:	4a12      	ldr	r2, [pc, #72]	; (8002528 <_sbrk+0x68>)
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <_sbrk+0x64>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d207      	bcs.n	8002500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f0:	f004 fdfe 	bl	80070f0 <__errno>
 80024f4:	4603      	mov	r3, r0
 80024f6:	220c      	movs	r2, #12
 80024f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024fe:	e009      	b.n	8002514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <_sbrk+0x64>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	4a05      	ldr	r2, [pc, #20]	; (8002524 <_sbrk+0x64>)
 8002510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20003000 	.word	0x20003000
 8002520:	00000400 	.word	0x00000400
 8002524:	200002d0 	.word	0x200002d0
 8002528:	20000550 	.word	0x20000550

0800252c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <SystemInit+0x20>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <SystemInit+0x20>)
 8002538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800253c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	2224      	movs	r2, #36	; 0x24
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f004 fdfe 	bl	8007160 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002564:	463b      	mov	r3, r7
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800256e:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <MX_TIM2_Init+0xa4>)
 8002570:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002574:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <MX_TIM2_Init+0xa4>)
 8002578:	2200      	movs	r2, #0
 800257a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <MX_TIM2_Init+0xa4>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <MX_TIM2_Init+0xa4>)
 8002584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002588:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <MX_TIM2_Init+0xa4>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <MX_TIM2_Init+0xa4>)
 8002592:	2200      	movs	r2, #0
 8002594:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002596:	2301      	movs	r3, #1
 8002598:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800259e:	2301      	movs	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80025a6:	230f      	movs	r3, #15
 80025a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025ae:	2301      	movs	r3, #1
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80025b6:	230f      	movs	r3, #15
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	4619      	mov	r1, r3
 80025c0:	480c      	ldr	r0, [pc, #48]	; (80025f4 <MX_TIM2_Init+0xa4>)
 80025c2:	f002 fd0d 	bl	8004fe0 <HAL_TIM_Encoder_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80025cc:	f7fe ff06 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025d8:	463b      	mov	r3, r7
 80025da:	4619      	mov	r1, r3
 80025dc:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_TIM2_Init+0xa4>)
 80025de:	f003 fbcf 	bl	8005d80 <HAL_TIMEx_MasterConfigSynchronization>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80025e8:	f7fe fef8 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025ec:	bf00      	nop
 80025ee:	3730      	adds	r7, #48	; 0x30
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200004a0 	.word	0x200004a0

080025f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fe:	f107 031c 	add.w	r3, r7, #28
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800260a:	463b      	mov	r3, r7
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
 8002618:	615a      	str	r2, [r3, #20]
 800261a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <MX_TIM3_Init+0xac>)
 800261e:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <MX_TIM3_Init+0xb0>)
 8002620:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM3_PWM_PRESCALER;
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <MX_TIM3_Init+0xac>)
 8002624:	2247      	movs	r2, #71	; 0x47
 8002626:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <MX_TIM3_Init+0xac>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_PWM_PERIOD;
 800262e:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <MX_TIM3_Init+0xac>)
 8002630:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002634:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <MX_TIM3_Init+0xac>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <MX_TIM3_Init+0xac>)
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002642:	4818      	ldr	r0, [pc, #96]	; (80026a4 <MX_TIM3_Init+0xac>)
 8002644:	f002 fb89 	bl	8004d5a <HAL_TIM_PWM_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800264e:	f7fe fec5 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800265a:	f107 031c 	add.w	r3, r7, #28
 800265e:	4619      	mov	r1, r3
 8002660:	4810      	ldr	r0, [pc, #64]	; (80026a4 <MX_TIM3_Init+0xac>)
 8002662:	f003 fb8d 	bl	8005d80 <HAL_TIMEx_MasterConfigSynchronization>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800266c:	f7fe feb6 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002670:	2360      	movs	r3, #96	; 0x60
 8002672:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002680:	463b      	mov	r3, r7
 8002682:	2200      	movs	r2, #0
 8002684:	4619      	mov	r1, r3
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <MX_TIM3_Init+0xac>)
 8002688:	f002 fefe 	bl	8005488 <HAL_TIM_PWM_ConfigChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002692:	f7fe fea3 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002696:	4803      	ldr	r0, [pc, #12]	; (80026a4 <MX_TIM3_Init+0xac>)
 8002698:	f000 fa7c 	bl	8002b94 <HAL_TIM_MspPostInit>

}
 800269c:	bf00      	nop
 800269e:	3728      	adds	r7, #40	; 0x28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000408 	.word	0x20000408
 80026a8:	40000400 	.word	0x40000400

080026ac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <MX_TIM6_Init+0x68>)
 80026be:	4a16      	ldr	r2, [pc, #88]	; (8002718 <MX_TIM6_Init+0x6c>)
 80026c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PRINT_PRESCALER;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <MX_TIM6_Init+0x68>)
 80026c4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80026c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_TIM6_Init+0x68>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_PRINT_PERIOD;
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <MX_TIM6_Init+0x68>)
 80026d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80026d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <MX_TIM6_Init+0x68>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026de:	480d      	ldr	r0, [pc, #52]	; (8002714 <MX_TIM6_Init+0x68>)
 80026e0:	f002 fae4 	bl	8004cac <HAL_TIM_Base_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80026ea:	f7fe fe77 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	4806      	ldr	r0, [pc, #24]	; (8002714 <MX_TIM6_Init+0x68>)
 80026fc:	f003 fb40 	bl	8005d80 <HAL_TIMEx_MasterConfigSynchronization>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002706:	f7fe fe69 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000454 	.word	0x20000454
 8002718:	40001000 	.word	0x40001000

0800271c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b096      	sub	sp, #88	; 0x58
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002722:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800272e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	611a      	str	r2, [r3, #16]
 800273e:	615a      	str	r2, [r3, #20]
 8002740:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	222c      	movs	r2, #44	; 0x2c
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f004 fd09 	bl	8007160 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800274e:	4b34      	ldr	r3, [pc, #208]	; (8002820 <MX_TIM15_Init+0x104>)
 8002750:	4a34      	ldr	r2, [pc, #208]	; (8002824 <MX_TIM15_Init+0x108>)
 8002752:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = TIM15_PWM_PRESCALER;
 8002754:	4b32      	ldr	r3, [pc, #200]	; (8002820 <MX_TIM15_Init+0x104>)
 8002756:	2247      	movs	r2, #71	; 0x47
 8002758:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275a:	4b31      	ldr	r3, [pc, #196]	; (8002820 <MX_TIM15_Init+0x104>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = TIM15_PWM_PERIOD;
 8002760:	4b2f      	ldr	r3, [pc, #188]	; (8002820 <MX_TIM15_Init+0x104>)
 8002762:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002766:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <MX_TIM15_Init+0x104>)
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800276e:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <MX_TIM15_Init+0x104>)
 8002770:	2200      	movs	r2, #0
 8002772:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002774:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <MX_TIM15_Init+0x104>)
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800277a:	4829      	ldr	r0, [pc, #164]	; (8002820 <MX_TIM15_Init+0x104>)
 800277c:	f002 faed 	bl	8004d5a <HAL_TIM_PWM_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002786:	f7fe fe29 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002792:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002796:	4619      	mov	r1, r3
 8002798:	4821      	ldr	r0, [pc, #132]	; (8002820 <MX_TIM15_Init+0x104>)
 800279a:	f003 faf1 	bl	8005d80 <HAL_TIMEx_MasterConfigSynchronization>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80027a4:	f7fe fe1a 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027a8:	2360      	movs	r3, #96	; 0x60
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b0:	2300      	movs	r3, #0
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027b4:	2300      	movs	r3, #0
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027bc:	2300      	movs	r3, #0
 80027be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027c0:	2300      	movs	r3, #0
 80027c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027c8:	2200      	movs	r2, #0
 80027ca:	4619      	mov	r1, r3
 80027cc:	4814      	ldr	r0, [pc, #80]	; (8002820 <MX_TIM15_Init+0x104>)
 80027ce:	f002 fe5b 	bl	8005488 <HAL_TIM_PWM_ConfigChannel>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80027d8:	f7fe fe00 	bl	80013dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4807      	ldr	r0, [pc, #28]	; (8002820 <MX_TIM15_Init+0x104>)
 8002804:	f003 fb2a 	bl	8005e5c <HAL_TIMEx_ConfigBreakDeadTime>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800280e:	f7fe fde5 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002812:	4803      	ldr	r0, [pc, #12]	; (8002820 <MX_TIM15_Init+0x104>)
 8002814:	f000 f9be 	bl	8002b94 <HAL_TIM_MspPostInit>

}
 8002818:	bf00      	nop
 800281a:	3758      	adds	r7, #88	; 0x58
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000370 	.word	0x20000370
 8002824:	40014000 	.word	0x40014000

08002828 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b092      	sub	sp, #72	; 0x48
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800282e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	611a      	str	r2, [r3, #16]
 800283e:	615a      	str	r2, [r3, #20]
 8002840:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002842:	463b      	mov	r3, r7
 8002844:	222c      	movs	r2, #44	; 0x2c
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f004 fc89 	bl	8007160 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800284e:	4b31      	ldr	r3, [pc, #196]	; (8002914 <MX_TIM16_Init+0xec>)
 8002850:	4a31      	ldr	r2, [pc, #196]	; (8002918 <MX_TIM16_Init+0xf0>)
 8002852:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = TIM16_PWM_PRESCALER;
 8002854:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <MX_TIM16_Init+0xec>)
 8002856:	2247      	movs	r2, #71	; 0x47
 8002858:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285a:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <MX_TIM16_Init+0xec>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_PWM_PERIOD;
 8002860:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <MX_TIM16_Init+0xec>)
 8002862:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002866:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002868:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <MX_TIM16_Init+0xec>)
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800286e:	4b29      	ldr	r3, [pc, #164]	; (8002914 <MX_TIM16_Init+0xec>)
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <MX_TIM16_Init+0xec>)
 8002876:	2280      	movs	r2, #128	; 0x80
 8002878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800287a:	4826      	ldr	r0, [pc, #152]	; (8002914 <MX_TIM16_Init+0xec>)
 800287c:	f002 fa16 	bl	8004cac <HAL_TIM_Base_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002886:	f7fe fda9 	bl	80013dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800288a:	4822      	ldr	r0, [pc, #136]	; (8002914 <MX_TIM16_Init+0xec>)
 800288c:	f002 fa65 	bl	8004d5a <HAL_TIM_PWM_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002896:	f7fe fda1 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800289a:	2360      	movs	r3, #96	; 0x60
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a2:	2300      	movs	r3, #0
 80028a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028a6:	2300      	movs	r3, #0
 80028a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ba:	2200      	movs	r2, #0
 80028bc:	4619      	mov	r1, r3
 80028be:	4815      	ldr	r0, [pc, #84]	; (8002914 <MX_TIM16_Init+0xec>)
 80028c0:	f002 fde2 	bl	8005488 <HAL_TIM_PWM_ConfigChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80028ca:	f7fe fd87 	bl	80013dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80028f0:	463b      	mov	r3, r7
 80028f2:	4619      	mov	r1, r3
 80028f4:	4807      	ldr	r0, [pc, #28]	; (8002914 <MX_TIM16_Init+0xec>)
 80028f6:	f003 fab1 	bl	8005e5c <HAL_TIMEx_ConfigBreakDeadTime>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8002900:	f7fe fd6c 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002904:	4803      	ldr	r0, [pc, #12]	; (8002914 <MX_TIM16_Init+0xec>)
 8002906:	f000 f945 	bl	8002b94 <HAL_TIM_MspPostInit>

}
 800290a:	bf00      	nop
 800290c:	3748      	adds	r7, #72	; 0x48
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200004ec 	.word	0x200004ec
 8002918:	40014400 	.word	0x40014400

0800291c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b092      	sub	sp, #72	; 0x48
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
 8002930:	611a      	str	r2, [r3, #16]
 8002932:	615a      	str	r2, [r3, #20]
 8002934:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002936:	463b      	mov	r3, r7
 8002938:	222c      	movs	r2, #44	; 0x2c
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f004 fc0f 	bl	8007160 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <MX_TIM17_Init+0xec>)
 8002944:	4a31      	ldr	r2, [pc, #196]	; (8002a0c <MX_TIM17_Init+0xf0>)
 8002946:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = TIM17_PWM_PRESCALER;
 8002948:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <MX_TIM17_Init+0xec>)
 800294a:	2247      	movs	r2, #71	; 0x47
 800294c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294e:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <MX_TIM17_Init+0xec>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = TIM17_PWM_PERIOD;
 8002954:	4b2c      	ldr	r3, [pc, #176]	; (8002a08 <MX_TIM17_Init+0xec>)
 8002956:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800295a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295c:	4b2a      	ldr	r3, [pc, #168]	; (8002a08 <MX_TIM17_Init+0xec>)
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002962:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <MX_TIM17_Init+0xec>)
 8002964:	2200      	movs	r2, #0
 8002966:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002968:	4b27      	ldr	r3, [pc, #156]	; (8002a08 <MX_TIM17_Init+0xec>)
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800296e:	4826      	ldr	r0, [pc, #152]	; (8002a08 <MX_TIM17_Init+0xec>)
 8002970:	f002 f99c 	bl	8004cac <HAL_TIM_Base_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800297a:	f7fe fd2f 	bl	80013dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800297e:	4822      	ldr	r0, [pc, #136]	; (8002a08 <MX_TIM17_Init+0xec>)
 8002980:	f002 f9eb 	bl	8004d5a <HAL_TIM_PWM_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800298a:	f7fe fd27 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800298e:	2360      	movs	r3, #96	; 0x60
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002996:	2300      	movs	r3, #0
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800299a:	2300      	movs	r3, #0
 800299c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ae:	2200      	movs	r2, #0
 80029b0:	4619      	mov	r1, r3
 80029b2:	4815      	ldr	r0, [pc, #84]	; (8002a08 <MX_TIM17_Init+0xec>)
 80029b4:	f002 fd68 	bl	8005488 <HAL_TIM_PWM_ConfigChannel>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80029be:	f7fe fd0d 	bl	80013dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80029e4:	463b      	mov	r3, r7
 80029e6:	4619      	mov	r1, r3
 80029e8:	4807      	ldr	r0, [pc, #28]	; (8002a08 <MX_TIM17_Init+0xec>)
 80029ea:	f003 fa37 	bl	8005e5c <HAL_TIMEx_ConfigBreakDeadTime>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80029f4:	f7fe fcf2 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80029f8:	4803      	ldr	r0, [pc, #12]	; (8002a08 <MX_TIM17_Init+0xec>)
 80029fa:	f000 f8cb 	bl	8002b94 <HAL_TIM_MspPostInit>

}
 80029fe:	bf00      	nop
 8002a00:	3748      	adds	r7, #72	; 0x48
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200003bc 	.word	0x200003bc
 8002a0c:	40014800 	.word	0x40014800

08002a10 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a30:	d128      	bne.n	8002a84 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	61d3      	str	r3, [r2, #28]
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	4a0f      	ldr	r2, [pc, #60]	; (8002a8c <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a54:	6153      	str	r3, [r2, #20]
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 8002a62:	2303      	movs	r3, #3
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a72:	2301      	movs	r3, #1
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a80:	f000 fe34 	bl	80036ec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a84:	bf00      	nop
 8002a86:	3728      	adds	r7, #40	; 0x28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000

08002a90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a13      	ldr	r2, [pc, #76]	; (8002aec <HAL_TIM_PWM_MspInit+0x5c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10c      	bne.n	8002abc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aa2:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_TIM_PWM_MspInit+0x60>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <HAL_TIM_PWM_MspInit+0x60>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	61d3      	str	r3, [r2, #28]
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_TIM_PWM_MspInit+0x60>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002aba:	e010      	b.n	8002ade <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM15)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <HAL_TIM_PWM_MspInit+0x64>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10b      	bne.n	8002ade <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_TIM_PWM_MspInit+0x60>)
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <HAL_TIM_PWM_MspInit+0x60>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	6193      	str	r3, [r2, #24]
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_TIM_PWM_MspInit+0x60>)
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40000400 	.word	0x40000400
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40014000 	.word	0x40014000

08002af8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <HAL_TIM_Base_MspInit+0x8c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d114      	bne.n	8002b34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <HAL_TIM_Base_MspInit+0x90>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <HAL_TIM_Base_MspInit+0x90>)
 8002b10:	f043 0310 	orr.w	r3, r3, #16
 8002b14:	61d3      	str	r3, [r2, #28]
 8002b16:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_TIM_Base_MspInit+0x90>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	2036      	movs	r0, #54	; 0x36
 8002b28:	f000 fd33 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002b2c:	2036      	movs	r0, #54	; 0x36
 8002b2e:	f000 fd4c 	bl	80035ca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002b32:	e022      	b.n	8002b7a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM16)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <HAL_TIM_Base_MspInit+0x94>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d10c      	bne.n	8002b58 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_TIM_Base_MspInit+0x90>)
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <HAL_TIM_Base_MspInit+0x90>)
 8002b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b48:	6193      	str	r3, [r2, #24]
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <HAL_TIM_Base_MspInit+0x90>)
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]
}
 8002b56:	e010      	b.n	8002b7a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM17)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <HAL_TIM_Base_MspInit+0x98>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10b      	bne.n	8002b7a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_TIM_Base_MspInit+0x90>)
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	4a08      	ldr	r2, [pc, #32]	; (8002b88 <HAL_TIM_Base_MspInit+0x90>)
 8002b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b6c:	6193      	str	r3, [r2, #24]
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_TIM_Base_MspInit+0x90>)
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40001000 	.word	0x40001000
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40014400 	.word	0x40014400
 8002b90:	40014800 	.word	0x40014800

08002b94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08c      	sub	sp, #48	; 0x30
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	f107 031c 	add.w	r3, r7, #28
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a45      	ldr	r2, [pc, #276]	; (8002cc8 <HAL_TIM_MspPostInit+0x134>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d11c      	bne.n	8002bf0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb6:	4b45      	ldr	r3, [pc, #276]	; (8002ccc <HAL_TIM_MspPostInit+0x138>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	4a44      	ldr	r2, [pc, #272]	; (8002ccc <HAL_TIM_MspPostInit+0x138>)
 8002bbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bc0:	6153      	str	r3, [r2, #20]
 8002bc2:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <HAL_TIM_MspPostInit+0x138>)
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 8002bce:	2340      	movs	r3, #64	; 0x40
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bde:	2302      	movs	r3, #2
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	4839      	ldr	r0, [pc, #228]	; (8002cd0 <HAL_TIM_MspPostInit+0x13c>)
 8002bea:	f000 fd7f 	bl	80036ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002bee:	e067      	b.n	8002cc0 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM15)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a37      	ldr	r2, [pc, #220]	; (8002cd4 <HAL_TIM_MspPostInit+0x140>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d11d      	bne.n	8002c36 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfa:	4b34      	ldr	r3, [pc, #208]	; (8002ccc <HAL_TIM_MspPostInit+0x138>)
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	4a33      	ldr	r2, [pc, #204]	; (8002ccc <HAL_TIM_MspPostInit+0x138>)
 8002c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c04:	6153      	str	r3, [r2, #20]
 8002c06:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <HAL_TIM_MspPostInit+0x138>)
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8002c12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002c24:	2301      	movs	r3, #1
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	482a      	ldr	r0, [pc, #168]	; (8002cd8 <HAL_TIM_MspPostInit+0x144>)
 8002c30:	f000 fd5c 	bl	80036ec <HAL_GPIO_Init>
}
 8002c34:	e044      	b.n	8002cc0 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM16)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a28      	ldr	r2, [pc, #160]	; (8002cdc <HAL_TIM_MspPostInit+0x148>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d11d      	bne.n	8002c7c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c40:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <HAL_TIM_MspPostInit+0x138>)
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	4a21      	ldr	r2, [pc, #132]	; (8002ccc <HAL_TIM_MspPostInit+0x138>)
 8002c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4a:	6153      	str	r3, [r2, #20]
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <HAL_TIM_MspPostInit+0x138>)
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO3_PWM_Pin;
 8002c58:	2340      	movs	r3, #64	; 0x40
 8002c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	4619      	mov	r1, r3
 8002c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c76:	f000 fd39 	bl	80036ec <HAL_GPIO_Init>
}
 8002c7a:	e021      	b.n	8002cc0 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM17)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <HAL_TIM_MspPostInit+0x14c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d11c      	bne.n	8002cc0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_TIM_MspPostInit+0x138>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <HAL_TIM_MspPostInit+0x138>)
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	6153      	str	r3, [r2, #20]
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <HAL_TIM_MspPostInit+0x138>)
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO4_PWM_Pin;
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO4_PWM_GPIO_Port, &GPIO_InitStruct);
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbc:	f000 fd16 	bl	80036ec <HAL_GPIO_Init>
}
 8002cc0:	bf00      	nop
 8002cc2:	3730      	adds	r7, #48	; 0x30
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	48000800 	.word	0x48000800
 8002cd4:	40014000 	.word	0x40014000
 8002cd8:	48000400 	.word	0x48000400
 8002cdc:	40014400 	.word	0x40014400
 8002ce0:	40014800 	.word	0x40014800

08002ce4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <MX_USART2_UART_Init+0x58>)
 8002cea:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <MX_USART2_UART_Init+0x5c>)
 8002cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <MX_USART2_UART_Init+0x58>)
 8002cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <MX_USART2_UART_Init+0x58>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <MX_USART2_UART_Init+0x58>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d02:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <MX_USART2_UART_Init+0x58>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <MX_USART2_UART_Init+0x58>)
 8002d0a:	220c      	movs	r2, #12
 8002d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <MX_USART2_UART_Init+0x58>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <MX_USART2_UART_Init+0x58>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <MX_USART2_UART_Init+0x58>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <MX_USART2_UART_Init+0x58>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d26:	4805      	ldr	r0, [pc, #20]	; (8002d3c <MX_USART2_UART_Init+0x58>)
 8002d28:	f003 f92e 	bl	8005f88 <HAL_UART_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002d32:	f7fe fb53 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200002e0 	.word	0x200002e0
 8002d40:	40004400 	.word	0x40004400

08002d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_UART_MspInit+0x8c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d130      	bne.n	8002dc8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d66:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_UART_MspInit+0x90>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a1a      	ldr	r2, [pc, #104]	; (8002dd4 <HAL_UART_MspInit+0x90>)
 8002d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d70:	61d3      	str	r3, [r2, #28]
 8002d72:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <HAL_UART_MspInit+0x90>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_UART_MspInit+0x90>)
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <HAL_UART_MspInit+0x90>)
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d88:	6153      	str	r3, [r2, #20]
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_UART_MspInit+0x90>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d96:	230c      	movs	r3, #12
 8002d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da2:	2303      	movs	r3, #3
 8002da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002da6:	2307      	movs	r3, #7
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002daa:	f107 0314 	add.w	r3, r7, #20
 8002dae:	4619      	mov	r1, r3
 8002db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db4:	f000 fc9a 	bl	80036ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2100      	movs	r1, #0
 8002dbc:	2026      	movs	r0, #38	; 0x26
 8002dbe:	f000 fbe8 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002dc2:	2026      	movs	r0, #38	; 0x26
 8002dc4:	f000 fc01 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3728      	adds	r7, #40	; 0x28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40004400 	.word	0x40004400
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <vector_init_d>:


#include "vector.h"

void
vector_init_d(vector_t *v, double x, double y, double z) {
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	61f8      	str	r0, [r7, #28]
 8002de0:	ed87 0b04 	vstr	d0, [r7, #16]
 8002de4:	ed87 1b02 	vstr	d1, [r7, #8]
 8002de8:	ed87 2b00 	vstr	d2, [r7]
	v->x = x;
 8002dec:	69f9      	ldr	r1, [r7, #28]
 8002dee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002df2:	e9c1 2300 	strd	r2, r3, [r1]
	v->y = y;
 8002df6:	69f9      	ldr	r1, [r7, #28]
 8002df8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dfc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	v->z = z;
 8002e00:	69f9      	ldr	r1, [r7, #28]
 8002e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e06:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002e0a:	bf00      	nop
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <vector_init_v>:

void
vector_init_v(vector_t *v, vector_t src) {
 8002e16:	b480      	push	{r7}
 8002e18:	b089      	sub	sp, #36	; 0x24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	61f8      	str	r0, [r7, #28]
 8002e1e:	eeb0 5a40 	vmov.f32	s10, s0
 8002e22:	eef0 5a60 	vmov.f32	s11, s1
 8002e26:	eeb0 6a41 	vmov.f32	s12, s2
 8002e2a:	eef0 6a61 	vmov.f32	s13, s3
 8002e2e:	eeb0 7a42 	vmov.f32	s14, s4
 8002e32:	eef0 7a62 	vmov.f32	s15, s5
 8002e36:	ed87 5b00 	vstr	d5, [r7]
 8002e3a:	ed87 6b02 	vstr	d6, [r7, #8]
 8002e3e:	ed87 7b04 	vstr	d7, [r7, #16]
	v->x = src.x;
 8002e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e46:	69f9      	ldr	r1, [r7, #28]
 8002e48:	e9c1 2300 	strd	r2, r3, [r1]
	v->y = src.y;
 8002e4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e50:	69f9      	ldr	r1, [r7, #28]
 8002e52:	e9c1 2302 	strd	r2, r3, [r1, #8]
	v->z = src.z;
 8002e56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e5a:	69f9      	ldr	r1, [r7, #28]
 8002e5c:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002e60:	bf00      	nop
 8002e62:	3724      	adds	r7, #36	; 0x24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <vector_mag>:
vector_print(vector_t v) {
	printf("[%d, %d, %d]", (int)v.x, (int)v.y, (int)v.z);
}

double
vector_mag(vector_t v) {
 8002e6c:	b5b0      	push	{r4, r5, r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	eeb0 5a40 	vmov.f32	s10, s0
 8002e76:	eef0 5a60 	vmov.f32	s11, s1
 8002e7a:	eeb0 6a41 	vmov.f32	s12, s2
 8002e7e:	eef0 6a61 	vmov.f32	s13, s3
 8002e82:	eeb0 7a42 	vmov.f32	s14, s4
 8002e86:	eef0 7a62 	vmov.f32	s15, s5
 8002e8a:	ed87 5b00 	vstr	d5, [r7]
 8002e8e:	ed87 6b02 	vstr	d6, [r7, #8]
 8002e92:	ed87 7b04 	vstr	d7, [r7, #16]
	return sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
 8002e96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e9e:	f7fd fba3 	bl	80005e8 <__aeabi_dmul>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4614      	mov	r4, r2
 8002ea8:	461d      	mov	r5, r3
 8002eaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb2:	f7fd fb99 	bl	80005e8 <__aeabi_dmul>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4620      	mov	r0, r4
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	f7fd f9dd 	bl	800027c <__adddf3>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4614      	mov	r4, r2
 8002ec8:	461d      	mov	r5, r3
 8002eca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ece:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ed2:	f7fd fb89 	bl	80005e8 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4620      	mov	r0, r4
 8002edc:	4629      	mov	r1, r5
 8002ede:	f7fd f9cd 	bl	800027c <__adddf3>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	ec43 2b17 	vmov	d7, r2, r3
 8002eea:	eeb0 0a47 	vmov.f32	s0, s14
 8002eee:	eef0 0a67 	vmov.f32	s1, s15
 8002ef2:	f005 f9e7 	bl	80082c4 <sqrt>
 8002ef6:	eeb0 7a40 	vmov.f32	s14, s0
 8002efa:	eef0 7a60 	vmov.f32	s15, s1
}
 8002efe:	eeb0 0a47 	vmov.f32	s0, s14
 8002f02:	eef0 0a67 	vmov.f32	s1, s15
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bdb0      	pop	{r4, r5, r7, pc}

08002f0c <vector_dot>:

double
vector_dot(vector_t vec1, vector_t vec2) {
 8002f0c:	b5b0      	push	{r4, r5, r7, lr}
 8002f0e:	b08c      	sub	sp, #48	; 0x30
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	eeb0 6a44 	vmov.f32	s12, s8
 8002f16:	eef0 6a64 	vmov.f32	s13, s9
 8002f1a:	eeb0 7a45 	vmov.f32	s14, s10
 8002f1e:	eef0 7a65 	vmov.f32	s15, s11
 8002f22:	ed87 0b06 	vstr	d0, [r7, #24]
 8002f26:	ed87 1b08 	vstr	d1, [r7, #32]
 8002f2a:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8002f2e:	ed87 3b00 	vstr	d3, [r7]
 8002f32:	ed87 6b02 	vstr	d6, [r7, #8]
 8002f36:	ed87 7b04 	vstr	d7, [r7, #16]
	return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z;
 8002f3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f42:	f7fd fb51 	bl	80005e8 <__aeabi_dmul>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	461d      	mov	r5, r3
 8002f4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f56:	f7fd fb47 	bl	80005e8 <__aeabi_dmul>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4620      	mov	r0, r4
 8002f60:	4629      	mov	r1, r5
 8002f62:	f7fd f98b 	bl	800027c <__adddf3>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4614      	mov	r4, r2
 8002f6c:	461d      	mov	r5, r3
 8002f6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f76:	f7fd fb37 	bl	80005e8 <__aeabi_dmul>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4620      	mov	r0, r4
 8002f80:	4629      	mov	r1, r5
 8002f82:	f7fd f97b 	bl	800027c <__adddf3>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f92:	eef0 0a67 	vmov.f32	s1, s15
 8002f96:	3730      	adds	r7, #48	; 0x30
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bdb0      	pop	{r4, r5, r7, pc}

08002f9c <vector_angle>:

double
vector_angle(vector_t vec1, vector_t vec2) {
 8002f9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fa0:	b08c      	sub	sp, #48	; 0x30
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	eeb0 6a44 	vmov.f32	s12, s8
 8002fa8:	eef0 6a64 	vmov.f32	s13, s9
 8002fac:	eeb0 7a45 	vmov.f32	s14, s10
 8002fb0:	eef0 7a65 	vmov.f32	s15, s11
 8002fb4:	ed87 0b06 	vstr	d0, [r7, #24]
 8002fb8:	ed87 1b08 	vstr	d1, [r7, #32]
 8002fbc:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8002fc0:	ed87 3b00 	vstr	d3, [r7]
 8002fc4:	ed87 6b02 	vstr	d6, [r7, #8]
 8002fc8:	ed87 7b04 	vstr	d7, [r7, #16]
	return acos((vector_dot(vec1, vec2)) /
 8002fcc:	ed97 3b00 	vldr	d3, [r7]
 8002fd0:	ed97 4b02 	vldr	d4, [r7, #8]
 8002fd4:	ed97 5b04 	vldr	d5, [r7, #16]
 8002fd8:	ed97 2b06 	vldr	d2, [r7, #24]
 8002fdc:	ed97 6b08 	vldr	d6, [r7, #32]
 8002fe0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002fe4:	eeb0 0a42 	vmov.f32	s0, s4
 8002fe8:	eef0 0a62 	vmov.f32	s1, s5
 8002fec:	eeb0 1a46 	vmov.f32	s2, s12
 8002ff0:	eef0 1a66 	vmov.f32	s3, s13
 8002ff4:	eeb0 2a47 	vmov.f32	s4, s14
 8002ff8:	eef0 2a67 	vmov.f32	s5, s15
 8002ffc:	f7ff ff86 	bl	8002f0c <vector_dot>
 8003000:	ec55 4b10 	vmov	r4, r5, d0
			(vector_mag(vec1) * vector_mag(vec2)));
 8003004:	ed97 5b06 	vldr	d5, [r7, #24]
 8003008:	ed97 6b08 	vldr	d6, [r7, #32]
 800300c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003010:	eeb0 0a45 	vmov.f32	s0, s10
 8003014:	eef0 0a65 	vmov.f32	s1, s11
 8003018:	eeb0 1a46 	vmov.f32	s2, s12
 800301c:	eef0 1a66 	vmov.f32	s3, s13
 8003020:	eeb0 2a47 	vmov.f32	s4, s14
 8003024:	eef0 2a67 	vmov.f32	s5, s15
 8003028:	f7ff ff20 	bl	8002e6c <vector_mag>
 800302c:	ec59 8b10 	vmov	r8, r9, d0
 8003030:	ed97 5b00 	vldr	d5, [r7]
 8003034:	ed97 6b02 	vldr	d6, [r7, #8]
 8003038:	ed97 7b04 	vldr	d7, [r7, #16]
 800303c:	eeb0 0a45 	vmov.f32	s0, s10
 8003040:	eef0 0a65 	vmov.f32	s1, s11
 8003044:	eeb0 1a46 	vmov.f32	s2, s12
 8003048:	eef0 1a66 	vmov.f32	s3, s13
 800304c:	eeb0 2a47 	vmov.f32	s4, s14
 8003050:	eef0 2a67 	vmov.f32	s5, s15
 8003054:	f7ff ff0a 	bl	8002e6c <vector_mag>
 8003058:	ec53 2b10 	vmov	r2, r3, d0
 800305c:	4640      	mov	r0, r8
 800305e:	4649      	mov	r1, r9
 8003060:	f7fd fac2 	bl	80005e8 <__aeabi_dmul>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
	return acos((vector_dot(vec1, vec2)) /
 8003068:	4620      	mov	r0, r4
 800306a:	4629      	mov	r1, r5
 800306c:	f7fd fbe6 	bl	800083c <__aeabi_ddiv>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	ec43 2b17 	vmov	d7, r2, r3
 8003078:	eeb0 0a47 	vmov.f32	s0, s14
 800307c:	eef0 0a67 	vmov.f32	s1, s15
 8003080:	f005 f8e6 	bl	8008250 <acos>
 8003084:	eeb0 7a40 	vmov.f32	s14, s0
 8003088:	eef0 7a60 	vmov.f32	s15, s1
}
 800308c:	eeb0 0a47 	vmov.f32	s0, s14
 8003090:	eef0 0a67 	vmov.f32	s1, s15
 8003094:	3730      	adds	r7, #48	; 0x30
 8003096:	46bd      	mov	sp, r7
 8003098:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800309c <vector_add>:
void
vector_add(vector_t *v, vector_t vec1, vector_t vec2) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b08e      	sub	sp, #56	; 0x38
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6378      	str	r0, [r7, #52]	; 0x34
 80030a4:	eeb0 6a44 	vmov.f32	s12, s8
 80030a8:	eef0 6a64 	vmov.f32	s13, s9
 80030ac:	eeb0 7a45 	vmov.f32	s14, s10
 80030b0:	eef0 7a65 	vmov.f32	s15, s11
 80030b4:	ed87 0b06 	vstr	d0, [r7, #24]
 80030b8:	ed87 1b08 	vstr	d1, [r7, #32]
 80030bc:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 80030c0:	ed87 3b00 	vstr	d3, [r7]
 80030c4:	ed87 6b02 	vstr	d6, [r7, #8]
 80030c8:	ed87 7b04 	vstr	d7, [r7, #16]
	v->x = vec1.x + vec2.x;
 80030cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030d4:	f7fd f8d2 	bl	800027c <__adddf3>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030de:	e9c1 2300 	strd	r2, r3, [r1]
	v->y = vec1.y + vec2.y;
 80030e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80030e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030ea:	f7fd f8c7 	bl	800027c <__adddf3>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	v->z = vec1.z + vec2.z;
 80030f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003100:	f7fd f8bc 	bl	800027c <__adddf3>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800310a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800310e:	bf00      	nop
 8003110:	3738      	adds	r7, #56	; 0x38
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <vector_sub>:

void
vector_sub(vector_t *v, vector_t vec1, vector_t vec2) {
 8003116:	b580      	push	{r7, lr}
 8003118:	b08e      	sub	sp, #56	; 0x38
 800311a:	af00      	add	r7, sp, #0
 800311c:	6378      	str	r0, [r7, #52]	; 0x34
 800311e:	eeb0 6a44 	vmov.f32	s12, s8
 8003122:	eef0 6a64 	vmov.f32	s13, s9
 8003126:	eeb0 7a45 	vmov.f32	s14, s10
 800312a:	eef0 7a65 	vmov.f32	s15, s11
 800312e:	ed87 0b06 	vstr	d0, [r7, #24]
 8003132:	ed87 1b08 	vstr	d1, [r7, #32]
 8003136:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 800313a:	ed87 3b00 	vstr	d3, [r7]
 800313e:	ed87 6b02 	vstr	d6, [r7, #8]
 8003142:	ed87 7b04 	vstr	d7, [r7, #16]
	v->x = vec1.x - vec2.x;
 8003146:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800314a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800314e:	f7fd f893 	bl	8000278 <__aeabi_dsub>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003158:	e9c1 2300 	strd	r2, r3, [r1]
	v->y = vec1.y - vec2.y;
 800315c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003164:	f7fd f888 	bl	8000278 <__aeabi_dsub>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800316e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	v->z = vec1.z - vec2.z;
 8003172:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003176:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800317a:	f7fd f87d 	bl	8000278 <__aeabi_dsub>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003184:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8003188:	bf00      	nop
 800318a:	3738      	adds	r7, #56	; 0x38
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <vector_mult>:

void
vector_mult(vector_t *v, double num) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	ed87 0b00 	vstr	d0, [r7]
	v->x *= num;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031a6:	f7fd fa1f 	bl	80005e8 <__aeabi_dmul>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	68f9      	ldr	r1, [r7, #12]
 80031b0:	e9c1 2300 	strd	r2, r3, [r1]
	v->y *= num;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80031ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031be:	f7fd fa13 	bl	80005e8 <__aeabi_dmul>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	68f9      	ldr	r1, [r7, #12]
 80031c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	v->z *= num;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80031d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031d6:	f7fd fa07 	bl	80005e8 <__aeabi_dmul>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	68f9      	ldr	r1, [r7, #12]
 80031e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <vector_normalize>:

void
vector_normalize(vector_t *v) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	double div = vector_mag(*v);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	ed93 5b00 	vldr	d5, [r3]
 80031fa:	ed93 6b02 	vldr	d6, [r3, #8]
 80031fe:	ed93 7b04 	vldr	d7, [r3, #16]
 8003202:	eeb0 0a45 	vmov.f32	s0, s10
 8003206:	eef0 0a65 	vmov.f32	s1, s11
 800320a:	eeb0 1a46 	vmov.f32	s2, s12
 800320e:	eef0 1a66 	vmov.f32	s3, s13
 8003212:	eeb0 2a47 	vmov.f32	s4, s14
 8003216:	eef0 2a67 	vmov.f32	s5, s15
 800321a:	f7ff fe27 	bl	8002e6c <vector_mag>
 800321e:	ed87 0b02 	vstr	d0, [r7, #8]
	v->x = v->x / div;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800322c:	f7fd fb06 	bl	800083c <__aeabi_ddiv>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	e9c1 2300 	strd	r2, r3, [r1]
	v->y = v->y / div;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003244:	f7fd fafa 	bl	800083c <__aeabi_ddiv>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	v->z = v->z / div;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800325c:	f7fd faee 	bl	800083c <__aeabi_ddiv>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003278:	480d      	ldr	r0, [pc, #52]	; (80032b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800327a:	490e      	ldr	r1, [pc, #56]	; (80032b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800327c:	4a0e      	ldr	r2, [pc, #56]	; (80032b8 <LoopForever+0xe>)
  movs r3, #0
 800327e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003280:	e002      	b.n	8003288 <LoopCopyDataInit>

08003282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003286:	3304      	adds	r3, #4

08003288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800328c:	d3f9      	bcc.n	8003282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328e:	4a0b      	ldr	r2, [pc, #44]	; (80032bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003290:	4c0b      	ldr	r4, [pc, #44]	; (80032c0 <LoopForever+0x16>)
  movs r3, #0
 8003292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003294:	e001      	b.n	800329a <LoopFillZerobss>

08003296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003298:	3204      	adds	r2, #4

0800329a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800329c:	d3fb      	bcc.n	8003296 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800329e:	f7ff f945 	bl	800252c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032a2:	f003 ff2b 	bl	80070fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032a6:	f7fd fd53 	bl	8000d50 <main>

080032aa <LoopForever>:

LoopForever:
    b LoopForever
 80032aa:	e7fe      	b.n	80032aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032ac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80032b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80032b8:	08009d58 	.word	0x08009d58
  ldr r2, =_sbss
 80032bc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80032c0:	2000054c 	.word	0x2000054c

080032c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032c4:	e7fe      	b.n	80032c4 <ADC1_2_IRQHandler>
	...

080032c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <HAL_Init+0x28>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <HAL_Init+0x28>)
 80032d2:	f043 0310 	orr.w	r3, r3, #16
 80032d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d8:	2003      	movs	r0, #3
 80032da:	f000 f94f 	bl	800357c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032de:	2000      	movs	r0, #0
 80032e0:	f000 f808 	bl	80032f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032e4:	f7ff f824 	bl	8002330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40022000 	.word	0x40022000

080032f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_InitTick+0x54>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_InitTick+0x58>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800330a:	fbb3 f3f1 	udiv	r3, r3, r1
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f967 	bl	80035e6 <HAL_SYSTICK_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e00e      	b.n	8003340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b0f      	cmp	r3, #15
 8003326:	d80a      	bhi.n	800333e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003328:	2200      	movs	r2, #0
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003330:	f000 f92f 	bl	8003592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003334:	4a06      	ldr	r2, [pc, #24]	; (8003350 <HAL_InitTick+0x5c>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000000 	.word	0x20000000
 800334c:	20000008 	.word	0x20000008
 8003350:	20000004 	.word	0x20000004

08003354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_IncTick+0x20>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_IncTick+0x24>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4413      	add	r3, r2
 8003364:	4a04      	ldr	r2, [pc, #16]	; (8003378 <HAL_IncTick+0x24>)
 8003366:	6013      	str	r3, [r2, #0]
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000008 	.word	0x20000008
 8003378:	20000538 	.word	0x20000538

0800337c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <HAL_GetTick+0x14>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000538 	.word	0x20000538

08003394 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800339c:	f7ff ffee 	bl	800337c <HAL_GetTick>
 80033a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ac:	d005      	beq.n	80033ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_Delay+0x44>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80033ba:	bf00      	nop
 80033bc:	f7ff ffde 	bl	800337c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d8f7      	bhi.n	80033bc <HAL_Delay+0x28>
  {
  }
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000008 	.word	0x20000008

080033dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f8:	4013      	ands	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340e:	4a04      	ldr	r2, [pc, #16]	; (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	60d3      	str	r3, [r2, #12]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <__NVIC_GetPriorityGrouping+0x18>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	f003 0307 	and.w	r3, r3, #7
}
 8003432:	4618      	mov	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	db0b      	blt.n	800346a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	f003 021f 	and.w	r2, r3, #31
 8003458:	4907      	ldr	r1, [pc, #28]	; (8003478 <__NVIC_EnableIRQ+0x38>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2001      	movs	r0, #1
 8003462:	fa00 f202 	lsl.w	r2, r0, r2
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000e100 	.word	0xe000e100

0800347c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	2b00      	cmp	r3, #0
 800348e:	db0a      	blt.n	80034a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	490c      	ldr	r1, [pc, #48]	; (80034c8 <__NVIC_SetPriority+0x4c>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	440b      	add	r3, r1
 80034a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a4:	e00a      	b.n	80034bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4908      	ldr	r1, [pc, #32]	; (80034cc <__NVIC_SetPriority+0x50>)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	3b04      	subs	r3, #4
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	440b      	add	r3, r1
 80034ba:	761a      	strb	r2, [r3, #24]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000e100 	.word	0xe000e100
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	; 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f1c3 0307 	rsb	r3, r3, #7
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	bf28      	it	cs
 80034ee:	2304      	movcs	r3, #4
 80034f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d902      	bls.n	8003500 <NVIC_EncodePriority+0x30>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3b03      	subs	r3, #3
 80034fe:	e000      	b.n	8003502 <NVIC_EncodePriority+0x32>
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	401a      	ands	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003518:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	43d9      	mvns	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003528:	4313      	orrs	r3, r2
         );
}
 800352a:	4618      	mov	r0, r3
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003548:	d301      	bcc.n	800354e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800354a:	2301      	movs	r3, #1
 800354c:	e00f      	b.n	800356e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <SysTick_Config+0x40>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003556:	210f      	movs	r1, #15
 8003558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800355c:	f7ff ff8e 	bl	800347c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <SysTick_Config+0x40>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003566:	4b04      	ldr	r3, [pc, #16]	; (8003578 <SysTick_Config+0x40>)
 8003568:	2207      	movs	r2, #7
 800356a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	e000e010 	.word	0xe000e010

0800357c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ff29 	bl	80033dc <__NVIC_SetPriorityGrouping>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035a4:	f7ff ff3e 	bl	8003424 <__NVIC_GetPriorityGrouping>
 80035a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	6978      	ldr	r0, [r7, #20]
 80035b0:	f7ff ff8e 	bl	80034d0 <NVIC_EncodePriority>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff5d 	bl	800347c <__NVIC_SetPriority>
}
 80035c2:	bf00      	nop
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff31 	bl	8003440 <__NVIC_EnableIRQ>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff ffa2 	bl	8003538 <SysTick_Config>
 80035f4:	4603      	mov	r3, r0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800360c:	2b02      	cmp	r3, #2
 800360e:	d008      	beq.n	8003622 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2204      	movs	r2, #4
 8003614:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e020      	b.n	8003664 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 020e 	bic.w	r2, r2, #14
 8003630:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	2101      	movs	r1, #1
 800364c:	fa01 f202 	lsl.w	r2, r1, r2
 8003650:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003682:	2b02      	cmp	r3, #2
 8003684:	d005      	beq.n	8003692 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2204      	movs	r2, #4
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
 8003690:	e027      	b.n	80036e2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 020e 	bic.w	r2, r2, #14
 80036a0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f202 	lsl.w	r2, r1, r2
 80036c0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
    } 
  }
  return status;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036fa:	e14e      	b.n	800399a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	2101      	movs	r1, #1
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	4013      	ands	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8140 	beq.w	8003994 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d00b      	beq.n	8003734 <HAL_GPIO_Init+0x48>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d007      	beq.n	8003734 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003728:	2b11      	cmp	r3, #17
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b12      	cmp	r3, #18
 8003732:	d130      	bne.n	8003796 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	2203      	movs	r2, #3
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376a:	2201      	movs	r2, #1
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 0201 	and.w	r2, r3, #1
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	2203      	movs	r2, #3
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0xea>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b12      	cmp	r3, #18
 80037d4:	d123      	bne.n	800381e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	08da      	lsrs	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3208      	adds	r2, #8
 80037de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	220f      	movs	r2, #15
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	08da      	lsrs	r2, r3, #3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3208      	adds	r2, #8
 8003818:	6939      	ldr	r1, [r7, #16]
 800381a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	2203      	movs	r2, #3
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0203 	and.w	r2, r3, #3
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 809a 	beq.w	8003994 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003860:	4b55      	ldr	r3, [pc, #340]	; (80039b8 <HAL_GPIO_Init+0x2cc>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	4a54      	ldr	r2, [pc, #336]	; (80039b8 <HAL_GPIO_Init+0x2cc>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6193      	str	r3, [r2, #24]
 800386c:	4b52      	ldr	r3, [pc, #328]	; (80039b8 <HAL_GPIO_Init+0x2cc>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003878:	4a50      	ldr	r2, [pc, #320]	; (80039bc <HAL_GPIO_Init+0x2d0>)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	089b      	lsrs	r3, r3, #2
 800387e:	3302      	adds	r3, #2
 8003880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003884:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	220f      	movs	r2, #15
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038a2:	d013      	beq.n	80038cc <HAL_GPIO_Init+0x1e0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a46      	ldr	r2, [pc, #280]	; (80039c0 <HAL_GPIO_Init+0x2d4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00d      	beq.n	80038c8 <HAL_GPIO_Init+0x1dc>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a45      	ldr	r2, [pc, #276]	; (80039c4 <HAL_GPIO_Init+0x2d8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d007      	beq.n	80038c4 <HAL_GPIO_Init+0x1d8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a44      	ldr	r2, [pc, #272]	; (80039c8 <HAL_GPIO_Init+0x2dc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d101      	bne.n	80038c0 <HAL_GPIO_Init+0x1d4>
 80038bc:	2303      	movs	r3, #3
 80038be:	e006      	b.n	80038ce <HAL_GPIO_Init+0x1e2>
 80038c0:	2305      	movs	r3, #5
 80038c2:	e004      	b.n	80038ce <HAL_GPIO_Init+0x1e2>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e002      	b.n	80038ce <HAL_GPIO_Init+0x1e2>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <HAL_GPIO_Init+0x1e2>
 80038cc:	2300      	movs	r3, #0
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	f002 0203 	and.w	r2, r2, #3
 80038d4:	0092      	lsls	r2, r2, #2
 80038d6:	4093      	lsls	r3, r2
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038de:	4937      	ldr	r1, [pc, #220]	; (80039bc <HAL_GPIO_Init+0x2d0>)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	089b      	lsrs	r3, r3, #2
 80038e4:	3302      	adds	r3, #2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038ec:	4b37      	ldr	r3, [pc, #220]	; (80039cc <HAL_GPIO_Init+0x2e0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003910:	4a2e      	ldr	r2, [pc, #184]	; (80039cc <HAL_GPIO_Init+0x2e0>)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003916:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <HAL_GPIO_Init+0x2e0>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	43db      	mvns	r3, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800393a:	4a24      	ldr	r2, [pc, #144]	; (80039cc <HAL_GPIO_Init+0x2e0>)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <HAL_GPIO_Init+0x2e0>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	43db      	mvns	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003964:	4a19      	ldr	r2, [pc, #100]	; (80039cc <HAL_GPIO_Init+0x2e0>)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800396a:	4b18      	ldr	r3, [pc, #96]	; (80039cc <HAL_GPIO_Init+0x2e0>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	43db      	mvns	r3, r3
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800398e:	4a0f      	ldr	r2, [pc, #60]	; (80039cc <HAL_GPIO_Init+0x2e0>)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3301      	adds	r3, #1
 8003998:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f47f aea9 	bne.w	80036fc <HAL_GPIO_Init+0x10>
  }
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40010000 	.word	0x40010000
 80039c0:	48000400 	.word	0x48000400
 80039c4:	48000800 	.word	0x48000800
 80039c8:	48000c00 	.word	0x48000c00
 80039cc:	40010400 	.word	0x40010400

080039d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	807b      	strh	r3, [r7, #2]
 80039dc:	4613      	mov	r3, r2
 80039de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e0:	787b      	ldrb	r3, [r7, #1]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039e6:	887a      	ldrh	r2, [r7, #2]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039ec:	e002      	b.n	80039f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d006      	beq.n	8003a24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a16:	4a05      	ldr	r2, [pc, #20]	; (8003a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fd fab8 	bl	8000f94 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40010400 	.word	0x40010400

08003a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a3c:	1d3b      	adds	r3, r7, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	f000 bef4 	b.w	8004832 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4a:	1d3b      	adds	r3, r7, #4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 816a 	beq.w	8003d2e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a5a:	4bb3      	ldr	r3, [pc, #716]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d00c      	beq.n	8003a80 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a66:	4bb0      	ldr	r3, [pc, #704]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d159      	bne.n	8003b26 <HAL_RCC_OscConfig+0xf6>
 8003a72:	4bad      	ldr	r3, [pc, #692]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7e:	d152      	bne.n	8003b26 <HAL_RCC_OscConfig+0xf6>
 8003a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a84:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003a8c:	fa93 f3a3 	rbit	r3, r3
 8003a90:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a94:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	fab3 f383 	clz	r3, r3
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d102      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x82>
 8003aac:	4b9e      	ldr	r3, [pc, #632]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	e015      	b.n	8003ade <HAL_RCC_OscConfig+0xae>
 8003ab2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ab6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003abe:	fa93 f3a3 	rbit	r3, r3
 8003ac2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003ace:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003ada:	4b93      	ldr	r3, [pc, #588]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ae2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003ae6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003aea:	fa92 f2a2 	rbit	r2, r2
 8003aee:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003af2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003af6:	fab2 f282 	clz	r2, r2
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	f042 0220 	orr.w	r2, r2, #32
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	f002 021f 	and.w	r2, r2, #31
 8003b06:	2101      	movs	r1, #1
 8003b08:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 810c 	beq.w	8003d2c <HAL_RCC_OscConfig+0x2fc>
 8003b14:	1d3b      	adds	r3, r7, #4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f040 8106 	bne.w	8003d2c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f000 be86 	b.w	8004832 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b30:	d106      	bne.n	8003b40 <HAL_RCC_OscConfig+0x110>
 8003b32:	4b7d      	ldr	r3, [pc, #500]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7c      	ldr	r2, [pc, #496]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e030      	b.n	8003ba2 <HAL_RCC_OscConfig+0x172>
 8003b40:	1d3b      	adds	r3, r7, #4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x134>
 8003b4a:	4b77      	ldr	r3, [pc, #476]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a76      	ldr	r2, [pc, #472]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b74      	ldr	r3, [pc, #464]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a73      	ldr	r2, [pc, #460]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e01e      	b.n	8003ba2 <HAL_RCC_OscConfig+0x172>
 8003b64:	1d3b      	adds	r3, r7, #4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b6e:	d10c      	bne.n	8003b8a <HAL_RCC_OscConfig+0x15a>
 8003b70:	4b6d      	ldr	r3, [pc, #436]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a6c      	ldr	r2, [pc, #432]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b6a      	ldr	r3, [pc, #424]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a69      	ldr	r2, [pc, #420]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	e00b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x172>
 8003b8a:	4b67      	ldr	r3, [pc, #412]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a66      	ldr	r2, [pc, #408]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b64      	ldr	r3, [pc, #400]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a63      	ldr	r2, [pc, #396]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ba2:	4b61      	ldr	r3, [pc, #388]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	f023 020f 	bic.w	r2, r3, #15
 8003baa:	1d3b      	adds	r3, r7, #4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	495d      	ldr	r1, [pc, #372]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb6:	1d3b      	adds	r3, r7, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d059      	beq.n	8003c74 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7ff fbdc 	bl	800337c <HAL_GetTick>
 8003bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bca:	f7ff fbd7 	bl	800337c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d902      	bls.n	8003be0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	f000 be29 	b.w	8004832 <HAL_RCC_OscConfig+0xe02>
 8003be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003be4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003bf4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d102      	bne.n	8003c12 <HAL_RCC_OscConfig+0x1e2>
 8003c0c:	4b46      	ldr	r3, [pc, #280]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	e015      	b.n	8003c3e <HAL_RCC_OscConfig+0x20e>
 8003c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c16:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003c1e:	fa93 f3a3 	rbit	r3, r3
 8003c22:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003c26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c2a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c2e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c42:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003c46:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c4a:	fa92 f2a2 	rbit	r2, r2
 8003c4e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003c52:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003c56:	fab2 f282 	clz	r2, r2
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	f042 0220 	orr.w	r2, r2, #32
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	f002 021f 	and.w	r2, r2, #31
 8003c66:	2101      	movs	r1, #1
 8003c68:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0ab      	beq.n	8003bca <HAL_RCC_OscConfig+0x19a>
 8003c72:	e05c      	b.n	8003d2e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7ff fb82 	bl	800337c <HAL_GetTick>
 8003c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7e:	f7ff fb7d 	bl	800337c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d902      	bls.n	8003c94 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	f000 bdcf 	b.w	8004832 <HAL_RCC_OscConfig+0xe02>
 8003c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c98:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003ca8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x296>
 8003cc0:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	e015      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2c2>
 8003cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cde:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003ce2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003cee:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <HAL_RCC_OscConfig+0x2f8>)
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cf6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003cfa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003cfe:	fa92 f2a2 	rbit	r2, r2
 8003d02:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003d06:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003d0a:	fab2 f282 	clz	r2, r2
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	f042 0220 	orr.w	r2, r2, #32
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	f002 021f 	and.w	r2, r2, #31
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ab      	bne.n	8003c7e <HAL_RCC_OscConfig+0x24e>
 8003d26:	e002      	b.n	8003d2e <HAL_RCC_OscConfig+0x2fe>
 8003d28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2e:	1d3b      	adds	r3, r7, #4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 816f 	beq.w	800401c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d3e:	4bd0      	ldr	r3, [pc, #832]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d4a:	4bcd      	ldr	r3, [pc, #820]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d16c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x400>
 8003d56:	4bca      	ldr	r3, [pc, #808]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d166      	bne.n	8003e30 <HAL_RCC_OscConfig+0x400>
 8003d62:	2302      	movs	r3, #2
 8003d64:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d68:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003d6c:	fa93 f3a3 	rbit	r3, r3
 8003d70:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003d74:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d78:	fab3 f383 	clz	r3, r3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d102      	bne.n	8003d92 <HAL_RCC_OscConfig+0x362>
 8003d8c:	4bbc      	ldr	r3, [pc, #752]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	e013      	b.n	8003dba <HAL_RCC_OscConfig+0x38a>
 8003d92:	2302      	movs	r3, #2
 8003d94:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003da4:	2302      	movs	r3, #2
 8003da6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003daa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dae:	fa93 f3a3 	rbit	r3, r3
 8003db2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003db6:	4bb2      	ldr	r3, [pc, #712]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003dc0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003dc4:	fa92 f2a2 	rbit	r2, r2
 8003dc8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003dcc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003dd0:	fab2 f282 	clz	r2, r2
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	f042 0220 	orr.w	r2, r2, #32
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	f002 021f 	and.w	r2, r2, #31
 8003de0:	2101      	movs	r1, #1
 8003de2:	fa01 f202 	lsl.w	r2, r1, r2
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_RCC_OscConfig+0x3cc>
 8003dec:	1d3b      	adds	r3, r7, #4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d002      	beq.n	8003dfc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f000 bd1b 	b.w	8004832 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfc:	4ba0      	ldr	r3, [pc, #640]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	21f8      	movs	r1, #248	; 0xf8
 8003e0c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003e14:	fa91 f1a1 	rbit	r1, r1
 8003e18:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003e1c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003e20:	fab1 f181 	clz	r1, r1
 8003e24:	b2c9      	uxtb	r1, r1
 8003e26:	408b      	lsls	r3, r1
 8003e28:	4995      	ldr	r1, [pc, #596]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2e:	e0f5      	b.n	800401c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e30:	1d3b      	adds	r3, r7, #4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8085 	beq.w	8003f46 <HAL_RCC_OscConfig+0x516>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003e46:	fa93 f3a3 	rbit	r3, r3
 8003e4a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003e4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	461a      	mov	r2, r3
 8003e64:	2301      	movs	r3, #1
 8003e66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7ff fa88 	bl	800337c <HAL_GetTick>
 8003e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e72:	f7ff fa83 	bl	800337c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d902      	bls.n	8003e88 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	f000 bcd5 	b.w	8004832 <HAL_RCC_OscConfig+0xe02>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003e9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d102      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x488>
 8003eb2:	4b73      	ldr	r3, [pc, #460]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	e013      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4b0>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003eca:	2302      	movs	r3, #2
 8003ecc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ed0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003edc:	4b68      	ldr	r3, [pc, #416]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003ee6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003eea:	fa92 f2a2 	rbit	r2, r2
 8003eee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003ef2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003ef6:	fab2 f282 	clz	r2, r2
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	f042 0220 	orr.w	r2, r2, #32
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	f002 021f 	and.w	r2, r2, #31
 8003f06:	2101      	movs	r1, #1
 8003f08:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0af      	beq.n	8003e72 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b5b      	ldr	r3, [pc, #364]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f1a:	1d3b      	adds	r3, r7, #4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	21f8      	movs	r1, #248	; 0xf8
 8003f22:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003f2a:	fa91 f1a1 	rbit	r1, r1
 8003f2e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003f32:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003f36:	fab1 f181 	clz	r1, r1
 8003f3a:	b2c9      	uxtb	r1, r1
 8003f3c:	408b      	lsls	r3, r1
 8003f3e:	4950      	ldr	r1, [pc, #320]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
 8003f44:	e06a      	b.n	800401c <HAL_RCC_OscConfig+0x5ec>
 8003f46:	2301      	movs	r3, #1
 8003f48:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003f58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f5c:	fab3 f383 	clz	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2300      	movs	r3, #0
 8003f70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f72:	f7ff fa03 	bl	800337c <HAL_GetTick>
 8003f76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f7c:	f7ff f9fe 	bl	800337c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d902      	bls.n	8003f92 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	f000 bc50 	b.w	8004832 <HAL_RCC_OscConfig+0xe02>
 8003f92:	2302      	movs	r3, #2
 8003f94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa8:	fab3 f383 	clz	r3, r3
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d102      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x592>
 8003fbc:	4b30      	ldr	r3, [pc, #192]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	e013      	b.n	8003fea <HAL_RCC_OscConfig+0x5ba>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fcc:	fa93 f3a3 	rbit	r3, r3
 8003fd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003fda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fe6:	4b26      	ldr	r3, [pc, #152]	; (8004080 <HAL_RCC_OscConfig+0x650>)
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2202      	movs	r2, #2
 8003fec:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003ff0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ff4:	fa92 f2a2 	rbit	r2, r2
 8003ff8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ffc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004000:	fab2 f282 	clz	r2, r2
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	f042 0220 	orr.w	r2, r2, #32
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	f002 021f 	and.w	r2, r2, #31
 8004010:	2101      	movs	r1, #1
 8004012:	fa01 f202 	lsl.w	r2, r1, r2
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1af      	bne.n	8003f7c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800401c:	1d3b      	adds	r3, r7, #4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80da 	beq.w	80041e0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800402c:	1d3b      	adds	r3, r7, #4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d069      	beq.n	800410a <HAL_RCC_OscConfig+0x6da>
 8004036:	2301      	movs	r3, #1
 8004038:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004040:	fa93 f3a3 	rbit	r3, r3
 8004044:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404c:	fab3 f383 	clz	r3, r3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_OscConfig+0x654>)
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	461a      	mov	r2, r3
 800405c:	2301      	movs	r3, #1
 800405e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004060:	f7ff f98c 	bl	800337c <HAL_GetTick>
 8004064:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004068:	e00e      	b.n	8004088 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800406a:	f7ff f987 	bl	800337c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d906      	bls.n	8004088 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e3d9      	b.n	8004832 <HAL_RCC_OscConfig+0xe02>
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	10908120 	.word	0x10908120
 8004088:	2302      	movs	r3, #2
 800408a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004092:	fa93 f3a3 	rbit	r3, r3
 8004096:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800409a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800409e:	2202      	movs	r2, #2
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	fa93 f2a3 	rbit	r2, r3
 80040ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80040b6:	2202      	movs	r2, #2
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	fa93 f2a3 	rbit	r2, r3
 80040c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80040c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ca:	4ba5      	ldr	r3, [pc, #660]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 80040cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040d2:	2102      	movs	r1, #2
 80040d4:	6019      	str	r1, [r3, #0]
 80040d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	fa93 f1a3 	rbit	r1, r3
 80040e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80040e4:	6019      	str	r1, [r3, #0]
  return result;
 80040e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	fab3 f383 	clz	r3, r3
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0b0      	beq.n	800406a <HAL_RCC_OscConfig+0x63a>
 8004108:	e06a      	b.n	80041e0 <HAL_RCC_OscConfig+0x7b0>
 800410a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800410e:	2201      	movs	r2, #1
 8004110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	fa93 f2a3 	rbit	r2, r3
 800411c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004120:	601a      	str	r2, [r3, #0]
  return result;
 8004122:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004126:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004128:	fab3 f383 	clz	r3, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	4b8c      	ldr	r3, [pc, #560]	; (8004364 <HAL_RCC_OscConfig+0x934>)
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	461a      	mov	r2, r3
 8004138:	2300      	movs	r3, #0
 800413a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413c:	f7ff f91e 	bl	800337c <HAL_GetTick>
 8004140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004144:	e009      	b.n	800415a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004146:	f7ff f919 	bl	800337c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e36b      	b.n	8004832 <HAL_RCC_OscConfig+0xe02>
 800415a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800415e:	2202      	movs	r2, #2
 8004160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	fa93 f2a3 	rbit	r2, r3
 800416c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004176:	2202      	movs	r2, #2
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	fa93 f2a3 	rbit	r2, r3
 8004184:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800418e:	2202      	movs	r2, #2
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fa93 f2a3 	rbit	r2, r3
 800419c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a2:	4b6f      	ldr	r3, [pc, #444]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 80041a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041aa:	2102      	movs	r1, #2
 80041ac:	6019      	str	r1, [r3, #0]
 80041ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	fa93 f1a3 	rbit	r1, r3
 80041b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041bc:	6019      	str	r1, [r3, #0]
  return result;
 80041be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	fab3 f383 	clz	r3, r3
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	2101      	movs	r1, #1
 80041d6:	fa01 f303 	lsl.w	r3, r1, r3
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1b2      	bne.n	8004146 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e0:	1d3b      	adds	r3, r7, #4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 8158 	beq.w	80044a0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f6:	4b5a      	ldr	r3, [pc, #360]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d112      	bne.n	8004228 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	4b57      	ldr	r3, [pc, #348]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	4a56      	ldr	r2, [pc, #344]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 8004208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420c:	61d3      	str	r3, [r2, #28]
 800420e:	4b54      	ldr	r3, [pc, #336]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004216:	f107 0308 	add.w	r3, r7, #8
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	f107 0308 	add.w	r3, r7, #8
 8004220:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004228:	4b4f      	ldr	r3, [pc, #316]	; (8004368 <HAL_RCC_OscConfig+0x938>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d11a      	bne.n	800426a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004234:	4b4c      	ldr	r3, [pc, #304]	; (8004368 <HAL_RCC_OscConfig+0x938>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a4b      	ldr	r2, [pc, #300]	; (8004368 <HAL_RCC_OscConfig+0x938>)
 800423a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004240:	f7ff f89c 	bl	800337c <HAL_GetTick>
 8004244:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	e009      	b.n	800425e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424a:	f7ff f897 	bl	800337c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	; 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e2e9      	b.n	8004832 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425e:	4b42      	ldr	r3, [pc, #264]	; (8004368 <HAL_RCC_OscConfig+0x938>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0ef      	beq.n	800424a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d106      	bne.n	8004282 <HAL_RCC_OscConfig+0x852>
 8004274:	4b3a      	ldr	r3, [pc, #232]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	4a39      	ldr	r2, [pc, #228]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6213      	str	r3, [r2, #32]
 8004280:	e02f      	b.n	80042e2 <HAL_RCC_OscConfig+0x8b2>
 8004282:	1d3b      	adds	r3, r7, #4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10c      	bne.n	80042a6 <HAL_RCC_OscConfig+0x876>
 800428c:	4b34      	ldr	r3, [pc, #208]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	4a33      	ldr	r2, [pc, #204]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	6213      	str	r3, [r2, #32]
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	4a30      	ldr	r2, [pc, #192]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 800429e:	f023 0304 	bic.w	r3, r3, #4
 80042a2:	6213      	str	r3, [r2, #32]
 80042a4:	e01d      	b.n	80042e2 <HAL_RCC_OscConfig+0x8b2>
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b05      	cmp	r3, #5
 80042ae:	d10c      	bne.n	80042ca <HAL_RCC_OscConfig+0x89a>
 80042b0:	4b2b      	ldr	r3, [pc, #172]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	4a2a      	ldr	r2, [pc, #168]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	6213      	str	r3, [r2, #32]
 80042bc:	4b28      	ldr	r3, [pc, #160]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	4a27      	ldr	r2, [pc, #156]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6213      	str	r3, [r2, #32]
 80042c8:	e00b      	b.n	80042e2 <HAL_RCC_OscConfig+0x8b2>
 80042ca:	4b25      	ldr	r3, [pc, #148]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	4a24      	ldr	r2, [pc, #144]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6213      	str	r3, [r2, #32]
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	4a21      	ldr	r2, [pc, #132]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042e2:	1d3b      	adds	r3, r7, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d06b      	beq.n	80043c4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ec:	f7ff f846 	bl	800337c <HAL_GetTick>
 80042f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f4:	e00b      	b.n	800430e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f6:	f7ff f841 	bl	800337c <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f241 3288 	movw	r2, #5000	; 0x1388
 8004306:	4293      	cmp	r3, r2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e291      	b.n	8004832 <HAL_RCC_OscConfig+0xe02>
 800430e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004312:	2202      	movs	r2, #2
 8004314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	fa93 f2a3 	rbit	r2, r3
 8004320:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800432a:	2202      	movs	r2, #2
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	fa93 f2a3 	rbit	r2, r3
 8004338:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800433c:	601a      	str	r2, [r3, #0]
  return result;
 800433e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004342:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004344:	fab3 f383 	clz	r3, r3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f043 0302 	orr.w	r3, r3, #2
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d109      	bne.n	800436c <HAL_RCC_OscConfig+0x93c>
 8004358:	4b01      	ldr	r3, [pc, #4]	; (8004360 <HAL_RCC_OscConfig+0x930>)
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	e014      	b.n	8004388 <HAL_RCC_OscConfig+0x958>
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	10908120 	.word	0x10908120
 8004368:	40007000 	.word	0x40007000
 800436c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004370:	2202      	movs	r2, #2
 8004372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	fa93 f2a3 	rbit	r2, r3
 800437e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	4bbb      	ldr	r3, [pc, #748]	; (8004674 <HAL_RCC_OscConfig+0xc44>)
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800438c:	2102      	movs	r1, #2
 800438e:	6011      	str	r1, [r2, #0]
 8004390:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	fa92 f1a2 	rbit	r1, r2
 800439a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800439e:	6011      	str	r1, [r2, #0]
  return result;
 80043a0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	fab2 f282 	clz	r2, r2
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	f002 021f 	and.w	r2, r2, #31
 80043b6:	2101      	movs	r1, #1
 80043b8:	fa01 f202 	lsl.w	r2, r1, r2
 80043bc:	4013      	ands	r3, r2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d099      	beq.n	80042f6 <HAL_RCC_OscConfig+0x8c6>
 80043c2:	e063      	b.n	800448c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c4:	f7fe ffda 	bl	800337c <HAL_GetTick>
 80043c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043cc:	e00b      	b.n	80043e6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fe ffd5 	bl	800337c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e225      	b.n	8004832 <HAL_RCC_OscConfig+0xe02>
 80043e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043ea:	2202      	movs	r2, #2
 80043ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	fa93 f2a3 	rbit	r2, r3
 80043f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004402:	2202      	movs	r2, #2
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	fa93 f2a3 	rbit	r2, r3
 8004410:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004414:	601a      	str	r2, [r3, #0]
  return result;
 8004416:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800441a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441c:	fab3 f383 	clz	r3, r3
 8004420:	b2db      	uxtb	r3, r3
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f043 0302 	orr.w	r3, r3, #2
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d102      	bne.n	8004436 <HAL_RCC_OscConfig+0xa06>
 8004430:	4b90      	ldr	r3, [pc, #576]	; (8004674 <HAL_RCC_OscConfig+0xc44>)
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	e00d      	b.n	8004452 <HAL_RCC_OscConfig+0xa22>
 8004436:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800443a:	2202      	movs	r2, #2
 800443c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	fa93 f2a3 	rbit	r2, r3
 8004448:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	4b89      	ldr	r3, [pc, #548]	; (8004674 <HAL_RCC_OscConfig+0xc44>)
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004456:	2102      	movs	r1, #2
 8004458:	6011      	str	r1, [r2, #0]
 800445a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	fa92 f1a2 	rbit	r1, r2
 8004464:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004468:	6011      	str	r1, [r2, #0]
  return result;
 800446a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	fab2 f282 	clz	r2, r2
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	f002 021f 	and.w	r2, r2, #31
 8004480:	2101      	movs	r1, #1
 8004482:	fa01 f202 	lsl.w	r2, r1, r2
 8004486:	4013      	ands	r3, r2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1a0      	bne.n	80043ce <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800448c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004490:	2b01      	cmp	r3, #1
 8004492:	d105      	bne.n	80044a0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004494:	4b77      	ldr	r3, [pc, #476]	; (8004674 <HAL_RCC_OscConfig+0xc44>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4a76      	ldr	r2, [pc, #472]	; (8004674 <HAL_RCC_OscConfig+0xc44>)
 800449a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044a0:	1d3b      	adds	r3, r7, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 81c2 	beq.w	8004830 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ac:	4b71      	ldr	r3, [pc, #452]	; (8004674 <HAL_RCC_OscConfig+0xc44>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 030c 	and.w	r3, r3, #12
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	f000 819c 	beq.w	80047f2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ba:	1d3b      	adds	r3, r7, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	f040 8114 	bne.w	80046ee <HAL_RCC_OscConfig+0xcbe>
 80044c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80044ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	fa93 f2a3 	rbit	r2, r3
 80044da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044de:	601a      	str	r2, [r3, #0]
  return result;
 80044e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e6:	fab3 f383 	clz	r3, r3
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	461a      	mov	r2, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fe ff3e 	bl	800337c <HAL_GetTick>
 8004500:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004504:	e009      	b.n	800451a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004506:	f7fe ff39 	bl	800337c <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e18b      	b.n	8004832 <HAL_RCC_OscConfig+0xe02>
 800451a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800451e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	fa93 f2a3 	rbit	r2, r3
 800452e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004532:	601a      	str	r2, [r3, #0]
  return result;
 8004534:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004538:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453a:	fab3 f383 	clz	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d102      	bne.n	8004554 <HAL_RCC_OscConfig+0xb24>
 800454e:	4b49      	ldr	r3, [pc, #292]	; (8004674 <HAL_RCC_OscConfig+0xc44>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	e01b      	b.n	800458c <HAL_RCC_OscConfig+0xb5c>
 8004554:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004558:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800455c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	fa93 f2a3 	rbit	r2, r3
 8004568:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	fa93 f2a3 	rbit	r2, r3
 8004582:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	4b3a      	ldr	r3, [pc, #232]	; (8004674 <HAL_RCC_OscConfig+0xc44>)
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004590:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004594:	6011      	str	r1, [r2, #0]
 8004596:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	fa92 f1a2 	rbit	r1, r2
 80045a0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80045a4:	6011      	str	r1, [r2, #0]
  return result;
 80045a6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	fab2 f282 	clz	r2, r2
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	f042 0220 	orr.w	r2, r2, #32
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	f002 021f 	and.w	r2, r2, #31
 80045bc:	2101      	movs	r1, #1
 80045be:	fa01 f202 	lsl.w	r2, r1, r2
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d19e      	bne.n	8004506 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c8:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_RCC_OscConfig+0xc44>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045d6:	1d3b      	adds	r3, r7, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	430b      	orrs	r3, r1
 80045de:	4925      	ldr	r1, [pc, #148]	; (8004674 <HAL_RCC_OscConfig+0xc44>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
 80045e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80045e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	fa93 f2a3 	rbit	r2, r3
 80045f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045fc:	601a      	str	r2, [r3, #0]
  return result;
 80045fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004602:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800460e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	461a      	mov	r2, r3
 8004616:	2301      	movs	r3, #1
 8004618:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7fe feaf 	bl	800337c <HAL_GetTick>
 800461e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004622:	e009      	b.n	8004638 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004624:	f7fe feaa 	bl	800337c <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e0fc      	b.n	8004832 <HAL_RCC_OscConfig+0xe02>
 8004638:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800463c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004642:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	fa93 f2a3 	rbit	r2, r3
 800464c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004650:	601a      	str	r2, [r3, #0]
  return result;
 8004652:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004656:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004658:	fab3 f383 	clz	r3, r3
 800465c:	b2db      	uxtb	r3, r3
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	d105      	bne.n	8004678 <HAL_RCC_OscConfig+0xc48>
 800466c:	4b01      	ldr	r3, [pc, #4]	; (8004674 <HAL_RCC_OscConfig+0xc44>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	e01e      	b.n	80046b0 <HAL_RCC_OscConfig+0xc80>
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800467c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	fa93 f2a3 	rbit	r2, r3
 800468c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	fa93 f2a3 	rbit	r2, r3
 80046a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	4b63      	ldr	r3, [pc, #396]	; (800483c <HAL_RCC_OscConfig+0xe0c>)
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80046b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046b8:	6011      	str	r1, [r2, #0]
 80046ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	fa92 f1a2 	rbit	r1, r2
 80046c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80046c8:	6011      	str	r1, [r2, #0]
  return result;
 80046ca:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	fab2 f282 	clz	r2, r2
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	f042 0220 	orr.w	r2, r2, #32
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	f002 021f 	and.w	r2, r2, #31
 80046e0:	2101      	movs	r1, #1
 80046e2:	fa01 f202 	lsl.w	r2, r1, r2
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d09b      	beq.n	8004624 <HAL_RCC_OscConfig+0xbf4>
 80046ec:	e0a0      	b.n	8004830 <HAL_RCC_OscConfig+0xe00>
 80046ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	fa93 f2a3 	rbit	r2, r3
 8004702:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004706:	601a      	str	r2, [r3, #0]
  return result;
 8004708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800470c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470e:	fab3 f383 	clz	r3, r3
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004718:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	461a      	mov	r2, r3
 8004720:	2300      	movs	r3, #0
 8004722:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fe fe2a 	bl	800337c <HAL_GetTick>
 8004728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472c:	e009      	b.n	8004742 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472e:	f7fe fe25 	bl	800337c <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e077      	b.n	8004832 <HAL_RCC_OscConfig+0xe02>
 8004742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004746:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800474a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	fa93 f2a3 	rbit	r2, r3
 8004756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800475a:	601a      	str	r2, [r3, #0]
  return result;
 800475c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004760:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004762:	fab3 f383 	clz	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b01      	cmp	r3, #1
 8004774:	d102      	bne.n	800477c <HAL_RCC_OscConfig+0xd4c>
 8004776:	4b31      	ldr	r3, [pc, #196]	; (800483c <HAL_RCC_OscConfig+0xe0c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	e01b      	b.n	80047b4 <HAL_RCC_OscConfig+0xd84>
 800477c:	f107 0320 	add.w	r3, r7, #32
 8004780:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	f107 0320 	add.w	r3, r7, #32
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	fa93 f2a3 	rbit	r2, r3
 8004790:	f107 031c 	add.w	r3, r7, #28
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	f107 0318 	add.w	r3, r7, #24
 800479a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	f107 0318 	add.w	r3, r7, #24
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	fa93 f2a3 	rbit	r2, r3
 80047aa:	f107 0314 	add.w	r3, r7, #20
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	4b22      	ldr	r3, [pc, #136]	; (800483c <HAL_RCC_OscConfig+0xe0c>)
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	f107 0210 	add.w	r2, r7, #16
 80047b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047bc:	6011      	str	r1, [r2, #0]
 80047be:	f107 0210 	add.w	r2, r7, #16
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	fa92 f1a2 	rbit	r1, r2
 80047c8:	f107 020c 	add.w	r2, r7, #12
 80047cc:	6011      	str	r1, [r2, #0]
  return result;
 80047ce:	f107 020c 	add.w	r2, r7, #12
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	fab2 f282 	clz	r2, r2
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	f042 0220 	orr.w	r2, r2, #32
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	f002 021f 	and.w	r2, r2, #31
 80047e4:	2101      	movs	r1, #1
 80047e6:	fa01 f202 	lsl.w	r2, r1, r2
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d19e      	bne.n	800472e <HAL_RCC_OscConfig+0xcfe>
 80047f0:	e01e      	b.n	8004830 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f2:	1d3b      	adds	r3, r7, #4
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e018      	b.n	8004832 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004800:	4b0e      	ldr	r3, [pc, #56]	; (800483c <HAL_RCC_OscConfig+0xe0c>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004808:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800480c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004810:	1d3b      	adds	r3, r7, #4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	429a      	cmp	r2, r3
 8004818:	d108      	bne.n	800482c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800481a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800481e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004822:	1d3b      	adds	r3, r7, #4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004828:	429a      	cmp	r2, r3
 800482a:	d001      	beq.n	8004830 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40021000 	.word	0x40021000

08004840 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b09e      	sub	sp, #120	; 0x78
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e162      	b.n	8004b1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004858:	4b90      	ldr	r3, [pc, #576]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d910      	bls.n	8004888 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b8d      	ldr	r3, [pc, #564]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 0207 	bic.w	r2, r3, #7
 800486e:	498b      	ldr	r1, [pc, #556]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4313      	orrs	r3, r2
 8004874:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b89      	ldr	r3, [pc, #548]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e14a      	b.n	8004b1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004894:	4b82      	ldr	r3, [pc, #520]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	497f      	ldr	r1, [pc, #508]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80dc 	beq.w	8004a6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d13c      	bne.n	8004936 <HAL_RCC_ClockConfig+0xf6>
 80048bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048c4:	fa93 f3a3 	rbit	r3, r3
 80048c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80048ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048cc:	fab3 f383 	clz	r3, r3
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d102      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xa6>
 80048e0:	4b6f      	ldr	r3, [pc, #444]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	e00f      	b.n	8004906 <HAL_RCC_ClockConfig+0xc6>
 80048e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ee:	fa93 f3a3 	rbit	r3, r3
 80048f2:	667b      	str	r3, [r7, #100]	; 0x64
 80048f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048f8:	663b      	str	r3, [r7, #96]	; 0x60
 80048fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048fc:	fa93 f3a3 	rbit	r3, r3
 8004900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004902:	4b67      	ldr	r3, [pc, #412]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800490a:	65ba      	str	r2, [r7, #88]	; 0x58
 800490c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800490e:	fa92 f2a2 	rbit	r2, r2
 8004912:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004916:	fab2 f282 	clz	r2, r2
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	f042 0220 	orr.w	r2, r2, #32
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	f002 021f 	and.w	r2, r2, #31
 8004926:	2101      	movs	r1, #1
 8004928:	fa01 f202 	lsl.w	r2, r1, r2
 800492c:	4013      	ands	r3, r2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d17b      	bne.n	8004a2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e0f3      	b.n	8004b1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d13c      	bne.n	80049b8 <HAL_RCC_ClockConfig+0x178>
 800493e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004942:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800494c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b01      	cmp	r3, #1
 8004960:	d102      	bne.n	8004968 <HAL_RCC_ClockConfig+0x128>
 8004962:	4b4f      	ldr	r3, [pc, #316]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	e00f      	b.n	8004988 <HAL_RCC_ClockConfig+0x148>
 8004968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800496c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004970:	fa93 f3a3 	rbit	r3, r3
 8004974:	647b      	str	r3, [r7, #68]	; 0x44
 8004976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800497a:	643b      	str	r3, [r7, #64]	; 0x40
 800497c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004984:	4b46      	ldr	r3, [pc, #280]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800498c:	63ba      	str	r2, [r7, #56]	; 0x38
 800498e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004990:	fa92 f2a2 	rbit	r2, r2
 8004994:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004998:	fab2 f282 	clz	r2, r2
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	f042 0220 	orr.w	r2, r2, #32
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	f002 021f 	and.w	r2, r2, #31
 80049a8:	2101      	movs	r1, #1
 80049aa:	fa01 f202 	lsl.w	r2, r1, r2
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d13a      	bne.n	8004a2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0b2      	b.n	8004b1e <HAL_RCC_ClockConfig+0x2de>
 80049b8:	2302      	movs	r3, #2
 80049ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	fa93 f3a3 	rbit	r3, r3
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c6:	fab3 f383 	clz	r3, r3
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	095b      	lsrs	r3, r3, #5
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d102      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x1a0>
 80049da:	4b31      	ldr	r3, [pc, #196]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	e00d      	b.n	80049fc <HAL_RCC_ClockConfig+0x1bc>
 80049e0:	2302      	movs	r3, #2
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
 80049ec:	2302      	movs	r3, #2
 80049ee:	623b      	str	r3, [r7, #32]
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	fa93 f3a3 	rbit	r3, r3
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	4b29      	ldr	r3, [pc, #164]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2202      	movs	r2, #2
 80049fe:	61ba      	str	r2, [r7, #24]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	fa92 f2a2 	rbit	r2, r2
 8004a06:	617a      	str	r2, [r7, #20]
  return result;
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	fab2 f282 	clz	r2, r2
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	f042 0220 	orr.w	r2, r2, #32
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	f002 021f 	and.w	r2, r2, #31
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e079      	b.n	8004b1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f023 0203 	bic.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	491a      	ldr	r1, [pc, #104]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a3c:	f7fe fc9e 	bl	800337c <HAL_GetTick>
 8004a40:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	e00a      	b.n	8004a5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a44:	f7fe fc9a 	bl	800337c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e061      	b.n	8004b1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 020c 	and.w	r2, r3, #12
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d1eb      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d214      	bcs.n	8004aa4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 0207 	bic.w	r2, r3, #7
 8004a82:	4906      	ldr	r1, [pc, #24]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e040      	b.n	8004b1e <HAL_RCC_ClockConfig+0x2de>
 8004a9c:	40022000 	.word	0x40022000
 8004aa0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_RCC_ClockConfig+0x2e8>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	491a      	ldr	r1, [pc, #104]	; (8004b28 <HAL_RCC_ClockConfig+0x2e8>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ace:	4b16      	ldr	r3, [pc, #88]	; (8004b28 <HAL_RCC_ClockConfig+0x2e8>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4912      	ldr	r1, [pc, #72]	; (8004b28 <HAL_RCC_ClockConfig+0x2e8>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ae2:	f000 f829 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8004ae6:	4601      	mov	r1, r0
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <HAL_RCC_ClockConfig+0x2e8>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af0:	22f0      	movs	r2, #240	; 0xf0
 8004af2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	fa92 f2a2 	rbit	r2, r2
 8004afa:	60fa      	str	r2, [r7, #12]
  return result;
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	fab2 f282 	clz	r2, r2
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	40d3      	lsrs	r3, r2
 8004b06:	4a09      	ldr	r2, [pc, #36]	; (8004b2c <HAL_RCC_ClockConfig+0x2ec>)
 8004b08:	5cd3      	ldrb	r3, [r2, r3]
 8004b0a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b0e:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <HAL_RCC_ClockConfig+0x2f0>)
 8004b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b12:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <HAL_RCC_ClockConfig+0x2f4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe fbec 	bl	80032f4 <HAL_InitTick>
  
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3778      	adds	r7, #120	; 0x78
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	08009aa4 	.word	0x08009aa4
 8004b30:	20000000 	.word	0x20000000
 8004b34:	20000004 	.word	0x20000004

08004b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b08b      	sub	sp, #44	; 0x2c
 8004b3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
 8004b42:	2300      	movs	r3, #0
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	2300      	movs	r3, #0
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004b52:	4b29      	ldr	r3, [pc, #164]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d002      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x30>
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d003      	beq.n	8004b6e <HAL_RCC_GetSysClockFreq+0x36>
 8004b66:	e03c      	b.n	8004be2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b68:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b6a:	623b      	str	r3, [r7, #32]
      break;
 8004b6c:	e03c      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004b74:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004b78:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	fa92 f2a2 	rbit	r2, r2
 8004b80:	607a      	str	r2, [r7, #4]
  return result;
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	fab2 f282 	clz	r2, r2
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	40d3      	lsrs	r3, r2
 8004b8c:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b8e:	5cd3      	ldrb	r3, [r2, r3]
 8004b90:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004b92:	4b19      	ldr	r3, [pc, #100]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	220f      	movs	r2, #15
 8004b9c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	fa92 f2a2 	rbit	r2, r2
 8004ba4:	60fa      	str	r2, [r7, #12]
  return result;
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	fab2 f282 	clz	r2, r2
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	40d3      	lsrs	r3, r2
 8004bb0:	4a14      	ldr	r2, [pc, #80]	; (8004c04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bb2:	5cd3      	ldrb	r3, [r2, r3]
 8004bb4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004bc0:	4a0e      	ldr	r2, [pc, #56]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd0:	e004      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	4a0c      	ldr	r2, [pc, #48]	; (8004c08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	623b      	str	r3, [r7, #32]
      break;
 8004be0:	e002      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004be4:	623b      	str	r3, [r7, #32]
      break;
 8004be6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004be8:	6a3b      	ldr	r3, [r7, #32]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	372c      	adds	r7, #44	; 0x2c
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	007a1200 	.word	0x007a1200
 8004c00:	08009abc 	.word	0x08009abc
 8004c04:	08009acc 	.word	0x08009acc
 8004c08:	003d0900 	.word	0x003d0900

08004c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000000 	.word	0x20000000

08004c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004c2a:	f7ff ffef 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c2e:	4601      	mov	r1, r0
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c38:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004c3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	fa92 f2a2 	rbit	r2, r2
 8004c44:	603a      	str	r2, [r7, #0]
  return result;
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	fab2 f282 	clz	r2, r2
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	40d3      	lsrs	r3, r2
 8004c50:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004c52:	5cd3      	ldrb	r3, [r2, r3]
 8004c54:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40021000 	.word	0x40021000
 8004c64:	08009ab4 	.word	0x08009ab4

08004c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004c6e:	f7ff ffcd 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c72:	4601      	mov	r1, r0
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004c7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004c80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	fa92 f2a2 	rbit	r2, r2
 8004c88:	603a      	str	r2, [r7, #0]
  return result;
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	fab2 f282 	clz	r2, r2
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	40d3      	lsrs	r3, r2
 8004c94:	4a04      	ldr	r2, [pc, #16]	; (8004ca8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c96:	5cd3      	ldrb	r3, [r2, r3]
 8004c98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	08009ab4 	.word	0x08009ab4

08004cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e049      	b.n	8004d52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fd ff10 	bl	8002af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4610      	mov	r0, r2
 8004cec:	f000 fd04 	bl	80056f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e049      	b.n	8004e00 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7fd fe85 	bl	8002a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f000 fcad 	bl	80056f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d109      	bne.n	8004e2c <HAL_TIM_PWM_Start+0x24>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	bf14      	ite	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	2300      	moveq	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	e03c      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x9e>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d109      	bne.n	8004e46 <HAL_TIM_PWM_Start+0x3e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	bf14      	ite	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	2300      	moveq	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	e02f      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x9e>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d109      	bne.n	8004e60 <HAL_TIM_PWM_Start+0x58>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	bf14      	ite	ne
 8004e58:	2301      	movne	r3, #1
 8004e5a:	2300      	moveq	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	e022      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x9e>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b0c      	cmp	r3, #12
 8004e64:	d109      	bne.n	8004e7a <HAL_TIM_PWM_Start+0x72>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	bf14      	ite	ne
 8004e72:	2301      	movne	r3, #1
 8004e74:	2300      	moveq	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	e015      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x9e>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d109      	bne.n	8004e94 <HAL_TIM_PWM_Start+0x8c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	bf14      	ite	ne
 8004e8c:	2301      	movne	r3, #1
 8004e8e:	2300      	moveq	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	e008      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x9e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	bf14      	ite	ne
 8004ea0:	2301      	movne	r3, #1
 8004ea2:	2300      	moveq	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e088      	b.n	8004fc0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d104      	bne.n	8004ebe <HAL_TIM_PWM_Start+0xb6>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ebc:	e023      	b.n	8004f06 <HAL_TIM_PWM_Start+0xfe>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d104      	bne.n	8004ece <HAL_TIM_PWM_Start+0xc6>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ecc:	e01b      	b.n	8004f06 <HAL_TIM_PWM_Start+0xfe>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_PWM_Start+0xd6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004edc:	e013      	b.n	8004f06 <HAL_TIM_PWM_Start+0xfe>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b0c      	cmp	r3, #12
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_PWM_Start+0xe6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eec:	e00b      	b.n	8004f06 <HAL_TIM_PWM_Start+0xfe>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d104      	bne.n	8004efe <HAL_TIM_PWM_Start+0xf6>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004efc:	e003      	b.n	8004f06 <HAL_TIM_PWM_Start+0xfe>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 ff10 	bl	8005d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <HAL_TIM_PWM_Start+0x1c0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00e      	beq.n	8004f3c <HAL_TIM_PWM_Start+0x134>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2a      	ldr	r2, [pc, #168]	; (8004fcc <HAL_TIM_PWM_Start+0x1c4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d009      	beq.n	8004f3c <HAL_TIM_PWM_Start+0x134>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <HAL_TIM_PWM_Start+0x1c8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_TIM_PWM_Start+0x134>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a27      	ldr	r2, [pc, #156]	; (8004fd4 <HAL_TIM_PWM_Start+0x1cc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d101      	bne.n	8004f40 <HAL_TIM_PWM_Start+0x138>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <HAL_TIM_PWM_Start+0x13a>
 8004f40:	2300      	movs	r3, #0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <HAL_TIM_PWM_Start+0x1c0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00e      	beq.n	8004f7e <HAL_TIM_PWM_Start+0x176>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d009      	beq.n	8004f7e <HAL_TIM_PWM_Start+0x176>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1a      	ldr	r2, [pc, #104]	; (8004fd8 <HAL_TIM_PWM_Start+0x1d0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d004      	beq.n	8004f7e <HAL_TIM_PWM_Start+0x176>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <HAL_TIM_PWM_Start+0x1c4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d115      	bne.n	8004faa <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	4b15      	ldr	r3, [pc, #84]	; (8004fdc <HAL_TIM_PWM_Start+0x1d4>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b06      	cmp	r3, #6
 8004f8e:	d015      	beq.n	8004fbc <HAL_TIM_PWM_Start+0x1b4>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f96:	d011      	beq.n	8004fbc <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa8:	e008      	b.n	8004fbc <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0201 	orr.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e000      	b.n	8004fbe <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40014400 	.word	0x40014400
 8004fd4:	40014800 	.word	0x40014800
 8004fd8:	40000400 	.word	0x40000400
 8004fdc:	00010007 	.word	0x00010007

08004fe0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e097      	b.n	8005124 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7fd fd01 	bl	8002a10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2202      	movs	r2, #2
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005024:	f023 0307 	bic.w	r3, r3, #7
 8005028:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3304      	adds	r3, #4
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f000 fb5f 	bl	80056f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	4313      	orrs	r3, r2
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005080:	f023 030c 	bic.w	r3, r3, #12
 8005084:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800508c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	4313      	orrs	r3, r2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	011a      	lsls	r2, r3, #4
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	031b      	lsls	r3, r3, #12
 80050b0:	4313      	orrs	r3, r2
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80050be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	4313      	orrs	r3, r2
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800513c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005144:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800514c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005154:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d110      	bne.n	800517e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d102      	bne.n	8005168 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005162:	7b7b      	ldrb	r3, [r7, #13]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d001      	beq.n	800516c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e069      	b.n	8005240 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800517c:	e031      	b.n	80051e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d110      	bne.n	80051a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d102      	bne.n	8005190 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800518a:	7b3b      	ldrb	r3, [r7, #12]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d001      	beq.n	8005194 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e055      	b.n	8005240 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a4:	e01d      	b.n	80051e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d108      	bne.n	80051be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051ac:	7bbb      	ldrb	r3, [r7, #14]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d105      	bne.n	80051be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051b2:	7b7b      	ldrb	r3, [r7, #13]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d102      	bne.n	80051be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051b8:	7b3b      	ldrb	r3, [r7, #12]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d001      	beq.n	80051c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e03e      	b.n	8005240 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_TIM_Encoder_Start+0xc4>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d008      	beq.n	8005200 <HAL_TIM_Encoder_Start+0xd4>
 80051ee:	e00f      	b.n	8005210 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2201      	movs	r2, #1
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fd9b 	bl	8005d34 <TIM_CCxChannelCmd>
      break;
 80051fe:	e016      	b.n	800522e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2201      	movs	r2, #1
 8005206:	2104      	movs	r1, #4
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fd93 	bl	8005d34 <TIM_CCxChannelCmd>
      break;
 800520e:	e00e      	b.n	800522e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2201      	movs	r2, #1
 8005216:	2100      	movs	r1, #0
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fd8b 	bl	8005d34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2201      	movs	r2, #1
 8005224:	2104      	movs	r1, #4
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fd84 	bl	8005d34 <TIM_CCxChannelCmd>
      break;
 800522c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0201 	orr.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b02      	cmp	r3, #2
 800525c:	d122      	bne.n	80052a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b02      	cmp	r3, #2
 800526a:	d11b      	bne.n	80052a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0202 	mvn.w	r2, #2
 8005274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fa16 	bl	80056bc <HAL_TIM_IC_CaptureCallback>
 8005290:	e005      	b.n	800529e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa08 	bl	80056a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fa19 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d122      	bne.n	80052f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d11b      	bne.n	80052f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0204 	mvn.w	r2, #4
 80052c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2202      	movs	r2, #2
 80052ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f9ec 	bl	80056bc <HAL_TIM_IC_CaptureCallback>
 80052e4:	e005      	b.n	80052f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f9de 	bl	80056a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f9ef 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b08      	cmp	r3, #8
 8005304:	d122      	bne.n	800534c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b08      	cmp	r3, #8
 8005312:	d11b      	bne.n	800534c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0208 	mvn.w	r2, #8
 800531c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2204      	movs	r2, #4
 8005322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9c2 	bl	80056bc <HAL_TIM_IC_CaptureCallback>
 8005338:	e005      	b.n	8005346 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f9b4 	bl	80056a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f9c5 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0310 	and.w	r3, r3, #16
 8005356:	2b10      	cmp	r3, #16
 8005358:	d122      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	2b10      	cmp	r3, #16
 8005366:	d11b      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0210 	mvn.w	r2, #16
 8005370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2208      	movs	r2, #8
 8005376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f998 	bl	80056bc <HAL_TIM_IC_CaptureCallback>
 800538c:	e005      	b.n	800539a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f98a 	bl	80056a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f99b 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d10e      	bne.n	80053cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d107      	bne.n	80053cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0201 	mvn.w	r2, #1
 80053c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fb ffe4 	bl	8001394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d6:	2b80      	cmp	r3, #128	; 0x80
 80053d8:	d10e      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e4:	2b80      	cmp	r3, #128	; 0x80
 80053e6:	d107      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fdb4 	bl	8005f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005406:	d10e      	bne.n	8005426 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005412:	2b80      	cmp	r3, #128	; 0x80
 8005414:	d107      	bne.n	8005426 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800541e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fda7 	bl	8005f74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005430:	2b40      	cmp	r3, #64	; 0x40
 8005432:	d10e      	bne.n	8005452 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b40      	cmp	r3, #64	; 0x40
 8005440:	d107      	bne.n	8005452 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800544a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f949 	bl	80056e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b20      	cmp	r3, #32
 800545e:	d10e      	bne.n	800547e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b20      	cmp	r3, #32
 800546c:	d107      	bne.n	800547e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f06f 0220 	mvn.w	r2, #32
 8005476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fd67 	bl	8005f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800549e:	2302      	movs	r3, #2
 80054a0:	e0fd      	b.n	800569e <HAL_TIM_PWM_ConfigChannel+0x216>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b14      	cmp	r3, #20
 80054ae:	f200 80f0 	bhi.w	8005692 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	0800550d 	.word	0x0800550d
 80054bc:	08005693 	.word	0x08005693
 80054c0:	08005693 	.word	0x08005693
 80054c4:	08005693 	.word	0x08005693
 80054c8:	0800554d 	.word	0x0800554d
 80054cc:	08005693 	.word	0x08005693
 80054d0:	08005693 	.word	0x08005693
 80054d4:	08005693 	.word	0x08005693
 80054d8:	0800558f 	.word	0x0800558f
 80054dc:	08005693 	.word	0x08005693
 80054e0:	08005693 	.word	0x08005693
 80054e4:	08005693 	.word	0x08005693
 80054e8:	080055cf 	.word	0x080055cf
 80054ec:	08005693 	.word	0x08005693
 80054f0:	08005693 	.word	0x08005693
 80054f4:	08005693 	.word	0x08005693
 80054f8:	08005611 	.word	0x08005611
 80054fc:	08005693 	.word	0x08005693
 8005500:	08005693 	.word	0x08005693
 8005504:	08005693 	.word	0x08005693
 8005508:	08005651 	.word	0x08005651
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f968 	bl	80057e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0208 	orr.w	r2, r2, #8
 8005526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0204 	bic.w	r2, r2, #4
 8005536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6999      	ldr	r1, [r3, #24]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	619a      	str	r2, [r3, #24]
      break;
 800554a:	e0a3      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f9ce 	bl	80058f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	021a      	lsls	r2, r3, #8
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	619a      	str	r2, [r3, #24]
      break;
 800558c:	e082      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fa2d 	bl	80059f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0208 	orr.w	r2, r2, #8
 80055a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0204 	bic.w	r2, r2, #4
 80055b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69d9      	ldr	r1, [r3, #28]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	61da      	str	r2, [r3, #28]
      break;
 80055cc:	e062      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fa8b 	bl	8005af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69d9      	ldr	r1, [r3, #28]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	61da      	str	r2, [r3, #28]
      break;
 800560e:	e041      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 face 	bl	8005bb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0208 	orr.w	r2, r2, #8
 800562a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0204 	bic.w	r2, r2, #4
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800564e:	e021      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fb0c 	bl	8005c74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	021a      	lsls	r2, r3, #8
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005690:	e000      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8005692:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop

080056a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a32      	ldr	r2, [pc, #200]	; (80057d4 <TIM_Base_SetConfig+0xdc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_Base_SetConfig+0x28>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005716:	d003      	beq.n	8005720 <TIM_Base_SetConfig+0x28>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a2f      	ldr	r2, [pc, #188]	; (80057d8 <TIM_Base_SetConfig+0xe0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d108      	bne.n	8005732 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a27      	ldr	r2, [pc, #156]	; (80057d4 <TIM_Base_SetConfig+0xdc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <TIM_Base_SetConfig+0x6a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005740:	d00f      	beq.n	8005762 <TIM_Base_SetConfig+0x6a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a24      	ldr	r2, [pc, #144]	; (80057d8 <TIM_Base_SetConfig+0xe0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00b      	beq.n	8005762 <TIM_Base_SetConfig+0x6a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a23      	ldr	r2, [pc, #140]	; (80057dc <TIM_Base_SetConfig+0xe4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d007      	beq.n	8005762 <TIM_Base_SetConfig+0x6a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a22      	ldr	r2, [pc, #136]	; (80057e0 <TIM_Base_SetConfig+0xe8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_Base_SetConfig+0x6a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a21      	ldr	r2, [pc, #132]	; (80057e4 <TIM_Base_SetConfig+0xec>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d108      	bne.n	8005774 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a0e      	ldr	r2, [pc, #56]	; (80057d4 <TIM_Base_SetConfig+0xdc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00b      	beq.n	80057b8 <TIM_Base_SetConfig+0xc0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a0e      	ldr	r2, [pc, #56]	; (80057dc <TIM_Base_SetConfig+0xe4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d007      	beq.n	80057b8 <TIM_Base_SetConfig+0xc0>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a0d      	ldr	r2, [pc, #52]	; (80057e0 <TIM_Base_SetConfig+0xe8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_Base_SetConfig+0xc0>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a0c      	ldr	r2, [pc, #48]	; (80057e4 <TIM_Base_SetConfig+0xec>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d103      	bne.n	80057c0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	615a      	str	r2, [r3, #20]
}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40012c00 	.word	0x40012c00
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40014000 	.word	0x40014000
 80057e0:	40014400 	.word	0x40014400
 80057e4:	40014800 	.word	0x40014800

080057e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f023 0201 	bic.w	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f023 0302 	bic.w	r3, r3, #2
 8005834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a28      	ldr	r2, [pc, #160]	; (80058e4 <TIM_OC1_SetConfig+0xfc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00b      	beq.n	8005860 <TIM_OC1_SetConfig+0x78>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <TIM_OC1_SetConfig+0x100>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_OC1_SetConfig+0x78>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a26      	ldr	r2, [pc, #152]	; (80058ec <TIM_OC1_SetConfig+0x104>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_OC1_SetConfig+0x78>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a25      	ldr	r2, [pc, #148]	; (80058f0 <TIM_OC1_SetConfig+0x108>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d10c      	bne.n	800587a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f023 0308 	bic.w	r3, r3, #8
 8005866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f023 0304 	bic.w	r3, r3, #4
 8005878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <TIM_OC1_SetConfig+0xfc>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00b      	beq.n	800589a <TIM_OC1_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <TIM_OC1_SetConfig+0x100>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <TIM_OC1_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a17      	ldr	r2, [pc, #92]	; (80058ec <TIM_OC1_SetConfig+0x104>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_OC1_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a16      	ldr	r2, [pc, #88]	; (80058f0 <TIM_OC1_SetConfig+0x108>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d111      	bne.n	80058be <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	621a      	str	r2, [r3, #32]
}
 80058d8:	bf00      	nop
 80058da:	371c      	adds	r7, #28
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	40012c00 	.word	0x40012c00
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40014400 	.word	0x40014400
 80058f0:	40014800 	.word	0x40014800

080058f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f023 0210 	bic.w	r2, r3, #16
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f023 0320 	bic.w	r3, r3, #32
 8005942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a24      	ldr	r2, [pc, #144]	; (80059e4 <TIM_OC2_SetConfig+0xf0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d10d      	bne.n	8005974 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <TIM_OC2_SetConfig+0xf0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00b      	beq.n	8005994 <TIM_OC2_SetConfig+0xa0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a1a      	ldr	r2, [pc, #104]	; (80059e8 <TIM_OC2_SetConfig+0xf4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d007      	beq.n	8005994 <TIM_OC2_SetConfig+0xa0>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a19      	ldr	r2, [pc, #100]	; (80059ec <TIM_OC2_SetConfig+0xf8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_OC2_SetConfig+0xa0>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a18      	ldr	r2, [pc, #96]	; (80059f0 <TIM_OC2_SetConfig+0xfc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d113      	bne.n	80059bc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800599a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40012c00 	.word	0x40012c00
 80059e8:	40014000 	.word	0x40014000
 80059ec:	40014400 	.word	0x40014400
 80059f0:	40014800 	.word	0x40014800

080059f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a23      	ldr	r2, [pc, #140]	; (8005ae0 <TIM_OC3_SetConfig+0xec>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d10d      	bne.n	8005a72 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a70:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <TIM_OC3_SetConfig+0xec>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00b      	beq.n	8005a92 <TIM_OC3_SetConfig+0x9e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a19      	ldr	r2, [pc, #100]	; (8005ae4 <TIM_OC3_SetConfig+0xf0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d007      	beq.n	8005a92 <TIM_OC3_SetConfig+0x9e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <TIM_OC3_SetConfig+0xf4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_OC3_SetConfig+0x9e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a17      	ldr	r2, [pc, #92]	; (8005aec <TIM_OC3_SetConfig+0xf8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d113      	bne.n	8005aba <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	621a      	str	r2, [r3, #32]
}
 8005ad4:	bf00      	nop
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800

08005af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	031b      	lsls	r3, r3, #12
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <TIM_OC4_SetConfig+0xb8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00b      	beq.n	8005b6c <TIM_OC4_SetConfig+0x7c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a15      	ldr	r2, [pc, #84]	; (8005bac <TIM_OC4_SetConfig+0xbc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d007      	beq.n	8005b6c <TIM_OC4_SetConfig+0x7c>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a14      	ldr	r2, [pc, #80]	; (8005bb0 <TIM_OC4_SetConfig+0xc0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_OC4_SetConfig+0x7c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a13      	ldr	r2, [pc, #76]	; (8005bb4 <TIM_OC4_SetConfig+0xc4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d109      	bne.n	8005b80 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	019b      	lsls	r3, r3, #6
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40014400 	.word	0x40014400
 8005bb4:	40014800 	.word	0x40014800

08005bb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	041b      	lsls	r3, r3, #16
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a15      	ldr	r2, [pc, #84]	; (8005c64 <TIM_OC5_SetConfig+0xac>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00b      	beq.n	8005c2a <TIM_OC5_SetConfig+0x72>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a14      	ldr	r2, [pc, #80]	; (8005c68 <TIM_OC5_SetConfig+0xb0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d007      	beq.n	8005c2a <TIM_OC5_SetConfig+0x72>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <TIM_OC5_SetConfig+0xb4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_OC5_SetConfig+0x72>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a12      	ldr	r2, [pc, #72]	; (8005c70 <TIM_OC5_SetConfig+0xb8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d109      	bne.n	8005c3e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	621a      	str	r2, [r3, #32]
}
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	40012c00 	.word	0x40012c00
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	40014400 	.word	0x40014400
 8005c70:	40014800 	.word	0x40014800

08005c74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	051b      	lsls	r3, r3, #20
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <TIM_OC6_SetConfig+0xb0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_OC6_SetConfig+0x74>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <TIM_OC6_SetConfig+0xb4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <TIM_OC6_SetConfig+0x74>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <TIM_OC6_SetConfig+0xb8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_OC6_SetConfig+0x74>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a13      	ldr	r2, [pc, #76]	; (8005d30 <TIM_OC6_SetConfig+0xbc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d109      	bne.n	8005cfc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	029b      	lsls	r3, r3, #10
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	621a      	str	r2, [r3, #32]
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	40014400 	.word	0x40014400
 8005d30:	40014800 	.word	0x40014800

08005d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	2201      	movs	r2, #1
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a1a      	ldr	r2, [r3, #32]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	43db      	mvns	r3, r3
 8005d56:	401a      	ands	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1a      	ldr	r2, [r3, #32]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e054      	b.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a24      	ldr	r2, [pc, #144]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d108      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a17      	ldr	r2, [pc, #92]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00e      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e00:	d009      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d004      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a11      	ldr	r2, [pc, #68]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d10c      	bne.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40014000 	.word	0x40014000

08005e5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e060      	b.n	8005f3a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	041b      	lsls	r3, r3, #16
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a14      	ldr	r2, [pc, #80]	; (8005f48 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d115      	bne.n	8005f28 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	051b      	lsls	r3, r3, #20
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40012c00 	.word	0x40012c00

08005f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e040      	b.n	800601c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fc feca 	bl	8002d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2224      	movs	r2, #36	; 0x24
 8005fb4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0201 	bic.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fbb8 	bl	800673c <UART_SetConfig>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e022      	b.n	800601c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fce2 	bl	80069a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fd69 	bl	8006aec <UART_CheckIdleState>
 800601a:	4603      	mov	r3, r0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	; 0x28
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006038:	2b20      	cmp	r3, #32
 800603a:	f040 80bf 	bne.w	80061bc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <HAL_UART_Receive+0x26>
 8006044:	88fb      	ldrh	r3, [r7, #6]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e0b7      	b.n	80061be <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_UART_Receive+0x38>
 8006058:	2302      	movs	r3, #2
 800605a:	e0b0      	b.n	80061be <HAL_UART_Receive+0x19a>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2222      	movs	r2, #34	; 0x22
 8006070:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006078:	f7fd f980 	bl	800337c <HAL_GetTick>
 800607c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	88fa      	ldrh	r2, [r7, #6]
 800608a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006096:	d10e      	bne.n	80060b6 <HAL_UART_Receive+0x92>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d105      	bne.n	80060ac <HAL_UART_Receive+0x88>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060aa:	e02d      	b.n	8006108 <HAL_UART_Receive+0xe4>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	22ff      	movs	r2, #255	; 0xff
 80060b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060b4:	e028      	b.n	8006108 <HAL_UART_Receive+0xe4>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10d      	bne.n	80060da <HAL_UART_Receive+0xb6>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d104      	bne.n	80060d0 <HAL_UART_Receive+0xac>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	22ff      	movs	r2, #255	; 0xff
 80060ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060ce:	e01b      	b.n	8006108 <HAL_UART_Receive+0xe4>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	227f      	movs	r2, #127	; 0x7f
 80060d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060d8:	e016      	b.n	8006108 <HAL_UART_Receive+0xe4>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060e2:	d10d      	bne.n	8006100 <HAL_UART_Receive+0xdc>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d104      	bne.n	80060f6 <HAL_UART_Receive+0xd2>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	227f      	movs	r2, #127	; 0x7f
 80060f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060f4:	e008      	b.n	8006108 <HAL_UART_Receive+0xe4>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	223f      	movs	r2, #63	; 0x3f
 80060fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060fe:	e003      	b.n	8006108 <HAL_UART_Receive+0xe4>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800610e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006118:	d108      	bne.n	800612c <HAL_UART_Receive+0x108>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d104      	bne.n	800612c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	e003      	b.n	8006134 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006130:	2300      	movs	r3, #0
 8006132:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800613c:	e033      	b.n	80061a6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2200      	movs	r2, #0
 8006146:	2120      	movs	r1, #32
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 fd18 	bl	8006b7e <UART_WaitOnFlagUntilTimeout>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e032      	b.n	80061be <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10c      	bne.n	8006178 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006164:	b29a      	uxth	r2, r3
 8006166:	8a7b      	ldrh	r3, [r7, #18]
 8006168:	4013      	ands	r3, r2
 800616a:	b29a      	uxth	r2, r3
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	3302      	adds	r3, #2
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	e00d      	b.n	8006194 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800617e:	b29b      	uxth	r3, r3
 8006180:	b2da      	uxtb	r2, r3
 8006182:	8a7b      	ldrh	r3, [r7, #18]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	4013      	ands	r3, r2
 8006188:	b2da      	uxtb	r2, r3
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	3301      	adds	r3, #1
 8006192:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1c5      	bne.n	800613e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e000      	b.n	80061be <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80061bc:	2302      	movs	r3, #2
  }
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d145      	bne.n	800626a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_UART_Transmit_IT+0x22>
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e03e      	b.n	800626c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <HAL_UART_Transmit_IT+0x34>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e037      	b.n	800626c <HAL_UART_Transmit_IT+0xa4>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	88fa      	ldrh	r2, [r7, #6]
 800620e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	88fa      	ldrh	r2, [r7, #6]
 8006216:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2221      	movs	r2, #33	; 0x21
 800622c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006236:	d107      	bne.n	8006248 <HAL_UART_Transmit_IT+0x80>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a0d      	ldr	r2, [pc, #52]	; (8006278 <HAL_UART_Transmit_IT+0xb0>)
 8006244:	669a      	str	r2, [r3, #104]	; 0x68
 8006246:	e002      	b.n	800624e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a0c      	ldr	r2, [pc, #48]	; (800627c <HAL_UART_Transmit_IT+0xb4>)
 800624c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006264:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	e000      	b.n	800626c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800626a:	2302      	movs	r3, #2
  }
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	08006e87 	.word	0x08006e87
 800627c:	08006e13 	.word	0x08006e13

08006280 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006292:	2b20      	cmp	r3, #32
 8006294:	d12c      	bne.n	80062f0 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <HAL_UART_Receive_IT+0x22>
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e025      	b.n	80062f2 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_UART_Receive_IT+0x34>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e01e      	b.n	80062f2 <HAL_UART_Receive_IT+0x72>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80062de:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80062e0:	88fb      	ldrh	r3, [r7, #6]
 80062e2:	461a      	mov	r2, r3
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fcc6 	bl	8006c78 <UART_Start_Receive_IT>
 80062ec:	4603      	mov	r3, r0
 80062ee:	e000      	b.n	80062f2 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80062f0:	2302      	movs	r3, #2
  }
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006322:	4013      	ands	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d113      	bne.n	8006354 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00e      	beq.n	8006354 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b00      	cmp	r3, #0
 800633e:	d009      	beq.n	8006354 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 81cc 	beq.w	80066e2 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
      }
      return;
 8006352:	e1c6      	b.n	80066e2 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80e3 	beq.w	8006522 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	4ba5      	ldr	r3, [pc, #660]	; (8006600 <HAL_UART_IRQHandler+0x304>)
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80d8 	beq.w	8006522 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d010      	beq.n	800639e <HAL_UART_IRQHandler+0xa2>
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00b      	beq.n	800639e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2201      	movs	r2, #1
 800638c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006394:	f043 0201 	orr.w	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d010      	beq.n	80063ca <HAL_UART_IRQHandler+0xce>
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00b      	beq.n	80063ca <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2202      	movs	r2, #2
 80063b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c0:	f043 0204 	orr.w	r2, r3, #4
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d010      	beq.n	80063f6 <HAL_UART_IRQHandler+0xfa>
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00b      	beq.n	80063f6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2204      	movs	r2, #4
 80063e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ec:	f043 0202 	orr.w	r2, r3, #2
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d015      	beq.n	800642c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d104      	bne.n	8006414 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2208      	movs	r2, #8
 800641a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006422:	f043 0208 	orr.w	r2, r3, #8
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006432:	2b00      	cmp	r3, #0
 8006434:	d011      	beq.n	800645a <HAL_UART_IRQHandler+0x15e>
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00c      	beq.n	800645a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006448:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006450:	f043 0220 	orr.w	r2, r3, #32
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8140 	beq.w	80066e6 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00c      	beq.n	800648a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006490:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	d004      	beq.n	80064aa <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d031      	beq.n	800650e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fc6c 	bl	8006d88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d123      	bne.n	8006506 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d013      	beq.n	80064fe <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	4a4a      	ldr	r2, [pc, #296]	; (8006604 <HAL_UART_IRQHandler+0x308>)
 80064dc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fd f8c4 	bl	8003670 <HAL_DMA_Abort_IT>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d017      	beq.n	800651e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80064f8:	4610      	mov	r0, r2
 80064fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fc:	e00f      	b.n	800651e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f906 	bl	8006710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	e00b      	b.n	800651e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f902 	bl	8006710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650c:	e007      	b.n	800651e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8fe 	bl	8006710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800651c:	e0e3      	b.n	80066e6 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800651e:	bf00      	nop
    return;
 8006520:	e0e1      	b.n	80066e6 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006526:	2b01      	cmp	r3, #1
 8006528:	f040 80a7 	bne.w	800667a <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 80a1 	beq.w	800667a <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 809b 	beq.w	800667a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2210      	movs	r2, #16
 800654a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	d156      	bne.n	8006608 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006564:	893b      	ldrh	r3, [r7, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80bf 	beq.w	80066ea <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006572:	893a      	ldrh	r2, [r7, #8]
 8006574:	429a      	cmp	r2, r3
 8006576:	f080 80b8 	bcs.w	80066ea <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	893a      	ldrh	r2, [r7, #8]
 800657e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b20      	cmp	r3, #32
 800658a:	d02a      	beq.n	80065e2 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800659a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 0201 	bic.w	r2, r2, #1
 80065aa:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ba:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0210 	bic.w	r2, r2, #16
 80065d6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fd f80e 	bl	80035fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f894 	bl	8006724 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80065fc:	e075      	b.n	80066ea <HAL_UART_IRQHandler+0x3ee>
 80065fe:	bf00      	nop
 8006600:	04000120 	.word	0x04000120
 8006604:	08006de7 	.word	0x08006de7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006614:	b29b      	uxth	r3, r3
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d063      	beq.n	80066ee <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8006626:	897b      	ldrh	r3, [r7, #10]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d060      	beq.n	80066ee <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800663a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0210 	bic.w	r2, r2, #16
 800666c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800666e:	897b      	ldrh	r3, [r7, #10]
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f856 	bl	8006724 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006678:	e039      	b.n	80066ee <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00d      	beq.n	80066a0 <HAL_UART_IRQHandler+0x3a4>
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d008      	beq.n	80066a0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006696:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fd1f 	bl	80070dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800669e:	e029      	b.n	80066f4 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00d      	beq.n	80066c6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01a      	beq.n	80066f2 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	4798      	blx	r3
    }
    return;
 80066c4:	e015      	b.n	80066f2 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d011      	beq.n	80066f4 <HAL_UART_IRQHandler+0x3f8>
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00c      	beq.n	80066f4 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fc11 	bl	8006f02 <UART_EndTransmit_IT>
    return;
 80066e0:	e008      	b.n	80066f4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80066e2:	bf00      	nop
 80066e4:	e006      	b.n	80066f4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80066e6:	bf00      	nop
 80066e8:	e004      	b.n	80066f4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80066ea:	bf00      	nop
 80066ec:	e002      	b.n	80066f4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80066f2:	bf00      	nop
  }

}
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop

080066fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	4b8a      	ldr	r3, [pc, #552]	; (8006990 <UART_SetConfig+0x254>)
 8006768:	4013      	ands	r3, r2
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6812      	ldr	r2, [r2, #0]
 800676e:	6979      	ldr	r1, [r7, #20]
 8006770:	430b      	orrs	r3, r1
 8006772:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a78      	ldr	r2, [pc, #480]	; (8006994 <UART_SetConfig+0x258>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d120      	bne.n	80067fa <UART_SetConfig+0xbe>
 80067b8:	4b77      	ldr	r3, [pc, #476]	; (8006998 <UART_SetConfig+0x25c>)
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d817      	bhi.n	80067f4 <UART_SetConfig+0xb8>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <UART_SetConfig+0x90>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	080067dd 	.word	0x080067dd
 80067d0:	080067e9 	.word	0x080067e9
 80067d4:	080067ef 	.word	0x080067ef
 80067d8:	080067e3 	.word	0x080067e3
 80067dc:	2300      	movs	r3, #0
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e01d      	b.n	800681e <UART_SetConfig+0xe2>
 80067e2:	2302      	movs	r3, #2
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e01a      	b.n	800681e <UART_SetConfig+0xe2>
 80067e8:	2304      	movs	r3, #4
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e017      	b.n	800681e <UART_SetConfig+0xe2>
 80067ee:	2308      	movs	r3, #8
 80067f0:	77fb      	strb	r3, [r7, #31]
 80067f2:	e014      	b.n	800681e <UART_SetConfig+0xe2>
 80067f4:	2310      	movs	r3, #16
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e011      	b.n	800681e <UART_SetConfig+0xe2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a67      	ldr	r2, [pc, #412]	; (800699c <UART_SetConfig+0x260>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d102      	bne.n	800680a <UART_SetConfig+0xce>
 8006804:	2300      	movs	r3, #0
 8006806:	77fb      	strb	r3, [r7, #31]
 8006808:	e009      	b.n	800681e <UART_SetConfig+0xe2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a64      	ldr	r2, [pc, #400]	; (80069a0 <UART_SetConfig+0x264>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d102      	bne.n	800681a <UART_SetConfig+0xde>
 8006814:	2300      	movs	r3, #0
 8006816:	77fb      	strb	r3, [r7, #31]
 8006818:	e001      	b.n	800681e <UART_SetConfig+0xe2>
 800681a:	2310      	movs	r3, #16
 800681c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006826:	d15b      	bne.n	80068e0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006828:	7ffb      	ldrb	r3, [r7, #31]
 800682a:	2b08      	cmp	r3, #8
 800682c:	d827      	bhi.n	800687e <UART_SetConfig+0x142>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <UART_SetConfig+0xf8>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	08006859 	.word	0x08006859
 8006838:	08006861 	.word	0x08006861
 800683c:	08006869 	.word	0x08006869
 8006840:	0800687f 	.word	0x0800687f
 8006844:	0800686f 	.word	0x0800686f
 8006848:	0800687f 	.word	0x0800687f
 800684c:	0800687f 	.word	0x0800687f
 8006850:	0800687f 	.word	0x0800687f
 8006854:	08006877 	.word	0x08006877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006858:	f7fe f9e4 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 800685c:	61b8      	str	r0, [r7, #24]
        break;
 800685e:	e013      	b.n	8006888 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006860:	f7fe fa02 	bl	8004c68 <HAL_RCC_GetPCLK2Freq>
 8006864:	61b8      	str	r0, [r7, #24]
        break;
 8006866:	e00f      	b.n	8006888 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006868:	4b4e      	ldr	r3, [pc, #312]	; (80069a4 <UART_SetConfig+0x268>)
 800686a:	61bb      	str	r3, [r7, #24]
        break;
 800686c:	e00c      	b.n	8006888 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800686e:	f7fe f963 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8006872:	61b8      	str	r0, [r7, #24]
        break;
 8006874:	e008      	b.n	8006888 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800687a:	61bb      	str	r3, [r7, #24]
        break;
 800687c:	e004      	b.n	8006888 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	77bb      	strb	r3, [r7, #30]
        break;
 8006886:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d074      	beq.n	8006978 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	005a      	lsls	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	441a      	add	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b0f      	cmp	r3, #15
 80068aa:	d916      	bls.n	80068da <UART_SetConfig+0x19e>
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b2:	d212      	bcs.n	80068da <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	f023 030f 	bic.w	r3, r3, #15
 80068bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	085b      	lsrs	r3, r3, #1
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	89fb      	ldrh	r3, [r7, #14]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	89fa      	ldrh	r2, [r7, #14]
 80068d6:	60da      	str	r2, [r3, #12]
 80068d8:	e04e      	b.n	8006978 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	77bb      	strb	r3, [r7, #30]
 80068de:	e04b      	b.n	8006978 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d827      	bhi.n	8006936 <UART_SetConfig+0x1fa>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <UART_SetConfig+0x1b0>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006911 	.word	0x08006911
 80068f0:	08006919 	.word	0x08006919
 80068f4:	08006921 	.word	0x08006921
 80068f8:	08006937 	.word	0x08006937
 80068fc:	08006927 	.word	0x08006927
 8006900:	08006937 	.word	0x08006937
 8006904:	08006937 	.word	0x08006937
 8006908:	08006937 	.word	0x08006937
 800690c:	0800692f 	.word	0x0800692f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006910:	f7fe f988 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8006914:	61b8      	str	r0, [r7, #24]
        break;
 8006916:	e013      	b.n	8006940 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006918:	f7fe f9a6 	bl	8004c68 <HAL_RCC_GetPCLK2Freq>
 800691c:	61b8      	str	r0, [r7, #24]
        break;
 800691e:	e00f      	b.n	8006940 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006920:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <UART_SetConfig+0x268>)
 8006922:	61bb      	str	r3, [r7, #24]
        break;
 8006924:	e00c      	b.n	8006940 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006926:	f7fe f907 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 800692a:	61b8      	str	r0, [r7, #24]
        break;
 800692c:	e008      	b.n	8006940 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006932:	61bb      	str	r3, [r7, #24]
        break;
 8006934:	e004      	b.n	8006940 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	77bb      	strb	r3, [r7, #30]
        break;
 800693e:	bf00      	nop
    }

    if (pclk != 0U)
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d018      	beq.n	8006978 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	085a      	lsrs	r2, r3, #1
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	441a      	add	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	fbb2 f3f3 	udiv	r3, r2, r3
 8006958:	b29b      	uxth	r3, r3
 800695a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b0f      	cmp	r3, #15
 8006960:	d908      	bls.n	8006974 <UART_SetConfig+0x238>
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006968:	d204      	bcs.n	8006974 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	60da      	str	r2, [r3, #12]
 8006972:	e001      	b.n	8006978 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006984:	7fbb      	ldrb	r3, [r7, #30]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	efff69f3 	.word	0xefff69f3
 8006994:	40013800 	.word	0x40013800
 8006998:	40021000 	.word	0x40021000
 800699c:	40004400 	.word	0x40004400
 80069a0:	40004800 	.word	0x40004800
 80069a4:	007a1200 	.word	0x007a1200

080069a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01a      	beq.n	8006abe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aa6:	d10a      	bne.n	8006abe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	605a      	str	r2, [r3, #4]
  }
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006afc:	f7fc fc3e 	bl	800337c <HAL_GetTick>
 8006b00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d10e      	bne.n	8006b2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f82d 	bl	8006b7e <UART_WaitOnFlagUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e023      	b.n	8006b76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d10e      	bne.n	8006b5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f817 	bl	8006b7e <UART_WaitOnFlagUntilTimeout>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e00d      	b.n	8006b76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	603b      	str	r3, [r7, #0]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b8e:	e05e      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b96:	d05a      	beq.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b98:	f7fc fbf0 	bl	800337c <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d302      	bcc.n	8006bae <UART_WaitOnFlagUntilTimeout+0x30>
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d11b      	bne.n	8006be6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bbc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0201 	bic.w	r2, r2, #1
 8006bcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e043      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d02c      	beq.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c02:	d124      	bne.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c1c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0201 	bic.w	r2, r2, #1
 8006c2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2220      	movs	r2, #32
 8006c32:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e00f      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69da      	ldr	r2, [r3, #28]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4013      	ands	r3, r2
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	bf0c      	ite	eq
 8006c5e:	2301      	moveq	r3, #1
 8006c60:	2300      	movne	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d091      	beq.n	8006b90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	88fa      	ldrh	r2, [r7, #6]
 8006c90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006caa:	d10e      	bne.n	8006cca <UART_Start_Receive_IT+0x52>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d105      	bne.n	8006cc0 <UART_Start_Receive_IT+0x48>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006cba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cbe:	e02d      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	22ff      	movs	r2, #255	; 0xff
 8006cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cc8:	e028      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10d      	bne.n	8006cee <UART_Start_Receive_IT+0x76>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d104      	bne.n	8006ce4 <UART_Start_Receive_IT+0x6c>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	22ff      	movs	r2, #255	; 0xff
 8006cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ce2:	e01b      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	227f      	movs	r2, #127	; 0x7f
 8006ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cec:	e016      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf6:	d10d      	bne.n	8006d14 <UART_Start_Receive_IT+0x9c>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d104      	bne.n	8006d0a <UART_Start_Receive_IT+0x92>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	227f      	movs	r2, #127	; 0x7f
 8006d04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d08:	e008      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	223f      	movs	r2, #63	; 0x3f
 8006d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d12:	e003      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2222      	movs	r2, #34	; 0x22
 8006d28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f042 0201 	orr.w	r2, r2, #1
 8006d38:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d42:	d107      	bne.n	8006d54 <UART_Start_Receive_IT+0xdc>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d103      	bne.n	8006d54 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4a0c      	ldr	r2, [pc, #48]	; (8006d80 <UART_Start_Receive_IT+0x108>)
 8006d50:	665a      	str	r2, [r3, #100]	; 0x64
 8006d52:	e002      	b.n	8006d5a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4a0b      	ldr	r2, [pc, #44]	; (8006d84 <UART_Start_Receive_IT+0x10c>)
 8006d58:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006d70:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	08007009 	.word	0x08007009
 8006d84:	08006f35 	.word	0x08006f35

08006d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d9e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0201 	bic.w	r2, r2, #1
 8006dae:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d107      	bne.n	8006dc8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0210 	bic.w	r2, r2, #16
 8006dc6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7ff fc83 	bl	8006710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e1e:	2b21      	cmp	r3, #33	; 0x21
 8006e20:	d12b      	bne.n	8006e7a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d110      	bne.n	8006e50 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e3c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e4c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006e4e:	e014      	b.n	8006e7a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e54:	781a      	ldrb	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	b292      	uxth	r2, r2
 8006e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e92:	2b21      	cmp	r3, #33	; 0x21
 8006e94:	d12f      	bne.n	8006ef6 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d110      	bne.n	8006ec4 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006eb0:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ec0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006ec2:	e018      	b.n	8006ef6 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec8:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	881a      	ldrh	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ed6:	b292      	uxth	r2, r2
 8006ed8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ede:	1c9a      	adds	r2, r3, #2
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006ef6:	bf00      	nop
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f18:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff fbe8 	bl	80066fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f42:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f48:	2b22      	cmp	r3, #34	; 0x22
 8006f4a:	d151      	bne.n	8006ff0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f52:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f54:	89bb      	ldrh	r3, [r7, #12]
 8006f56:	b2d9      	uxtb	r1, r3
 8006f58:	89fb      	ldrh	r3, [r7, #14]
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f60:	400a      	ands	r2, r1
 8006f62:	b2d2      	uxtb	r2, r2
 8006f64:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d138      	bne.n	8007000 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f9c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0201 	bic.w	r2, r2, #1
 8006fac:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d10f      	bne.n	8006fe2 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0210 	bic.w	r2, r2, #16
 8006fd0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff fba2 	bl	8006724 <HAL_UARTEx_RxEventCallback>
 8006fe0:	e002      	b.n	8006fe8 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fa f828 	bl	8001038 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fee:	e007      	b.n	8007000 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699a      	ldr	r2, [r3, #24]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0208 	orr.w	r2, r2, #8
 8006ffe:	619a      	str	r2, [r3, #24]
}
 8007000:	bf00      	nop
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007016:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800701c:	2b22      	cmp	r3, #34	; 0x22
 800701e:	d151      	bne.n	80070c4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007026:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800702e:	89ba      	ldrh	r2, [r7, #12]
 8007030:	89fb      	ldrh	r3, [r7, #14]
 8007032:	4013      	ands	r3, r2
 8007034:	b29a      	uxth	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703e:	1c9a      	adds	r2, r3, #2
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800704a:	b29b      	uxth	r3, r3
 800704c:	3b01      	subs	r3, #1
 800704e:	b29a      	uxth	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800705c:	b29b      	uxth	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d138      	bne.n	80070d4 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007070:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0201 	bic.w	r2, r2, #1
 8007080:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007092:	2b01      	cmp	r3, #1
 8007094:	d10f      	bne.n	80070b6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0210 	bic.w	r2, r2, #16
 80070a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff fb38 	bl	8006724 <HAL_UARTEx_RxEventCallback>
 80070b4:	e002      	b.n	80070bc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7f9 ffbe 	bl	8001038 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070c2:	e007      	b.n	80070d4 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0208 	orr.w	r2, r2, #8
 80070d2:	619a      	str	r2, [r3, #24]
}
 80070d4:	bf00      	nop
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <__errno>:
 80070f0:	4b01      	ldr	r3, [pc, #4]	; (80070f8 <__errno+0x8>)
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	2000000c 	.word	0x2000000c

080070fc <__libc_init_array>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	4d0d      	ldr	r5, [pc, #52]	; (8007134 <__libc_init_array+0x38>)
 8007100:	4c0d      	ldr	r4, [pc, #52]	; (8007138 <__libc_init_array+0x3c>)
 8007102:	1b64      	subs	r4, r4, r5
 8007104:	10a4      	asrs	r4, r4, #2
 8007106:	2600      	movs	r6, #0
 8007108:	42a6      	cmp	r6, r4
 800710a:	d109      	bne.n	8007120 <__libc_init_array+0x24>
 800710c:	4d0b      	ldr	r5, [pc, #44]	; (800713c <__libc_init_array+0x40>)
 800710e:	4c0c      	ldr	r4, [pc, #48]	; (8007140 <__libc_init_array+0x44>)
 8007110:	f002 fc0c 	bl	800992c <_init>
 8007114:	1b64      	subs	r4, r4, r5
 8007116:	10a4      	asrs	r4, r4, #2
 8007118:	2600      	movs	r6, #0
 800711a:	42a6      	cmp	r6, r4
 800711c:	d105      	bne.n	800712a <__libc_init_array+0x2e>
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	f855 3b04 	ldr.w	r3, [r5], #4
 8007124:	4798      	blx	r3
 8007126:	3601      	adds	r6, #1
 8007128:	e7ee      	b.n	8007108 <__libc_init_array+0xc>
 800712a:	f855 3b04 	ldr.w	r3, [r5], #4
 800712e:	4798      	blx	r3
 8007130:	3601      	adds	r6, #1
 8007132:	e7f2      	b.n	800711a <__libc_init_array+0x1e>
 8007134:	08009d50 	.word	0x08009d50
 8007138:	08009d50 	.word	0x08009d50
 800713c:	08009d50 	.word	0x08009d50
 8007140:	08009d54 	.word	0x08009d54

08007144 <memcpy>:
 8007144:	440a      	add	r2, r1
 8007146:	4291      	cmp	r1, r2
 8007148:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800714c:	d100      	bne.n	8007150 <memcpy+0xc>
 800714e:	4770      	bx	lr
 8007150:	b510      	push	{r4, lr}
 8007152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800715a:	4291      	cmp	r1, r2
 800715c:	d1f9      	bne.n	8007152 <memcpy+0xe>
 800715e:	bd10      	pop	{r4, pc}

08007160 <memset>:
 8007160:	4402      	add	r2, r0
 8007162:	4603      	mov	r3, r0
 8007164:	4293      	cmp	r3, r2
 8007166:	d100      	bne.n	800716a <memset+0xa>
 8007168:	4770      	bx	lr
 800716a:	f803 1b01 	strb.w	r1, [r3], #1
 800716e:	e7f9      	b.n	8007164 <memset+0x4>

08007170 <iprintf>:
 8007170:	b40f      	push	{r0, r1, r2, r3}
 8007172:	4b0a      	ldr	r3, [pc, #40]	; (800719c <iprintf+0x2c>)
 8007174:	b513      	push	{r0, r1, r4, lr}
 8007176:	681c      	ldr	r4, [r3, #0]
 8007178:	b124      	cbz	r4, 8007184 <iprintf+0x14>
 800717a:	69a3      	ldr	r3, [r4, #24]
 800717c:	b913      	cbnz	r3, 8007184 <iprintf+0x14>
 800717e:	4620      	mov	r0, r4
 8007180:	f000 fa5e 	bl	8007640 <__sinit>
 8007184:	ab05      	add	r3, sp, #20
 8007186:	9a04      	ldr	r2, [sp, #16]
 8007188:	68a1      	ldr	r1, [r4, #8]
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	4620      	mov	r0, r4
 800718e:	f000 fc2f 	bl	80079f0 <_vfiprintf_r>
 8007192:	b002      	add	sp, #8
 8007194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007198:	b004      	add	sp, #16
 800719a:	4770      	bx	lr
 800719c:	2000000c 	.word	0x2000000c

080071a0 <_puts_r>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	460e      	mov	r6, r1
 80071a4:	4605      	mov	r5, r0
 80071a6:	b118      	cbz	r0, 80071b0 <_puts_r+0x10>
 80071a8:	6983      	ldr	r3, [r0, #24]
 80071aa:	b90b      	cbnz	r3, 80071b0 <_puts_r+0x10>
 80071ac:	f000 fa48 	bl	8007640 <__sinit>
 80071b0:	69ab      	ldr	r3, [r5, #24]
 80071b2:	68ac      	ldr	r4, [r5, #8]
 80071b4:	b913      	cbnz	r3, 80071bc <_puts_r+0x1c>
 80071b6:	4628      	mov	r0, r5
 80071b8:	f000 fa42 	bl	8007640 <__sinit>
 80071bc:	4b2c      	ldr	r3, [pc, #176]	; (8007270 <_puts_r+0xd0>)
 80071be:	429c      	cmp	r4, r3
 80071c0:	d120      	bne.n	8007204 <_puts_r+0x64>
 80071c2:	686c      	ldr	r4, [r5, #4]
 80071c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071c6:	07db      	lsls	r3, r3, #31
 80071c8:	d405      	bmi.n	80071d6 <_puts_r+0x36>
 80071ca:	89a3      	ldrh	r3, [r4, #12]
 80071cc:	0598      	lsls	r0, r3, #22
 80071ce:	d402      	bmi.n	80071d6 <_puts_r+0x36>
 80071d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071d2:	f000 fad3 	bl	800777c <__retarget_lock_acquire_recursive>
 80071d6:	89a3      	ldrh	r3, [r4, #12]
 80071d8:	0719      	lsls	r1, r3, #28
 80071da:	d51d      	bpl.n	8007218 <_puts_r+0x78>
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	b1db      	cbz	r3, 8007218 <_puts_r+0x78>
 80071e0:	3e01      	subs	r6, #1
 80071e2:	68a3      	ldr	r3, [r4, #8]
 80071e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071e8:	3b01      	subs	r3, #1
 80071ea:	60a3      	str	r3, [r4, #8]
 80071ec:	bb39      	cbnz	r1, 800723e <_puts_r+0x9e>
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	da38      	bge.n	8007264 <_puts_r+0xc4>
 80071f2:	4622      	mov	r2, r4
 80071f4:	210a      	movs	r1, #10
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 f848 	bl	800728c <__swbuf_r>
 80071fc:	3001      	adds	r0, #1
 80071fe:	d011      	beq.n	8007224 <_puts_r+0x84>
 8007200:	250a      	movs	r5, #10
 8007202:	e011      	b.n	8007228 <_puts_r+0x88>
 8007204:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <_puts_r+0xd4>)
 8007206:	429c      	cmp	r4, r3
 8007208:	d101      	bne.n	800720e <_puts_r+0x6e>
 800720a:	68ac      	ldr	r4, [r5, #8]
 800720c:	e7da      	b.n	80071c4 <_puts_r+0x24>
 800720e:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <_puts_r+0xd8>)
 8007210:	429c      	cmp	r4, r3
 8007212:	bf08      	it	eq
 8007214:	68ec      	ldreq	r4, [r5, #12]
 8007216:	e7d5      	b.n	80071c4 <_puts_r+0x24>
 8007218:	4621      	mov	r1, r4
 800721a:	4628      	mov	r0, r5
 800721c:	f000 f888 	bl	8007330 <__swsetup_r>
 8007220:	2800      	cmp	r0, #0
 8007222:	d0dd      	beq.n	80071e0 <_puts_r+0x40>
 8007224:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800722a:	07da      	lsls	r2, r3, #31
 800722c:	d405      	bmi.n	800723a <_puts_r+0x9a>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	059b      	lsls	r3, r3, #22
 8007232:	d402      	bmi.n	800723a <_puts_r+0x9a>
 8007234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007236:	f000 faa2 	bl	800777e <__retarget_lock_release_recursive>
 800723a:	4628      	mov	r0, r5
 800723c:	bd70      	pop	{r4, r5, r6, pc}
 800723e:	2b00      	cmp	r3, #0
 8007240:	da04      	bge.n	800724c <_puts_r+0xac>
 8007242:	69a2      	ldr	r2, [r4, #24]
 8007244:	429a      	cmp	r2, r3
 8007246:	dc06      	bgt.n	8007256 <_puts_r+0xb6>
 8007248:	290a      	cmp	r1, #10
 800724a:	d004      	beq.n	8007256 <_puts_r+0xb6>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	6022      	str	r2, [r4, #0]
 8007252:	7019      	strb	r1, [r3, #0]
 8007254:	e7c5      	b.n	80071e2 <_puts_r+0x42>
 8007256:	4622      	mov	r2, r4
 8007258:	4628      	mov	r0, r5
 800725a:	f000 f817 	bl	800728c <__swbuf_r>
 800725e:	3001      	adds	r0, #1
 8007260:	d1bf      	bne.n	80071e2 <_puts_r+0x42>
 8007262:	e7df      	b.n	8007224 <_puts_r+0x84>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	250a      	movs	r5, #10
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	6022      	str	r2, [r4, #0]
 800726c:	701d      	strb	r5, [r3, #0]
 800726e:	e7db      	b.n	8007228 <_puts_r+0x88>
 8007270:	08009b00 	.word	0x08009b00
 8007274:	08009b20 	.word	0x08009b20
 8007278:	08009ae0 	.word	0x08009ae0

0800727c <puts>:
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <puts+0xc>)
 800727e:	4601      	mov	r1, r0
 8007280:	6818      	ldr	r0, [r3, #0]
 8007282:	f7ff bf8d 	b.w	80071a0 <_puts_r>
 8007286:	bf00      	nop
 8007288:	2000000c 	.word	0x2000000c

0800728c <__swbuf_r>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	460e      	mov	r6, r1
 8007290:	4614      	mov	r4, r2
 8007292:	4605      	mov	r5, r0
 8007294:	b118      	cbz	r0, 800729e <__swbuf_r+0x12>
 8007296:	6983      	ldr	r3, [r0, #24]
 8007298:	b90b      	cbnz	r3, 800729e <__swbuf_r+0x12>
 800729a:	f000 f9d1 	bl	8007640 <__sinit>
 800729e:	4b21      	ldr	r3, [pc, #132]	; (8007324 <__swbuf_r+0x98>)
 80072a0:	429c      	cmp	r4, r3
 80072a2:	d12b      	bne.n	80072fc <__swbuf_r+0x70>
 80072a4:	686c      	ldr	r4, [r5, #4]
 80072a6:	69a3      	ldr	r3, [r4, #24]
 80072a8:	60a3      	str	r3, [r4, #8]
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	071a      	lsls	r2, r3, #28
 80072ae:	d52f      	bpl.n	8007310 <__swbuf_r+0x84>
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	b36b      	cbz	r3, 8007310 <__swbuf_r+0x84>
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	6820      	ldr	r0, [r4, #0]
 80072b8:	1ac0      	subs	r0, r0, r3
 80072ba:	6963      	ldr	r3, [r4, #20]
 80072bc:	b2f6      	uxtb	r6, r6
 80072be:	4283      	cmp	r3, r0
 80072c0:	4637      	mov	r7, r6
 80072c2:	dc04      	bgt.n	80072ce <__swbuf_r+0x42>
 80072c4:	4621      	mov	r1, r4
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 f926 	bl	8007518 <_fflush_r>
 80072cc:	bb30      	cbnz	r0, 800731c <__swbuf_r+0x90>
 80072ce:	68a3      	ldr	r3, [r4, #8]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	60a3      	str	r3, [r4, #8]
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	6022      	str	r2, [r4, #0]
 80072da:	701e      	strb	r6, [r3, #0]
 80072dc:	6963      	ldr	r3, [r4, #20]
 80072de:	3001      	adds	r0, #1
 80072e0:	4283      	cmp	r3, r0
 80072e2:	d004      	beq.n	80072ee <__swbuf_r+0x62>
 80072e4:	89a3      	ldrh	r3, [r4, #12]
 80072e6:	07db      	lsls	r3, r3, #31
 80072e8:	d506      	bpl.n	80072f8 <__swbuf_r+0x6c>
 80072ea:	2e0a      	cmp	r6, #10
 80072ec:	d104      	bne.n	80072f8 <__swbuf_r+0x6c>
 80072ee:	4621      	mov	r1, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 f911 	bl	8007518 <_fflush_r>
 80072f6:	b988      	cbnz	r0, 800731c <__swbuf_r+0x90>
 80072f8:	4638      	mov	r0, r7
 80072fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <__swbuf_r+0x9c>)
 80072fe:	429c      	cmp	r4, r3
 8007300:	d101      	bne.n	8007306 <__swbuf_r+0x7a>
 8007302:	68ac      	ldr	r4, [r5, #8]
 8007304:	e7cf      	b.n	80072a6 <__swbuf_r+0x1a>
 8007306:	4b09      	ldr	r3, [pc, #36]	; (800732c <__swbuf_r+0xa0>)
 8007308:	429c      	cmp	r4, r3
 800730a:	bf08      	it	eq
 800730c:	68ec      	ldreq	r4, [r5, #12]
 800730e:	e7ca      	b.n	80072a6 <__swbuf_r+0x1a>
 8007310:	4621      	mov	r1, r4
 8007312:	4628      	mov	r0, r5
 8007314:	f000 f80c 	bl	8007330 <__swsetup_r>
 8007318:	2800      	cmp	r0, #0
 800731a:	d0cb      	beq.n	80072b4 <__swbuf_r+0x28>
 800731c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007320:	e7ea      	b.n	80072f8 <__swbuf_r+0x6c>
 8007322:	bf00      	nop
 8007324:	08009b00 	.word	0x08009b00
 8007328:	08009b20 	.word	0x08009b20
 800732c:	08009ae0 	.word	0x08009ae0

08007330 <__swsetup_r>:
 8007330:	4b32      	ldr	r3, [pc, #200]	; (80073fc <__swsetup_r+0xcc>)
 8007332:	b570      	push	{r4, r5, r6, lr}
 8007334:	681d      	ldr	r5, [r3, #0]
 8007336:	4606      	mov	r6, r0
 8007338:	460c      	mov	r4, r1
 800733a:	b125      	cbz	r5, 8007346 <__swsetup_r+0x16>
 800733c:	69ab      	ldr	r3, [r5, #24]
 800733e:	b913      	cbnz	r3, 8007346 <__swsetup_r+0x16>
 8007340:	4628      	mov	r0, r5
 8007342:	f000 f97d 	bl	8007640 <__sinit>
 8007346:	4b2e      	ldr	r3, [pc, #184]	; (8007400 <__swsetup_r+0xd0>)
 8007348:	429c      	cmp	r4, r3
 800734a:	d10f      	bne.n	800736c <__swsetup_r+0x3c>
 800734c:	686c      	ldr	r4, [r5, #4]
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007354:	0719      	lsls	r1, r3, #28
 8007356:	d42c      	bmi.n	80073b2 <__swsetup_r+0x82>
 8007358:	06dd      	lsls	r5, r3, #27
 800735a:	d411      	bmi.n	8007380 <__swsetup_r+0x50>
 800735c:	2309      	movs	r3, #9
 800735e:	6033      	str	r3, [r6, #0]
 8007360:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800736a:	e03e      	b.n	80073ea <__swsetup_r+0xba>
 800736c:	4b25      	ldr	r3, [pc, #148]	; (8007404 <__swsetup_r+0xd4>)
 800736e:	429c      	cmp	r4, r3
 8007370:	d101      	bne.n	8007376 <__swsetup_r+0x46>
 8007372:	68ac      	ldr	r4, [r5, #8]
 8007374:	e7eb      	b.n	800734e <__swsetup_r+0x1e>
 8007376:	4b24      	ldr	r3, [pc, #144]	; (8007408 <__swsetup_r+0xd8>)
 8007378:	429c      	cmp	r4, r3
 800737a:	bf08      	it	eq
 800737c:	68ec      	ldreq	r4, [r5, #12]
 800737e:	e7e6      	b.n	800734e <__swsetup_r+0x1e>
 8007380:	0758      	lsls	r0, r3, #29
 8007382:	d512      	bpl.n	80073aa <__swsetup_r+0x7a>
 8007384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007386:	b141      	cbz	r1, 800739a <__swsetup_r+0x6a>
 8007388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800738c:	4299      	cmp	r1, r3
 800738e:	d002      	beq.n	8007396 <__swsetup_r+0x66>
 8007390:	4630      	mov	r0, r6
 8007392:	f000 fa59 	bl	8007848 <_free_r>
 8007396:	2300      	movs	r3, #0
 8007398:	6363      	str	r3, [r4, #52]	; 0x34
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073a0:	81a3      	strh	r3, [r4, #12]
 80073a2:	2300      	movs	r3, #0
 80073a4:	6063      	str	r3, [r4, #4]
 80073a6:	6923      	ldr	r3, [r4, #16]
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	f043 0308 	orr.w	r3, r3, #8
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	6923      	ldr	r3, [r4, #16]
 80073b4:	b94b      	cbnz	r3, 80073ca <__swsetup_r+0x9a>
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c0:	d003      	beq.n	80073ca <__swsetup_r+0x9a>
 80073c2:	4621      	mov	r1, r4
 80073c4:	4630      	mov	r0, r6
 80073c6:	f000 f9ff 	bl	80077c8 <__smakebuf_r>
 80073ca:	89a0      	ldrh	r0, [r4, #12]
 80073cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073d0:	f010 0301 	ands.w	r3, r0, #1
 80073d4:	d00a      	beq.n	80073ec <__swsetup_r+0xbc>
 80073d6:	2300      	movs	r3, #0
 80073d8:	60a3      	str	r3, [r4, #8]
 80073da:	6963      	ldr	r3, [r4, #20]
 80073dc:	425b      	negs	r3, r3
 80073de:	61a3      	str	r3, [r4, #24]
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	b943      	cbnz	r3, 80073f6 <__swsetup_r+0xc6>
 80073e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073e8:	d1ba      	bne.n	8007360 <__swsetup_r+0x30>
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
 80073ec:	0781      	lsls	r1, r0, #30
 80073ee:	bf58      	it	pl
 80073f0:	6963      	ldrpl	r3, [r4, #20]
 80073f2:	60a3      	str	r3, [r4, #8]
 80073f4:	e7f4      	b.n	80073e0 <__swsetup_r+0xb0>
 80073f6:	2000      	movs	r0, #0
 80073f8:	e7f7      	b.n	80073ea <__swsetup_r+0xba>
 80073fa:	bf00      	nop
 80073fc:	2000000c 	.word	0x2000000c
 8007400:	08009b00 	.word	0x08009b00
 8007404:	08009b20 	.word	0x08009b20
 8007408:	08009ae0 	.word	0x08009ae0

0800740c <__sflush_r>:
 800740c:	898a      	ldrh	r2, [r1, #12]
 800740e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007412:	4605      	mov	r5, r0
 8007414:	0710      	lsls	r0, r2, #28
 8007416:	460c      	mov	r4, r1
 8007418:	d458      	bmi.n	80074cc <__sflush_r+0xc0>
 800741a:	684b      	ldr	r3, [r1, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	dc05      	bgt.n	800742c <__sflush_r+0x20>
 8007420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	dc02      	bgt.n	800742c <__sflush_r+0x20>
 8007426:	2000      	movs	r0, #0
 8007428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800742c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800742e:	2e00      	cmp	r6, #0
 8007430:	d0f9      	beq.n	8007426 <__sflush_r+0x1a>
 8007432:	2300      	movs	r3, #0
 8007434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007438:	682f      	ldr	r7, [r5, #0]
 800743a:	602b      	str	r3, [r5, #0]
 800743c:	d032      	beq.n	80074a4 <__sflush_r+0x98>
 800743e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	075a      	lsls	r2, r3, #29
 8007444:	d505      	bpl.n	8007452 <__sflush_r+0x46>
 8007446:	6863      	ldr	r3, [r4, #4]
 8007448:	1ac0      	subs	r0, r0, r3
 800744a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800744c:	b10b      	cbz	r3, 8007452 <__sflush_r+0x46>
 800744e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007450:	1ac0      	subs	r0, r0, r3
 8007452:	2300      	movs	r3, #0
 8007454:	4602      	mov	r2, r0
 8007456:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007458:	6a21      	ldr	r1, [r4, #32]
 800745a:	4628      	mov	r0, r5
 800745c:	47b0      	blx	r6
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	d106      	bne.n	8007472 <__sflush_r+0x66>
 8007464:	6829      	ldr	r1, [r5, #0]
 8007466:	291d      	cmp	r1, #29
 8007468:	d82c      	bhi.n	80074c4 <__sflush_r+0xb8>
 800746a:	4a2a      	ldr	r2, [pc, #168]	; (8007514 <__sflush_r+0x108>)
 800746c:	40ca      	lsrs	r2, r1
 800746e:	07d6      	lsls	r6, r2, #31
 8007470:	d528      	bpl.n	80074c4 <__sflush_r+0xb8>
 8007472:	2200      	movs	r2, #0
 8007474:	6062      	str	r2, [r4, #4]
 8007476:	04d9      	lsls	r1, r3, #19
 8007478:	6922      	ldr	r2, [r4, #16]
 800747a:	6022      	str	r2, [r4, #0]
 800747c:	d504      	bpl.n	8007488 <__sflush_r+0x7c>
 800747e:	1c42      	adds	r2, r0, #1
 8007480:	d101      	bne.n	8007486 <__sflush_r+0x7a>
 8007482:	682b      	ldr	r3, [r5, #0]
 8007484:	b903      	cbnz	r3, 8007488 <__sflush_r+0x7c>
 8007486:	6560      	str	r0, [r4, #84]	; 0x54
 8007488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800748a:	602f      	str	r7, [r5, #0]
 800748c:	2900      	cmp	r1, #0
 800748e:	d0ca      	beq.n	8007426 <__sflush_r+0x1a>
 8007490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007494:	4299      	cmp	r1, r3
 8007496:	d002      	beq.n	800749e <__sflush_r+0x92>
 8007498:	4628      	mov	r0, r5
 800749a:	f000 f9d5 	bl	8007848 <_free_r>
 800749e:	2000      	movs	r0, #0
 80074a0:	6360      	str	r0, [r4, #52]	; 0x34
 80074a2:	e7c1      	b.n	8007428 <__sflush_r+0x1c>
 80074a4:	6a21      	ldr	r1, [r4, #32]
 80074a6:	2301      	movs	r3, #1
 80074a8:	4628      	mov	r0, r5
 80074aa:	47b0      	blx	r6
 80074ac:	1c41      	adds	r1, r0, #1
 80074ae:	d1c7      	bne.n	8007440 <__sflush_r+0x34>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0c4      	beq.n	8007440 <__sflush_r+0x34>
 80074b6:	2b1d      	cmp	r3, #29
 80074b8:	d001      	beq.n	80074be <__sflush_r+0xb2>
 80074ba:	2b16      	cmp	r3, #22
 80074bc:	d101      	bne.n	80074c2 <__sflush_r+0xb6>
 80074be:	602f      	str	r7, [r5, #0]
 80074c0:	e7b1      	b.n	8007426 <__sflush_r+0x1a>
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c8:	81a3      	strh	r3, [r4, #12]
 80074ca:	e7ad      	b.n	8007428 <__sflush_r+0x1c>
 80074cc:	690f      	ldr	r7, [r1, #16]
 80074ce:	2f00      	cmp	r7, #0
 80074d0:	d0a9      	beq.n	8007426 <__sflush_r+0x1a>
 80074d2:	0793      	lsls	r3, r2, #30
 80074d4:	680e      	ldr	r6, [r1, #0]
 80074d6:	bf08      	it	eq
 80074d8:	694b      	ldreq	r3, [r1, #20]
 80074da:	600f      	str	r7, [r1, #0]
 80074dc:	bf18      	it	ne
 80074de:	2300      	movne	r3, #0
 80074e0:	eba6 0807 	sub.w	r8, r6, r7
 80074e4:	608b      	str	r3, [r1, #8]
 80074e6:	f1b8 0f00 	cmp.w	r8, #0
 80074ea:	dd9c      	ble.n	8007426 <__sflush_r+0x1a>
 80074ec:	6a21      	ldr	r1, [r4, #32]
 80074ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074f0:	4643      	mov	r3, r8
 80074f2:	463a      	mov	r2, r7
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b0      	blx	r6
 80074f8:	2800      	cmp	r0, #0
 80074fa:	dc06      	bgt.n	800750a <__sflush_r+0xfe>
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007502:	81a3      	strh	r3, [r4, #12]
 8007504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007508:	e78e      	b.n	8007428 <__sflush_r+0x1c>
 800750a:	4407      	add	r7, r0
 800750c:	eba8 0800 	sub.w	r8, r8, r0
 8007510:	e7e9      	b.n	80074e6 <__sflush_r+0xda>
 8007512:	bf00      	nop
 8007514:	20400001 	.word	0x20400001

08007518 <_fflush_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	690b      	ldr	r3, [r1, #16]
 800751c:	4605      	mov	r5, r0
 800751e:	460c      	mov	r4, r1
 8007520:	b913      	cbnz	r3, 8007528 <_fflush_r+0x10>
 8007522:	2500      	movs	r5, #0
 8007524:	4628      	mov	r0, r5
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	b118      	cbz	r0, 8007532 <_fflush_r+0x1a>
 800752a:	6983      	ldr	r3, [r0, #24]
 800752c:	b90b      	cbnz	r3, 8007532 <_fflush_r+0x1a>
 800752e:	f000 f887 	bl	8007640 <__sinit>
 8007532:	4b14      	ldr	r3, [pc, #80]	; (8007584 <_fflush_r+0x6c>)
 8007534:	429c      	cmp	r4, r3
 8007536:	d11b      	bne.n	8007570 <_fflush_r+0x58>
 8007538:	686c      	ldr	r4, [r5, #4]
 800753a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0ef      	beq.n	8007522 <_fflush_r+0xa>
 8007542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007544:	07d0      	lsls	r0, r2, #31
 8007546:	d404      	bmi.n	8007552 <_fflush_r+0x3a>
 8007548:	0599      	lsls	r1, r3, #22
 800754a:	d402      	bmi.n	8007552 <_fflush_r+0x3a>
 800754c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800754e:	f000 f915 	bl	800777c <__retarget_lock_acquire_recursive>
 8007552:	4628      	mov	r0, r5
 8007554:	4621      	mov	r1, r4
 8007556:	f7ff ff59 	bl	800740c <__sflush_r>
 800755a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800755c:	07da      	lsls	r2, r3, #31
 800755e:	4605      	mov	r5, r0
 8007560:	d4e0      	bmi.n	8007524 <_fflush_r+0xc>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	059b      	lsls	r3, r3, #22
 8007566:	d4dd      	bmi.n	8007524 <_fflush_r+0xc>
 8007568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756a:	f000 f908 	bl	800777e <__retarget_lock_release_recursive>
 800756e:	e7d9      	b.n	8007524 <_fflush_r+0xc>
 8007570:	4b05      	ldr	r3, [pc, #20]	; (8007588 <_fflush_r+0x70>)
 8007572:	429c      	cmp	r4, r3
 8007574:	d101      	bne.n	800757a <_fflush_r+0x62>
 8007576:	68ac      	ldr	r4, [r5, #8]
 8007578:	e7df      	b.n	800753a <_fflush_r+0x22>
 800757a:	4b04      	ldr	r3, [pc, #16]	; (800758c <_fflush_r+0x74>)
 800757c:	429c      	cmp	r4, r3
 800757e:	bf08      	it	eq
 8007580:	68ec      	ldreq	r4, [r5, #12]
 8007582:	e7da      	b.n	800753a <_fflush_r+0x22>
 8007584:	08009b00 	.word	0x08009b00
 8007588:	08009b20 	.word	0x08009b20
 800758c:	08009ae0 	.word	0x08009ae0

08007590 <std>:
 8007590:	2300      	movs	r3, #0
 8007592:	b510      	push	{r4, lr}
 8007594:	4604      	mov	r4, r0
 8007596:	e9c0 3300 	strd	r3, r3, [r0]
 800759a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800759e:	6083      	str	r3, [r0, #8]
 80075a0:	8181      	strh	r1, [r0, #12]
 80075a2:	6643      	str	r3, [r0, #100]	; 0x64
 80075a4:	81c2      	strh	r2, [r0, #14]
 80075a6:	6183      	str	r3, [r0, #24]
 80075a8:	4619      	mov	r1, r3
 80075aa:	2208      	movs	r2, #8
 80075ac:	305c      	adds	r0, #92	; 0x5c
 80075ae:	f7ff fdd7 	bl	8007160 <memset>
 80075b2:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <std+0x38>)
 80075b4:	6263      	str	r3, [r4, #36]	; 0x24
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <std+0x3c>)
 80075b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ba:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <std+0x40>)
 80075bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075be:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <std+0x44>)
 80075c0:	6224      	str	r4, [r4, #32]
 80075c2:	6323      	str	r3, [r4, #48]	; 0x30
 80075c4:	bd10      	pop	{r4, pc}
 80075c6:	bf00      	nop
 80075c8:	08007f99 	.word	0x08007f99
 80075cc:	08007fbb 	.word	0x08007fbb
 80075d0:	08007ff3 	.word	0x08007ff3
 80075d4:	08008017 	.word	0x08008017

080075d8 <_cleanup_r>:
 80075d8:	4901      	ldr	r1, [pc, #4]	; (80075e0 <_cleanup_r+0x8>)
 80075da:	f000 b8af 	b.w	800773c <_fwalk_reent>
 80075de:	bf00      	nop
 80075e0:	08007519 	.word	0x08007519

080075e4 <__sfmoreglue>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	1e4a      	subs	r2, r1, #1
 80075e8:	2568      	movs	r5, #104	; 0x68
 80075ea:	4355      	muls	r5, r2
 80075ec:	460e      	mov	r6, r1
 80075ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075f2:	f000 f979 	bl	80078e8 <_malloc_r>
 80075f6:	4604      	mov	r4, r0
 80075f8:	b140      	cbz	r0, 800760c <__sfmoreglue+0x28>
 80075fa:	2100      	movs	r1, #0
 80075fc:	e9c0 1600 	strd	r1, r6, [r0]
 8007600:	300c      	adds	r0, #12
 8007602:	60a0      	str	r0, [r4, #8]
 8007604:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007608:	f7ff fdaa 	bl	8007160 <memset>
 800760c:	4620      	mov	r0, r4
 800760e:	bd70      	pop	{r4, r5, r6, pc}

08007610 <__sfp_lock_acquire>:
 8007610:	4801      	ldr	r0, [pc, #4]	; (8007618 <__sfp_lock_acquire+0x8>)
 8007612:	f000 b8b3 	b.w	800777c <__retarget_lock_acquire_recursive>
 8007616:	bf00      	nop
 8007618:	20000544 	.word	0x20000544

0800761c <__sfp_lock_release>:
 800761c:	4801      	ldr	r0, [pc, #4]	; (8007624 <__sfp_lock_release+0x8>)
 800761e:	f000 b8ae 	b.w	800777e <__retarget_lock_release_recursive>
 8007622:	bf00      	nop
 8007624:	20000544 	.word	0x20000544

08007628 <__sinit_lock_acquire>:
 8007628:	4801      	ldr	r0, [pc, #4]	; (8007630 <__sinit_lock_acquire+0x8>)
 800762a:	f000 b8a7 	b.w	800777c <__retarget_lock_acquire_recursive>
 800762e:	bf00      	nop
 8007630:	2000053f 	.word	0x2000053f

08007634 <__sinit_lock_release>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__sinit_lock_release+0x8>)
 8007636:	f000 b8a2 	b.w	800777e <__retarget_lock_release_recursive>
 800763a:	bf00      	nop
 800763c:	2000053f 	.word	0x2000053f

08007640 <__sinit>:
 8007640:	b510      	push	{r4, lr}
 8007642:	4604      	mov	r4, r0
 8007644:	f7ff fff0 	bl	8007628 <__sinit_lock_acquire>
 8007648:	69a3      	ldr	r3, [r4, #24]
 800764a:	b11b      	cbz	r3, 8007654 <__sinit+0x14>
 800764c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007650:	f7ff bff0 	b.w	8007634 <__sinit_lock_release>
 8007654:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007658:	6523      	str	r3, [r4, #80]	; 0x50
 800765a:	4b13      	ldr	r3, [pc, #76]	; (80076a8 <__sinit+0x68>)
 800765c:	4a13      	ldr	r2, [pc, #76]	; (80076ac <__sinit+0x6c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	62a2      	str	r2, [r4, #40]	; 0x28
 8007662:	42a3      	cmp	r3, r4
 8007664:	bf04      	itt	eq
 8007666:	2301      	moveq	r3, #1
 8007668:	61a3      	streq	r3, [r4, #24]
 800766a:	4620      	mov	r0, r4
 800766c:	f000 f820 	bl	80076b0 <__sfp>
 8007670:	6060      	str	r0, [r4, #4]
 8007672:	4620      	mov	r0, r4
 8007674:	f000 f81c 	bl	80076b0 <__sfp>
 8007678:	60a0      	str	r0, [r4, #8]
 800767a:	4620      	mov	r0, r4
 800767c:	f000 f818 	bl	80076b0 <__sfp>
 8007680:	2200      	movs	r2, #0
 8007682:	60e0      	str	r0, [r4, #12]
 8007684:	2104      	movs	r1, #4
 8007686:	6860      	ldr	r0, [r4, #4]
 8007688:	f7ff ff82 	bl	8007590 <std>
 800768c:	68a0      	ldr	r0, [r4, #8]
 800768e:	2201      	movs	r2, #1
 8007690:	2109      	movs	r1, #9
 8007692:	f7ff ff7d 	bl	8007590 <std>
 8007696:	68e0      	ldr	r0, [r4, #12]
 8007698:	2202      	movs	r2, #2
 800769a:	2112      	movs	r1, #18
 800769c:	f7ff ff78 	bl	8007590 <std>
 80076a0:	2301      	movs	r3, #1
 80076a2:	61a3      	str	r3, [r4, #24]
 80076a4:	e7d2      	b.n	800764c <__sinit+0xc>
 80076a6:	bf00      	nop
 80076a8:	08009adc 	.word	0x08009adc
 80076ac:	080075d9 	.word	0x080075d9

080076b0 <__sfp>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	4607      	mov	r7, r0
 80076b4:	f7ff ffac 	bl	8007610 <__sfp_lock_acquire>
 80076b8:	4b1e      	ldr	r3, [pc, #120]	; (8007734 <__sfp+0x84>)
 80076ba:	681e      	ldr	r6, [r3, #0]
 80076bc:	69b3      	ldr	r3, [r6, #24]
 80076be:	b913      	cbnz	r3, 80076c6 <__sfp+0x16>
 80076c0:	4630      	mov	r0, r6
 80076c2:	f7ff ffbd 	bl	8007640 <__sinit>
 80076c6:	3648      	adds	r6, #72	; 0x48
 80076c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	d503      	bpl.n	80076d8 <__sfp+0x28>
 80076d0:	6833      	ldr	r3, [r6, #0]
 80076d2:	b30b      	cbz	r3, 8007718 <__sfp+0x68>
 80076d4:	6836      	ldr	r6, [r6, #0]
 80076d6:	e7f7      	b.n	80076c8 <__sfp+0x18>
 80076d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076dc:	b9d5      	cbnz	r5, 8007714 <__sfp+0x64>
 80076de:	4b16      	ldr	r3, [pc, #88]	; (8007738 <__sfp+0x88>)
 80076e0:	60e3      	str	r3, [r4, #12]
 80076e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076e6:	6665      	str	r5, [r4, #100]	; 0x64
 80076e8:	f000 f847 	bl	800777a <__retarget_lock_init_recursive>
 80076ec:	f7ff ff96 	bl	800761c <__sfp_lock_release>
 80076f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076f8:	6025      	str	r5, [r4, #0]
 80076fa:	61a5      	str	r5, [r4, #24]
 80076fc:	2208      	movs	r2, #8
 80076fe:	4629      	mov	r1, r5
 8007700:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007704:	f7ff fd2c 	bl	8007160 <memset>
 8007708:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800770c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007710:	4620      	mov	r0, r4
 8007712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007714:	3468      	adds	r4, #104	; 0x68
 8007716:	e7d9      	b.n	80076cc <__sfp+0x1c>
 8007718:	2104      	movs	r1, #4
 800771a:	4638      	mov	r0, r7
 800771c:	f7ff ff62 	bl	80075e4 <__sfmoreglue>
 8007720:	4604      	mov	r4, r0
 8007722:	6030      	str	r0, [r6, #0]
 8007724:	2800      	cmp	r0, #0
 8007726:	d1d5      	bne.n	80076d4 <__sfp+0x24>
 8007728:	f7ff ff78 	bl	800761c <__sfp_lock_release>
 800772c:	230c      	movs	r3, #12
 800772e:	603b      	str	r3, [r7, #0]
 8007730:	e7ee      	b.n	8007710 <__sfp+0x60>
 8007732:	bf00      	nop
 8007734:	08009adc 	.word	0x08009adc
 8007738:	ffff0001 	.word	0xffff0001

0800773c <_fwalk_reent>:
 800773c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007740:	4606      	mov	r6, r0
 8007742:	4688      	mov	r8, r1
 8007744:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007748:	2700      	movs	r7, #0
 800774a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800774e:	f1b9 0901 	subs.w	r9, r9, #1
 8007752:	d505      	bpl.n	8007760 <_fwalk_reent+0x24>
 8007754:	6824      	ldr	r4, [r4, #0]
 8007756:	2c00      	cmp	r4, #0
 8007758:	d1f7      	bne.n	800774a <_fwalk_reent+0xe>
 800775a:	4638      	mov	r0, r7
 800775c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007760:	89ab      	ldrh	r3, [r5, #12]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d907      	bls.n	8007776 <_fwalk_reent+0x3a>
 8007766:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800776a:	3301      	adds	r3, #1
 800776c:	d003      	beq.n	8007776 <_fwalk_reent+0x3a>
 800776e:	4629      	mov	r1, r5
 8007770:	4630      	mov	r0, r6
 8007772:	47c0      	blx	r8
 8007774:	4307      	orrs	r7, r0
 8007776:	3568      	adds	r5, #104	; 0x68
 8007778:	e7e9      	b.n	800774e <_fwalk_reent+0x12>

0800777a <__retarget_lock_init_recursive>:
 800777a:	4770      	bx	lr

0800777c <__retarget_lock_acquire_recursive>:
 800777c:	4770      	bx	lr

0800777e <__retarget_lock_release_recursive>:
 800777e:	4770      	bx	lr

08007780 <__swhatbuf_r>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	460e      	mov	r6, r1
 8007784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007788:	2900      	cmp	r1, #0
 800778a:	b096      	sub	sp, #88	; 0x58
 800778c:	4614      	mov	r4, r2
 800778e:	461d      	mov	r5, r3
 8007790:	da07      	bge.n	80077a2 <__swhatbuf_r+0x22>
 8007792:	2300      	movs	r3, #0
 8007794:	602b      	str	r3, [r5, #0]
 8007796:	89b3      	ldrh	r3, [r6, #12]
 8007798:	061a      	lsls	r2, r3, #24
 800779a:	d410      	bmi.n	80077be <__swhatbuf_r+0x3e>
 800779c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a0:	e00e      	b.n	80077c0 <__swhatbuf_r+0x40>
 80077a2:	466a      	mov	r2, sp
 80077a4:	f000 fc5e 	bl	8008064 <_fstat_r>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	dbf2      	blt.n	8007792 <__swhatbuf_r+0x12>
 80077ac:	9a01      	ldr	r2, [sp, #4]
 80077ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077b6:	425a      	negs	r2, r3
 80077b8:	415a      	adcs	r2, r3
 80077ba:	602a      	str	r2, [r5, #0]
 80077bc:	e7ee      	b.n	800779c <__swhatbuf_r+0x1c>
 80077be:	2340      	movs	r3, #64	; 0x40
 80077c0:	2000      	movs	r0, #0
 80077c2:	6023      	str	r3, [r4, #0]
 80077c4:	b016      	add	sp, #88	; 0x58
 80077c6:	bd70      	pop	{r4, r5, r6, pc}

080077c8 <__smakebuf_r>:
 80077c8:	898b      	ldrh	r3, [r1, #12]
 80077ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077cc:	079d      	lsls	r5, r3, #30
 80077ce:	4606      	mov	r6, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	d507      	bpl.n	80077e4 <__smakebuf_r+0x1c>
 80077d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	6123      	str	r3, [r4, #16]
 80077dc:	2301      	movs	r3, #1
 80077de:	6163      	str	r3, [r4, #20]
 80077e0:	b002      	add	sp, #8
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	ab01      	add	r3, sp, #4
 80077e6:	466a      	mov	r2, sp
 80077e8:	f7ff ffca 	bl	8007780 <__swhatbuf_r>
 80077ec:	9900      	ldr	r1, [sp, #0]
 80077ee:	4605      	mov	r5, r0
 80077f0:	4630      	mov	r0, r6
 80077f2:	f000 f879 	bl	80078e8 <_malloc_r>
 80077f6:	b948      	cbnz	r0, 800780c <__smakebuf_r+0x44>
 80077f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077fc:	059a      	lsls	r2, r3, #22
 80077fe:	d4ef      	bmi.n	80077e0 <__smakebuf_r+0x18>
 8007800:	f023 0303 	bic.w	r3, r3, #3
 8007804:	f043 0302 	orr.w	r3, r3, #2
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	e7e3      	b.n	80077d4 <__smakebuf_r+0xc>
 800780c:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <__smakebuf_r+0x7c>)
 800780e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	6020      	str	r0, [r4, #0]
 8007814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007818:	81a3      	strh	r3, [r4, #12]
 800781a:	9b00      	ldr	r3, [sp, #0]
 800781c:	6163      	str	r3, [r4, #20]
 800781e:	9b01      	ldr	r3, [sp, #4]
 8007820:	6120      	str	r0, [r4, #16]
 8007822:	b15b      	cbz	r3, 800783c <__smakebuf_r+0x74>
 8007824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007828:	4630      	mov	r0, r6
 800782a:	f000 fc2d 	bl	8008088 <_isatty_r>
 800782e:	b128      	cbz	r0, 800783c <__smakebuf_r+0x74>
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	f023 0303 	bic.w	r3, r3, #3
 8007836:	f043 0301 	orr.w	r3, r3, #1
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	89a0      	ldrh	r0, [r4, #12]
 800783e:	4305      	orrs	r5, r0
 8007840:	81a5      	strh	r5, [r4, #12]
 8007842:	e7cd      	b.n	80077e0 <__smakebuf_r+0x18>
 8007844:	080075d9 	.word	0x080075d9

08007848 <_free_r>:
 8007848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800784a:	2900      	cmp	r1, #0
 800784c:	d048      	beq.n	80078e0 <_free_r+0x98>
 800784e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007852:	9001      	str	r0, [sp, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	f1a1 0404 	sub.w	r4, r1, #4
 800785a:	bfb8      	it	lt
 800785c:	18e4      	addlt	r4, r4, r3
 800785e:	f000 fc35 	bl	80080cc <__malloc_lock>
 8007862:	4a20      	ldr	r2, [pc, #128]	; (80078e4 <_free_r+0x9c>)
 8007864:	9801      	ldr	r0, [sp, #4]
 8007866:	6813      	ldr	r3, [r2, #0]
 8007868:	4615      	mov	r5, r2
 800786a:	b933      	cbnz	r3, 800787a <_free_r+0x32>
 800786c:	6063      	str	r3, [r4, #4]
 800786e:	6014      	str	r4, [r2, #0]
 8007870:	b003      	add	sp, #12
 8007872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007876:	f000 bc2f 	b.w	80080d8 <__malloc_unlock>
 800787a:	42a3      	cmp	r3, r4
 800787c:	d90b      	bls.n	8007896 <_free_r+0x4e>
 800787e:	6821      	ldr	r1, [r4, #0]
 8007880:	1862      	adds	r2, r4, r1
 8007882:	4293      	cmp	r3, r2
 8007884:	bf04      	itt	eq
 8007886:	681a      	ldreq	r2, [r3, #0]
 8007888:	685b      	ldreq	r3, [r3, #4]
 800788a:	6063      	str	r3, [r4, #4]
 800788c:	bf04      	itt	eq
 800788e:	1852      	addeq	r2, r2, r1
 8007890:	6022      	streq	r2, [r4, #0]
 8007892:	602c      	str	r4, [r5, #0]
 8007894:	e7ec      	b.n	8007870 <_free_r+0x28>
 8007896:	461a      	mov	r2, r3
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	b10b      	cbz	r3, 80078a0 <_free_r+0x58>
 800789c:	42a3      	cmp	r3, r4
 800789e:	d9fa      	bls.n	8007896 <_free_r+0x4e>
 80078a0:	6811      	ldr	r1, [r2, #0]
 80078a2:	1855      	adds	r5, r2, r1
 80078a4:	42a5      	cmp	r5, r4
 80078a6:	d10b      	bne.n	80078c0 <_free_r+0x78>
 80078a8:	6824      	ldr	r4, [r4, #0]
 80078aa:	4421      	add	r1, r4
 80078ac:	1854      	adds	r4, r2, r1
 80078ae:	42a3      	cmp	r3, r4
 80078b0:	6011      	str	r1, [r2, #0]
 80078b2:	d1dd      	bne.n	8007870 <_free_r+0x28>
 80078b4:	681c      	ldr	r4, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	6053      	str	r3, [r2, #4]
 80078ba:	4421      	add	r1, r4
 80078bc:	6011      	str	r1, [r2, #0]
 80078be:	e7d7      	b.n	8007870 <_free_r+0x28>
 80078c0:	d902      	bls.n	80078c8 <_free_r+0x80>
 80078c2:	230c      	movs	r3, #12
 80078c4:	6003      	str	r3, [r0, #0]
 80078c6:	e7d3      	b.n	8007870 <_free_r+0x28>
 80078c8:	6825      	ldr	r5, [r4, #0]
 80078ca:	1961      	adds	r1, r4, r5
 80078cc:	428b      	cmp	r3, r1
 80078ce:	bf04      	itt	eq
 80078d0:	6819      	ldreq	r1, [r3, #0]
 80078d2:	685b      	ldreq	r3, [r3, #4]
 80078d4:	6063      	str	r3, [r4, #4]
 80078d6:	bf04      	itt	eq
 80078d8:	1949      	addeq	r1, r1, r5
 80078da:	6021      	streq	r1, [r4, #0]
 80078dc:	6054      	str	r4, [r2, #4]
 80078de:	e7c7      	b.n	8007870 <_free_r+0x28>
 80078e0:	b003      	add	sp, #12
 80078e2:	bd30      	pop	{r4, r5, pc}
 80078e4:	200002d4 	.word	0x200002d4

080078e8 <_malloc_r>:
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ea:	1ccd      	adds	r5, r1, #3
 80078ec:	f025 0503 	bic.w	r5, r5, #3
 80078f0:	3508      	adds	r5, #8
 80078f2:	2d0c      	cmp	r5, #12
 80078f4:	bf38      	it	cc
 80078f6:	250c      	movcc	r5, #12
 80078f8:	2d00      	cmp	r5, #0
 80078fa:	4606      	mov	r6, r0
 80078fc:	db01      	blt.n	8007902 <_malloc_r+0x1a>
 80078fe:	42a9      	cmp	r1, r5
 8007900:	d903      	bls.n	800790a <_malloc_r+0x22>
 8007902:	230c      	movs	r3, #12
 8007904:	6033      	str	r3, [r6, #0]
 8007906:	2000      	movs	r0, #0
 8007908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800790a:	f000 fbdf 	bl	80080cc <__malloc_lock>
 800790e:	4921      	ldr	r1, [pc, #132]	; (8007994 <_malloc_r+0xac>)
 8007910:	680a      	ldr	r2, [r1, #0]
 8007912:	4614      	mov	r4, r2
 8007914:	b99c      	cbnz	r4, 800793e <_malloc_r+0x56>
 8007916:	4f20      	ldr	r7, [pc, #128]	; (8007998 <_malloc_r+0xb0>)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	b923      	cbnz	r3, 8007926 <_malloc_r+0x3e>
 800791c:	4621      	mov	r1, r4
 800791e:	4630      	mov	r0, r6
 8007920:	f000 fb2a 	bl	8007f78 <_sbrk_r>
 8007924:	6038      	str	r0, [r7, #0]
 8007926:	4629      	mov	r1, r5
 8007928:	4630      	mov	r0, r6
 800792a:	f000 fb25 	bl	8007f78 <_sbrk_r>
 800792e:	1c43      	adds	r3, r0, #1
 8007930:	d123      	bne.n	800797a <_malloc_r+0x92>
 8007932:	230c      	movs	r3, #12
 8007934:	6033      	str	r3, [r6, #0]
 8007936:	4630      	mov	r0, r6
 8007938:	f000 fbce 	bl	80080d8 <__malloc_unlock>
 800793c:	e7e3      	b.n	8007906 <_malloc_r+0x1e>
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	1b5b      	subs	r3, r3, r5
 8007942:	d417      	bmi.n	8007974 <_malloc_r+0x8c>
 8007944:	2b0b      	cmp	r3, #11
 8007946:	d903      	bls.n	8007950 <_malloc_r+0x68>
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	441c      	add	r4, r3
 800794c:	6025      	str	r5, [r4, #0]
 800794e:	e004      	b.n	800795a <_malloc_r+0x72>
 8007950:	6863      	ldr	r3, [r4, #4]
 8007952:	42a2      	cmp	r2, r4
 8007954:	bf0c      	ite	eq
 8007956:	600b      	streq	r3, [r1, #0]
 8007958:	6053      	strne	r3, [r2, #4]
 800795a:	4630      	mov	r0, r6
 800795c:	f000 fbbc 	bl	80080d8 <__malloc_unlock>
 8007960:	f104 000b 	add.w	r0, r4, #11
 8007964:	1d23      	adds	r3, r4, #4
 8007966:	f020 0007 	bic.w	r0, r0, #7
 800796a:	1ac2      	subs	r2, r0, r3
 800796c:	d0cc      	beq.n	8007908 <_malloc_r+0x20>
 800796e:	1a1b      	subs	r3, r3, r0
 8007970:	50a3      	str	r3, [r4, r2]
 8007972:	e7c9      	b.n	8007908 <_malloc_r+0x20>
 8007974:	4622      	mov	r2, r4
 8007976:	6864      	ldr	r4, [r4, #4]
 8007978:	e7cc      	b.n	8007914 <_malloc_r+0x2c>
 800797a:	1cc4      	adds	r4, r0, #3
 800797c:	f024 0403 	bic.w	r4, r4, #3
 8007980:	42a0      	cmp	r0, r4
 8007982:	d0e3      	beq.n	800794c <_malloc_r+0x64>
 8007984:	1a21      	subs	r1, r4, r0
 8007986:	4630      	mov	r0, r6
 8007988:	f000 faf6 	bl	8007f78 <_sbrk_r>
 800798c:	3001      	adds	r0, #1
 800798e:	d1dd      	bne.n	800794c <_malloc_r+0x64>
 8007990:	e7cf      	b.n	8007932 <_malloc_r+0x4a>
 8007992:	bf00      	nop
 8007994:	200002d4 	.word	0x200002d4
 8007998:	200002d8 	.word	0x200002d8

0800799c <__sfputc_r>:
 800799c:	6893      	ldr	r3, [r2, #8]
 800799e:	3b01      	subs	r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	b410      	push	{r4}
 80079a4:	6093      	str	r3, [r2, #8]
 80079a6:	da08      	bge.n	80079ba <__sfputc_r+0x1e>
 80079a8:	6994      	ldr	r4, [r2, #24]
 80079aa:	42a3      	cmp	r3, r4
 80079ac:	db01      	blt.n	80079b2 <__sfputc_r+0x16>
 80079ae:	290a      	cmp	r1, #10
 80079b0:	d103      	bne.n	80079ba <__sfputc_r+0x1e>
 80079b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079b6:	f7ff bc69 	b.w	800728c <__swbuf_r>
 80079ba:	6813      	ldr	r3, [r2, #0]
 80079bc:	1c58      	adds	r0, r3, #1
 80079be:	6010      	str	r0, [r2, #0]
 80079c0:	7019      	strb	r1, [r3, #0]
 80079c2:	4608      	mov	r0, r1
 80079c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <__sfputs_r>:
 80079ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079cc:	4606      	mov	r6, r0
 80079ce:	460f      	mov	r7, r1
 80079d0:	4614      	mov	r4, r2
 80079d2:	18d5      	adds	r5, r2, r3
 80079d4:	42ac      	cmp	r4, r5
 80079d6:	d101      	bne.n	80079dc <__sfputs_r+0x12>
 80079d8:	2000      	movs	r0, #0
 80079da:	e007      	b.n	80079ec <__sfputs_r+0x22>
 80079dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e0:	463a      	mov	r2, r7
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7ff ffda 	bl	800799c <__sfputc_r>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d1f3      	bne.n	80079d4 <__sfputs_r+0xa>
 80079ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079f0 <_vfiprintf_r>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	460d      	mov	r5, r1
 80079f6:	b09d      	sub	sp, #116	; 0x74
 80079f8:	4614      	mov	r4, r2
 80079fa:	4698      	mov	r8, r3
 80079fc:	4606      	mov	r6, r0
 80079fe:	b118      	cbz	r0, 8007a08 <_vfiprintf_r+0x18>
 8007a00:	6983      	ldr	r3, [r0, #24]
 8007a02:	b90b      	cbnz	r3, 8007a08 <_vfiprintf_r+0x18>
 8007a04:	f7ff fe1c 	bl	8007640 <__sinit>
 8007a08:	4b89      	ldr	r3, [pc, #548]	; (8007c30 <_vfiprintf_r+0x240>)
 8007a0a:	429d      	cmp	r5, r3
 8007a0c:	d11b      	bne.n	8007a46 <_vfiprintf_r+0x56>
 8007a0e:	6875      	ldr	r5, [r6, #4]
 8007a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a12:	07d9      	lsls	r1, r3, #31
 8007a14:	d405      	bmi.n	8007a22 <_vfiprintf_r+0x32>
 8007a16:	89ab      	ldrh	r3, [r5, #12]
 8007a18:	059a      	lsls	r2, r3, #22
 8007a1a:	d402      	bmi.n	8007a22 <_vfiprintf_r+0x32>
 8007a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a1e:	f7ff fead 	bl	800777c <__retarget_lock_acquire_recursive>
 8007a22:	89ab      	ldrh	r3, [r5, #12]
 8007a24:	071b      	lsls	r3, r3, #28
 8007a26:	d501      	bpl.n	8007a2c <_vfiprintf_r+0x3c>
 8007a28:	692b      	ldr	r3, [r5, #16]
 8007a2a:	b9eb      	cbnz	r3, 8007a68 <_vfiprintf_r+0x78>
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f7ff fc7e 	bl	8007330 <__swsetup_r>
 8007a34:	b1c0      	cbz	r0, 8007a68 <_vfiprintf_r+0x78>
 8007a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a38:	07dc      	lsls	r4, r3, #31
 8007a3a:	d50e      	bpl.n	8007a5a <_vfiprintf_r+0x6a>
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a40:	b01d      	add	sp, #116	; 0x74
 8007a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a46:	4b7b      	ldr	r3, [pc, #492]	; (8007c34 <_vfiprintf_r+0x244>)
 8007a48:	429d      	cmp	r5, r3
 8007a4a:	d101      	bne.n	8007a50 <_vfiprintf_r+0x60>
 8007a4c:	68b5      	ldr	r5, [r6, #8]
 8007a4e:	e7df      	b.n	8007a10 <_vfiprintf_r+0x20>
 8007a50:	4b79      	ldr	r3, [pc, #484]	; (8007c38 <_vfiprintf_r+0x248>)
 8007a52:	429d      	cmp	r5, r3
 8007a54:	bf08      	it	eq
 8007a56:	68f5      	ldreq	r5, [r6, #12]
 8007a58:	e7da      	b.n	8007a10 <_vfiprintf_r+0x20>
 8007a5a:	89ab      	ldrh	r3, [r5, #12]
 8007a5c:	0598      	lsls	r0, r3, #22
 8007a5e:	d4ed      	bmi.n	8007a3c <_vfiprintf_r+0x4c>
 8007a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a62:	f7ff fe8c 	bl	800777e <__retarget_lock_release_recursive>
 8007a66:	e7e9      	b.n	8007a3c <_vfiprintf_r+0x4c>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a6c:	2320      	movs	r3, #32
 8007a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a76:	2330      	movs	r3, #48	; 0x30
 8007a78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c3c <_vfiprintf_r+0x24c>
 8007a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a80:	f04f 0901 	mov.w	r9, #1
 8007a84:	4623      	mov	r3, r4
 8007a86:	469a      	mov	sl, r3
 8007a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a8c:	b10a      	cbz	r2, 8007a92 <_vfiprintf_r+0xa2>
 8007a8e:	2a25      	cmp	r2, #37	; 0x25
 8007a90:	d1f9      	bne.n	8007a86 <_vfiprintf_r+0x96>
 8007a92:	ebba 0b04 	subs.w	fp, sl, r4
 8007a96:	d00b      	beq.n	8007ab0 <_vfiprintf_r+0xc0>
 8007a98:	465b      	mov	r3, fp
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f7ff ff93 	bl	80079ca <__sfputs_r>
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	f000 80aa 	beq.w	8007bfe <_vfiprintf_r+0x20e>
 8007aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aac:	445a      	add	r2, fp
 8007aae:	9209      	str	r2, [sp, #36]	; 0x24
 8007ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 80a2 	beq.w	8007bfe <_vfiprintf_r+0x20e>
 8007aba:	2300      	movs	r3, #0
 8007abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ac4:	f10a 0a01 	add.w	sl, sl, #1
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	9307      	str	r3, [sp, #28]
 8007acc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ad0:	931a      	str	r3, [sp, #104]	; 0x68
 8007ad2:	4654      	mov	r4, sl
 8007ad4:	2205      	movs	r2, #5
 8007ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ada:	4858      	ldr	r0, [pc, #352]	; (8007c3c <_vfiprintf_r+0x24c>)
 8007adc:	f7f8 fb78 	bl	80001d0 <memchr>
 8007ae0:	9a04      	ldr	r2, [sp, #16]
 8007ae2:	b9d8      	cbnz	r0, 8007b1c <_vfiprintf_r+0x12c>
 8007ae4:	06d1      	lsls	r1, r2, #27
 8007ae6:	bf44      	itt	mi
 8007ae8:	2320      	movmi	r3, #32
 8007aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aee:	0713      	lsls	r3, r2, #28
 8007af0:	bf44      	itt	mi
 8007af2:	232b      	movmi	r3, #43	; 0x2b
 8007af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af8:	f89a 3000 	ldrb.w	r3, [sl]
 8007afc:	2b2a      	cmp	r3, #42	; 0x2a
 8007afe:	d015      	beq.n	8007b2c <_vfiprintf_r+0x13c>
 8007b00:	9a07      	ldr	r2, [sp, #28]
 8007b02:	4654      	mov	r4, sl
 8007b04:	2000      	movs	r0, #0
 8007b06:	f04f 0c0a 	mov.w	ip, #10
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b10:	3b30      	subs	r3, #48	; 0x30
 8007b12:	2b09      	cmp	r3, #9
 8007b14:	d94e      	bls.n	8007bb4 <_vfiprintf_r+0x1c4>
 8007b16:	b1b0      	cbz	r0, 8007b46 <_vfiprintf_r+0x156>
 8007b18:	9207      	str	r2, [sp, #28]
 8007b1a:	e014      	b.n	8007b46 <_vfiprintf_r+0x156>
 8007b1c:	eba0 0308 	sub.w	r3, r0, r8
 8007b20:	fa09 f303 	lsl.w	r3, r9, r3
 8007b24:	4313      	orrs	r3, r2
 8007b26:	9304      	str	r3, [sp, #16]
 8007b28:	46a2      	mov	sl, r4
 8007b2a:	e7d2      	b.n	8007ad2 <_vfiprintf_r+0xe2>
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	1d19      	adds	r1, r3, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	9103      	str	r1, [sp, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bfbb      	ittet	lt
 8007b38:	425b      	neglt	r3, r3
 8007b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8007b3e:	9307      	strge	r3, [sp, #28]
 8007b40:	9307      	strlt	r3, [sp, #28]
 8007b42:	bfb8      	it	lt
 8007b44:	9204      	strlt	r2, [sp, #16]
 8007b46:	7823      	ldrb	r3, [r4, #0]
 8007b48:	2b2e      	cmp	r3, #46	; 0x2e
 8007b4a:	d10c      	bne.n	8007b66 <_vfiprintf_r+0x176>
 8007b4c:	7863      	ldrb	r3, [r4, #1]
 8007b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b50:	d135      	bne.n	8007bbe <_vfiprintf_r+0x1ce>
 8007b52:	9b03      	ldr	r3, [sp, #12]
 8007b54:	1d1a      	adds	r2, r3, #4
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	9203      	str	r2, [sp, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bfb8      	it	lt
 8007b5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b62:	3402      	adds	r4, #2
 8007b64:	9305      	str	r3, [sp, #20]
 8007b66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c4c <_vfiprintf_r+0x25c>
 8007b6a:	7821      	ldrb	r1, [r4, #0]
 8007b6c:	2203      	movs	r2, #3
 8007b6e:	4650      	mov	r0, sl
 8007b70:	f7f8 fb2e 	bl	80001d0 <memchr>
 8007b74:	b140      	cbz	r0, 8007b88 <_vfiprintf_r+0x198>
 8007b76:	2340      	movs	r3, #64	; 0x40
 8007b78:	eba0 000a 	sub.w	r0, r0, sl
 8007b7c:	fa03 f000 	lsl.w	r0, r3, r0
 8007b80:	9b04      	ldr	r3, [sp, #16]
 8007b82:	4303      	orrs	r3, r0
 8007b84:	3401      	adds	r4, #1
 8007b86:	9304      	str	r3, [sp, #16]
 8007b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b8c:	482c      	ldr	r0, [pc, #176]	; (8007c40 <_vfiprintf_r+0x250>)
 8007b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b92:	2206      	movs	r2, #6
 8007b94:	f7f8 fb1c 	bl	80001d0 <memchr>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d03f      	beq.n	8007c1c <_vfiprintf_r+0x22c>
 8007b9c:	4b29      	ldr	r3, [pc, #164]	; (8007c44 <_vfiprintf_r+0x254>)
 8007b9e:	bb1b      	cbnz	r3, 8007be8 <_vfiprintf_r+0x1f8>
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	3307      	adds	r3, #7
 8007ba4:	f023 0307 	bic.w	r3, r3, #7
 8007ba8:	3308      	adds	r3, #8
 8007baa:	9303      	str	r3, [sp, #12]
 8007bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bae:	443b      	add	r3, r7
 8007bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb2:	e767      	b.n	8007a84 <_vfiprintf_r+0x94>
 8007bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bb8:	460c      	mov	r4, r1
 8007bba:	2001      	movs	r0, #1
 8007bbc:	e7a5      	b.n	8007b0a <_vfiprintf_r+0x11a>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	3401      	adds	r4, #1
 8007bc2:	9305      	str	r3, [sp, #20]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	f04f 0c0a 	mov.w	ip, #10
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd0:	3a30      	subs	r2, #48	; 0x30
 8007bd2:	2a09      	cmp	r2, #9
 8007bd4:	d903      	bls.n	8007bde <_vfiprintf_r+0x1ee>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0c5      	beq.n	8007b66 <_vfiprintf_r+0x176>
 8007bda:	9105      	str	r1, [sp, #20]
 8007bdc:	e7c3      	b.n	8007b66 <_vfiprintf_r+0x176>
 8007bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8007be2:	4604      	mov	r4, r0
 8007be4:	2301      	movs	r3, #1
 8007be6:	e7f0      	b.n	8007bca <_vfiprintf_r+0x1da>
 8007be8:	ab03      	add	r3, sp, #12
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	462a      	mov	r2, r5
 8007bee:	4b16      	ldr	r3, [pc, #88]	; (8007c48 <_vfiprintf_r+0x258>)
 8007bf0:	a904      	add	r1, sp, #16
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f3af 8000 	nop.w
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	1c78      	adds	r0, r7, #1
 8007bfc:	d1d6      	bne.n	8007bac <_vfiprintf_r+0x1bc>
 8007bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c00:	07d9      	lsls	r1, r3, #31
 8007c02:	d405      	bmi.n	8007c10 <_vfiprintf_r+0x220>
 8007c04:	89ab      	ldrh	r3, [r5, #12]
 8007c06:	059a      	lsls	r2, r3, #22
 8007c08:	d402      	bmi.n	8007c10 <_vfiprintf_r+0x220>
 8007c0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c0c:	f7ff fdb7 	bl	800777e <__retarget_lock_release_recursive>
 8007c10:	89ab      	ldrh	r3, [r5, #12]
 8007c12:	065b      	lsls	r3, r3, #25
 8007c14:	f53f af12 	bmi.w	8007a3c <_vfiprintf_r+0x4c>
 8007c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c1a:	e711      	b.n	8007a40 <_vfiprintf_r+0x50>
 8007c1c:	ab03      	add	r3, sp, #12
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	462a      	mov	r2, r5
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <_vfiprintf_r+0x258>)
 8007c24:	a904      	add	r1, sp, #16
 8007c26:	4630      	mov	r0, r6
 8007c28:	f000 f880 	bl	8007d2c <_printf_i>
 8007c2c:	e7e4      	b.n	8007bf8 <_vfiprintf_r+0x208>
 8007c2e:	bf00      	nop
 8007c30:	08009b00 	.word	0x08009b00
 8007c34:	08009b20 	.word	0x08009b20
 8007c38:	08009ae0 	.word	0x08009ae0
 8007c3c:	08009b40 	.word	0x08009b40
 8007c40:	08009b4a 	.word	0x08009b4a
 8007c44:	00000000 	.word	0x00000000
 8007c48:	080079cb 	.word	0x080079cb
 8007c4c:	08009b46 	.word	0x08009b46

08007c50 <_printf_common>:
 8007c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	4616      	mov	r6, r2
 8007c56:	4699      	mov	r9, r3
 8007c58:	688a      	ldr	r2, [r1, #8]
 8007c5a:	690b      	ldr	r3, [r1, #16]
 8007c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c60:	4293      	cmp	r3, r2
 8007c62:	bfb8      	it	lt
 8007c64:	4613      	movlt	r3, r2
 8007c66:	6033      	str	r3, [r6, #0]
 8007c68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	b10a      	cbz	r2, 8007c76 <_printf_common+0x26>
 8007c72:	3301      	adds	r3, #1
 8007c74:	6033      	str	r3, [r6, #0]
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	0699      	lsls	r1, r3, #26
 8007c7a:	bf42      	ittt	mi
 8007c7c:	6833      	ldrmi	r3, [r6, #0]
 8007c7e:	3302      	addmi	r3, #2
 8007c80:	6033      	strmi	r3, [r6, #0]
 8007c82:	6825      	ldr	r5, [r4, #0]
 8007c84:	f015 0506 	ands.w	r5, r5, #6
 8007c88:	d106      	bne.n	8007c98 <_printf_common+0x48>
 8007c8a:	f104 0a19 	add.w	sl, r4, #25
 8007c8e:	68e3      	ldr	r3, [r4, #12]
 8007c90:	6832      	ldr	r2, [r6, #0]
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	42ab      	cmp	r3, r5
 8007c96:	dc26      	bgt.n	8007ce6 <_printf_common+0x96>
 8007c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c9c:	1e13      	subs	r3, r2, #0
 8007c9e:	6822      	ldr	r2, [r4, #0]
 8007ca0:	bf18      	it	ne
 8007ca2:	2301      	movne	r3, #1
 8007ca4:	0692      	lsls	r2, r2, #26
 8007ca6:	d42b      	bmi.n	8007d00 <_printf_common+0xb0>
 8007ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cac:	4649      	mov	r1, r9
 8007cae:	4638      	mov	r0, r7
 8007cb0:	47c0      	blx	r8
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	d01e      	beq.n	8007cf4 <_printf_common+0xa4>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	68e5      	ldr	r5, [r4, #12]
 8007cba:	6832      	ldr	r2, [r6, #0]
 8007cbc:	f003 0306 	and.w	r3, r3, #6
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	bf08      	it	eq
 8007cc4:	1aad      	subeq	r5, r5, r2
 8007cc6:	68a3      	ldr	r3, [r4, #8]
 8007cc8:	6922      	ldr	r2, [r4, #16]
 8007cca:	bf0c      	ite	eq
 8007ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cd0:	2500      	movne	r5, #0
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	bfc4      	itt	gt
 8007cd6:	1a9b      	subgt	r3, r3, r2
 8007cd8:	18ed      	addgt	r5, r5, r3
 8007cda:	2600      	movs	r6, #0
 8007cdc:	341a      	adds	r4, #26
 8007cde:	42b5      	cmp	r5, r6
 8007ce0:	d11a      	bne.n	8007d18 <_printf_common+0xc8>
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	e008      	b.n	8007cf8 <_printf_common+0xa8>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4652      	mov	r2, sl
 8007cea:	4649      	mov	r1, r9
 8007cec:	4638      	mov	r0, r7
 8007cee:	47c0      	blx	r8
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d103      	bne.n	8007cfc <_printf_common+0xac>
 8007cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfc:	3501      	adds	r5, #1
 8007cfe:	e7c6      	b.n	8007c8e <_printf_common+0x3e>
 8007d00:	18e1      	adds	r1, r4, r3
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	2030      	movs	r0, #48	; 0x30
 8007d06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d0a:	4422      	add	r2, r4
 8007d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d14:	3302      	adds	r3, #2
 8007d16:	e7c7      	b.n	8007ca8 <_printf_common+0x58>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	4622      	mov	r2, r4
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	4638      	mov	r0, r7
 8007d20:	47c0      	blx	r8
 8007d22:	3001      	adds	r0, #1
 8007d24:	d0e6      	beq.n	8007cf4 <_printf_common+0xa4>
 8007d26:	3601      	adds	r6, #1
 8007d28:	e7d9      	b.n	8007cde <_printf_common+0x8e>
	...

08007d2c <_printf_i>:
 8007d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d30:	460c      	mov	r4, r1
 8007d32:	4691      	mov	r9, r2
 8007d34:	7e27      	ldrb	r7, [r4, #24]
 8007d36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d38:	2f78      	cmp	r7, #120	; 0x78
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	469a      	mov	sl, r3
 8007d3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d42:	d807      	bhi.n	8007d54 <_printf_i+0x28>
 8007d44:	2f62      	cmp	r7, #98	; 0x62
 8007d46:	d80a      	bhi.n	8007d5e <_printf_i+0x32>
 8007d48:	2f00      	cmp	r7, #0
 8007d4a:	f000 80d8 	beq.w	8007efe <_printf_i+0x1d2>
 8007d4e:	2f58      	cmp	r7, #88	; 0x58
 8007d50:	f000 80a3 	beq.w	8007e9a <_printf_i+0x16e>
 8007d54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d5c:	e03a      	b.n	8007dd4 <_printf_i+0xa8>
 8007d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d62:	2b15      	cmp	r3, #21
 8007d64:	d8f6      	bhi.n	8007d54 <_printf_i+0x28>
 8007d66:	a001      	add	r0, pc, #4	; (adr r0, 8007d6c <_printf_i+0x40>)
 8007d68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d6c:	08007dc5 	.word	0x08007dc5
 8007d70:	08007dd9 	.word	0x08007dd9
 8007d74:	08007d55 	.word	0x08007d55
 8007d78:	08007d55 	.word	0x08007d55
 8007d7c:	08007d55 	.word	0x08007d55
 8007d80:	08007d55 	.word	0x08007d55
 8007d84:	08007dd9 	.word	0x08007dd9
 8007d88:	08007d55 	.word	0x08007d55
 8007d8c:	08007d55 	.word	0x08007d55
 8007d90:	08007d55 	.word	0x08007d55
 8007d94:	08007d55 	.word	0x08007d55
 8007d98:	08007ee5 	.word	0x08007ee5
 8007d9c:	08007e09 	.word	0x08007e09
 8007da0:	08007ec7 	.word	0x08007ec7
 8007da4:	08007d55 	.word	0x08007d55
 8007da8:	08007d55 	.word	0x08007d55
 8007dac:	08007f07 	.word	0x08007f07
 8007db0:	08007d55 	.word	0x08007d55
 8007db4:	08007e09 	.word	0x08007e09
 8007db8:	08007d55 	.word	0x08007d55
 8007dbc:	08007d55 	.word	0x08007d55
 8007dc0:	08007ecf 	.word	0x08007ecf
 8007dc4:	680b      	ldr	r3, [r1, #0]
 8007dc6:	1d1a      	adds	r2, r3, #4
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	600a      	str	r2, [r1, #0]
 8007dcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e0a3      	b.n	8007f20 <_printf_i+0x1f4>
 8007dd8:	6825      	ldr	r5, [r4, #0]
 8007dda:	6808      	ldr	r0, [r1, #0]
 8007ddc:	062e      	lsls	r6, r5, #24
 8007dde:	f100 0304 	add.w	r3, r0, #4
 8007de2:	d50a      	bpl.n	8007dfa <_printf_i+0xce>
 8007de4:	6805      	ldr	r5, [r0, #0]
 8007de6:	600b      	str	r3, [r1, #0]
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	da03      	bge.n	8007df4 <_printf_i+0xc8>
 8007dec:	232d      	movs	r3, #45	; 0x2d
 8007dee:	426d      	negs	r5, r5
 8007df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df4:	485e      	ldr	r0, [pc, #376]	; (8007f70 <_printf_i+0x244>)
 8007df6:	230a      	movs	r3, #10
 8007df8:	e019      	b.n	8007e2e <_printf_i+0x102>
 8007dfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007dfe:	6805      	ldr	r5, [r0, #0]
 8007e00:	600b      	str	r3, [r1, #0]
 8007e02:	bf18      	it	ne
 8007e04:	b22d      	sxthne	r5, r5
 8007e06:	e7ef      	b.n	8007de8 <_printf_i+0xbc>
 8007e08:	680b      	ldr	r3, [r1, #0]
 8007e0a:	6825      	ldr	r5, [r4, #0]
 8007e0c:	1d18      	adds	r0, r3, #4
 8007e0e:	6008      	str	r0, [r1, #0]
 8007e10:	0628      	lsls	r0, r5, #24
 8007e12:	d501      	bpl.n	8007e18 <_printf_i+0xec>
 8007e14:	681d      	ldr	r5, [r3, #0]
 8007e16:	e002      	b.n	8007e1e <_printf_i+0xf2>
 8007e18:	0669      	lsls	r1, r5, #25
 8007e1a:	d5fb      	bpl.n	8007e14 <_printf_i+0xe8>
 8007e1c:	881d      	ldrh	r5, [r3, #0]
 8007e1e:	4854      	ldr	r0, [pc, #336]	; (8007f70 <_printf_i+0x244>)
 8007e20:	2f6f      	cmp	r7, #111	; 0x6f
 8007e22:	bf0c      	ite	eq
 8007e24:	2308      	moveq	r3, #8
 8007e26:	230a      	movne	r3, #10
 8007e28:	2100      	movs	r1, #0
 8007e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e2e:	6866      	ldr	r6, [r4, #4]
 8007e30:	60a6      	str	r6, [r4, #8]
 8007e32:	2e00      	cmp	r6, #0
 8007e34:	bfa2      	ittt	ge
 8007e36:	6821      	ldrge	r1, [r4, #0]
 8007e38:	f021 0104 	bicge.w	r1, r1, #4
 8007e3c:	6021      	strge	r1, [r4, #0]
 8007e3e:	b90d      	cbnz	r5, 8007e44 <_printf_i+0x118>
 8007e40:	2e00      	cmp	r6, #0
 8007e42:	d04d      	beq.n	8007ee0 <_printf_i+0x1b4>
 8007e44:	4616      	mov	r6, r2
 8007e46:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e4a:	fb03 5711 	mls	r7, r3, r1, r5
 8007e4e:	5dc7      	ldrb	r7, [r0, r7]
 8007e50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e54:	462f      	mov	r7, r5
 8007e56:	42bb      	cmp	r3, r7
 8007e58:	460d      	mov	r5, r1
 8007e5a:	d9f4      	bls.n	8007e46 <_printf_i+0x11a>
 8007e5c:	2b08      	cmp	r3, #8
 8007e5e:	d10b      	bne.n	8007e78 <_printf_i+0x14c>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	07df      	lsls	r7, r3, #31
 8007e64:	d508      	bpl.n	8007e78 <_printf_i+0x14c>
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	6861      	ldr	r1, [r4, #4]
 8007e6a:	4299      	cmp	r1, r3
 8007e6c:	bfde      	ittt	le
 8007e6e:	2330      	movle	r3, #48	; 0x30
 8007e70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e74:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007e78:	1b92      	subs	r2, r2, r6
 8007e7a:	6122      	str	r2, [r4, #16]
 8007e7c:	f8cd a000 	str.w	sl, [sp]
 8007e80:	464b      	mov	r3, r9
 8007e82:	aa03      	add	r2, sp, #12
 8007e84:	4621      	mov	r1, r4
 8007e86:	4640      	mov	r0, r8
 8007e88:	f7ff fee2 	bl	8007c50 <_printf_common>
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	d14c      	bne.n	8007f2a <_printf_i+0x1fe>
 8007e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e94:	b004      	add	sp, #16
 8007e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9a:	4835      	ldr	r0, [pc, #212]	; (8007f70 <_printf_i+0x244>)
 8007e9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	680e      	ldr	r6, [r1, #0]
 8007ea4:	061f      	lsls	r7, r3, #24
 8007ea6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007eaa:	600e      	str	r6, [r1, #0]
 8007eac:	d514      	bpl.n	8007ed8 <_printf_i+0x1ac>
 8007eae:	07d9      	lsls	r1, r3, #31
 8007eb0:	bf44      	itt	mi
 8007eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8007eb6:	6023      	strmi	r3, [r4, #0]
 8007eb8:	b91d      	cbnz	r5, 8007ec2 <_printf_i+0x196>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	f023 0320 	bic.w	r3, r3, #32
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	2310      	movs	r3, #16
 8007ec4:	e7b0      	b.n	8007e28 <_printf_i+0xfc>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	f043 0320 	orr.w	r3, r3, #32
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	2378      	movs	r3, #120	; 0x78
 8007ed0:	4828      	ldr	r0, [pc, #160]	; (8007f74 <_printf_i+0x248>)
 8007ed2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ed6:	e7e3      	b.n	8007ea0 <_printf_i+0x174>
 8007ed8:	065e      	lsls	r6, r3, #25
 8007eda:	bf48      	it	mi
 8007edc:	b2ad      	uxthmi	r5, r5
 8007ede:	e7e6      	b.n	8007eae <_printf_i+0x182>
 8007ee0:	4616      	mov	r6, r2
 8007ee2:	e7bb      	b.n	8007e5c <_printf_i+0x130>
 8007ee4:	680b      	ldr	r3, [r1, #0]
 8007ee6:	6826      	ldr	r6, [r4, #0]
 8007ee8:	6960      	ldr	r0, [r4, #20]
 8007eea:	1d1d      	adds	r5, r3, #4
 8007eec:	600d      	str	r5, [r1, #0]
 8007eee:	0635      	lsls	r5, r6, #24
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	d501      	bpl.n	8007ef8 <_printf_i+0x1cc>
 8007ef4:	6018      	str	r0, [r3, #0]
 8007ef6:	e002      	b.n	8007efe <_printf_i+0x1d2>
 8007ef8:	0671      	lsls	r1, r6, #25
 8007efa:	d5fb      	bpl.n	8007ef4 <_printf_i+0x1c8>
 8007efc:	8018      	strh	r0, [r3, #0]
 8007efe:	2300      	movs	r3, #0
 8007f00:	6123      	str	r3, [r4, #16]
 8007f02:	4616      	mov	r6, r2
 8007f04:	e7ba      	b.n	8007e7c <_printf_i+0x150>
 8007f06:	680b      	ldr	r3, [r1, #0]
 8007f08:	1d1a      	adds	r2, r3, #4
 8007f0a:	600a      	str	r2, [r1, #0]
 8007f0c:	681e      	ldr	r6, [r3, #0]
 8007f0e:	6862      	ldr	r2, [r4, #4]
 8007f10:	2100      	movs	r1, #0
 8007f12:	4630      	mov	r0, r6
 8007f14:	f7f8 f95c 	bl	80001d0 <memchr>
 8007f18:	b108      	cbz	r0, 8007f1e <_printf_i+0x1f2>
 8007f1a:	1b80      	subs	r0, r0, r6
 8007f1c:	6060      	str	r0, [r4, #4]
 8007f1e:	6863      	ldr	r3, [r4, #4]
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	2300      	movs	r3, #0
 8007f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f28:	e7a8      	b.n	8007e7c <_printf_i+0x150>
 8007f2a:	6923      	ldr	r3, [r4, #16]
 8007f2c:	4632      	mov	r2, r6
 8007f2e:	4649      	mov	r1, r9
 8007f30:	4640      	mov	r0, r8
 8007f32:	47d0      	blx	sl
 8007f34:	3001      	adds	r0, #1
 8007f36:	d0ab      	beq.n	8007e90 <_printf_i+0x164>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	079b      	lsls	r3, r3, #30
 8007f3c:	d413      	bmi.n	8007f66 <_printf_i+0x23a>
 8007f3e:	68e0      	ldr	r0, [r4, #12]
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	4298      	cmp	r0, r3
 8007f44:	bfb8      	it	lt
 8007f46:	4618      	movlt	r0, r3
 8007f48:	e7a4      	b.n	8007e94 <_printf_i+0x168>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4640      	mov	r0, r8
 8007f52:	47d0      	blx	sl
 8007f54:	3001      	adds	r0, #1
 8007f56:	d09b      	beq.n	8007e90 <_printf_i+0x164>
 8007f58:	3501      	adds	r5, #1
 8007f5a:	68e3      	ldr	r3, [r4, #12]
 8007f5c:	9903      	ldr	r1, [sp, #12]
 8007f5e:	1a5b      	subs	r3, r3, r1
 8007f60:	42ab      	cmp	r3, r5
 8007f62:	dcf2      	bgt.n	8007f4a <_printf_i+0x21e>
 8007f64:	e7eb      	b.n	8007f3e <_printf_i+0x212>
 8007f66:	2500      	movs	r5, #0
 8007f68:	f104 0619 	add.w	r6, r4, #25
 8007f6c:	e7f5      	b.n	8007f5a <_printf_i+0x22e>
 8007f6e:	bf00      	nop
 8007f70:	08009b51 	.word	0x08009b51
 8007f74:	08009b62 	.word	0x08009b62

08007f78 <_sbrk_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d06      	ldr	r5, [pc, #24]	; (8007f94 <_sbrk_r+0x1c>)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	602b      	str	r3, [r5, #0]
 8007f84:	f7fa fa9c 	bl	80024c0 <_sbrk>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d102      	bne.n	8007f92 <_sbrk_r+0x1a>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	b103      	cbz	r3, 8007f92 <_sbrk_r+0x1a>
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	20000548 	.word	0x20000548

08007f98 <__sread>:
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa0:	f000 f8a0 	bl	80080e4 <_read_r>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	bfab      	itete	ge
 8007fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007faa:	89a3      	ldrhlt	r3, [r4, #12]
 8007fac:	181b      	addge	r3, r3, r0
 8007fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fb2:	bfac      	ite	ge
 8007fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fb6:	81a3      	strhlt	r3, [r4, #12]
 8007fb8:	bd10      	pop	{r4, pc}

08007fba <__swrite>:
 8007fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fbe:	461f      	mov	r7, r3
 8007fc0:	898b      	ldrh	r3, [r1, #12]
 8007fc2:	05db      	lsls	r3, r3, #23
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	4616      	mov	r6, r2
 8007fca:	d505      	bpl.n	8007fd8 <__swrite+0x1e>
 8007fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f000 f868 	bl	80080a8 <_lseek_r>
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fe2:	81a3      	strh	r3, [r4, #12]
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	463b      	mov	r3, r7
 8007fe8:	4628      	mov	r0, r5
 8007fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fee:	f000 b817 	b.w	8008020 <_write_r>

08007ff2 <__sseek>:
 8007ff2:	b510      	push	{r4, lr}
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ffa:	f000 f855 	bl	80080a8 <_lseek_r>
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	bf15      	itete	ne
 8008004:	6560      	strne	r0, [r4, #84]	; 0x54
 8008006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800800a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800800e:	81a3      	strheq	r3, [r4, #12]
 8008010:	bf18      	it	ne
 8008012:	81a3      	strhne	r3, [r4, #12]
 8008014:	bd10      	pop	{r4, pc}

08008016 <__sclose>:
 8008016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800801a:	f000 b813 	b.w	8008044 <_close_r>
	...

08008020 <_write_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4d07      	ldr	r5, [pc, #28]	; (8008040 <_write_r+0x20>)
 8008024:	4604      	mov	r4, r0
 8008026:	4608      	mov	r0, r1
 8008028:	4611      	mov	r1, r2
 800802a:	2200      	movs	r2, #0
 800802c:	602a      	str	r2, [r5, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	f7f8 fe7a 	bl	8000d28 <_write>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d102      	bne.n	800803e <_write_r+0x1e>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	b103      	cbz	r3, 800803e <_write_r+0x1e>
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	20000548 	.word	0x20000548

08008044 <_close_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	4d06      	ldr	r5, [pc, #24]	; (8008060 <_close_r+0x1c>)
 8008048:	2300      	movs	r3, #0
 800804a:	4604      	mov	r4, r0
 800804c:	4608      	mov	r0, r1
 800804e:	602b      	str	r3, [r5, #0]
 8008050:	f7fa fa01 	bl	8002456 <_close>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_close_r+0x1a>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_close_r+0x1a>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	20000548 	.word	0x20000548

08008064 <_fstat_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d07      	ldr	r5, [pc, #28]	; (8008084 <_fstat_r+0x20>)
 8008068:	2300      	movs	r3, #0
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	4611      	mov	r1, r2
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	f7fa f9fc 	bl	800246e <_fstat>
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	d102      	bne.n	8008080 <_fstat_r+0x1c>
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	b103      	cbz	r3, 8008080 <_fstat_r+0x1c>
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	bd38      	pop	{r3, r4, r5, pc}
 8008082:	bf00      	nop
 8008084:	20000548 	.word	0x20000548

08008088 <_isatty_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d06      	ldr	r5, [pc, #24]	; (80080a4 <_isatty_r+0x1c>)
 800808c:	2300      	movs	r3, #0
 800808e:	4604      	mov	r4, r0
 8008090:	4608      	mov	r0, r1
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	f7fa f9fb 	bl	800248e <_isatty>
 8008098:	1c43      	adds	r3, r0, #1
 800809a:	d102      	bne.n	80080a2 <_isatty_r+0x1a>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	b103      	cbz	r3, 80080a2 <_isatty_r+0x1a>
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	20000548 	.word	0x20000548

080080a8 <_lseek_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d07      	ldr	r5, [pc, #28]	; (80080c8 <_lseek_r+0x20>)
 80080ac:	4604      	mov	r4, r0
 80080ae:	4608      	mov	r0, r1
 80080b0:	4611      	mov	r1, r2
 80080b2:	2200      	movs	r2, #0
 80080b4:	602a      	str	r2, [r5, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	f7fa f9f4 	bl	80024a4 <_lseek>
 80080bc:	1c43      	adds	r3, r0, #1
 80080be:	d102      	bne.n	80080c6 <_lseek_r+0x1e>
 80080c0:	682b      	ldr	r3, [r5, #0]
 80080c2:	b103      	cbz	r3, 80080c6 <_lseek_r+0x1e>
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	20000548 	.word	0x20000548

080080cc <__malloc_lock>:
 80080cc:	4801      	ldr	r0, [pc, #4]	; (80080d4 <__malloc_lock+0x8>)
 80080ce:	f7ff bb55 	b.w	800777c <__retarget_lock_acquire_recursive>
 80080d2:	bf00      	nop
 80080d4:	20000540 	.word	0x20000540

080080d8 <__malloc_unlock>:
 80080d8:	4801      	ldr	r0, [pc, #4]	; (80080e0 <__malloc_unlock+0x8>)
 80080da:	f7ff bb50 	b.w	800777e <__retarget_lock_release_recursive>
 80080de:	bf00      	nop
 80080e0:	20000540 	.word	0x20000540

080080e4 <_read_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4d07      	ldr	r5, [pc, #28]	; (8008104 <_read_r+0x20>)
 80080e8:	4604      	mov	r4, r0
 80080ea:	4608      	mov	r0, r1
 80080ec:	4611      	mov	r1, r2
 80080ee:	2200      	movs	r2, #0
 80080f0:	602a      	str	r2, [r5, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	f7fa f992 	bl	800241c <_read>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_read_r+0x1e>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_read_r+0x1e>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	20000548 	.word	0x20000548

08008108 <cos>:
 8008108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800810a:	ec53 2b10 	vmov	r2, r3, d0
 800810e:	4824      	ldr	r0, [pc, #144]	; (80081a0 <cos+0x98>)
 8008110:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008114:	4281      	cmp	r1, r0
 8008116:	dc06      	bgt.n	8008126 <cos+0x1e>
 8008118:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8008198 <cos+0x90>
 800811c:	f000 fe28 	bl	8008d70 <__kernel_cos>
 8008120:	ec51 0b10 	vmov	r0, r1, d0
 8008124:	e007      	b.n	8008136 <cos+0x2e>
 8008126:	481f      	ldr	r0, [pc, #124]	; (80081a4 <cos+0x9c>)
 8008128:	4281      	cmp	r1, r0
 800812a:	dd09      	ble.n	8008140 <cos+0x38>
 800812c:	ee10 0a10 	vmov	r0, s0
 8008130:	4619      	mov	r1, r3
 8008132:	f7f8 f8a1 	bl	8000278 <__aeabi_dsub>
 8008136:	ec41 0b10 	vmov	d0, r0, r1
 800813a:	b005      	add	sp, #20
 800813c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008140:	4668      	mov	r0, sp
 8008142:	f000 fb55 	bl	80087f0 <__ieee754_rem_pio2>
 8008146:	f000 0003 	and.w	r0, r0, #3
 800814a:	2801      	cmp	r0, #1
 800814c:	d007      	beq.n	800815e <cos+0x56>
 800814e:	2802      	cmp	r0, #2
 8008150:	d012      	beq.n	8008178 <cos+0x70>
 8008152:	b9c0      	cbnz	r0, 8008186 <cos+0x7e>
 8008154:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008158:	ed9d 0b00 	vldr	d0, [sp]
 800815c:	e7de      	b.n	800811c <cos+0x14>
 800815e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008162:	ed9d 0b00 	vldr	d0, [sp]
 8008166:	f001 fa0b 	bl	8009580 <__kernel_sin>
 800816a:	ec53 2b10 	vmov	r2, r3, d0
 800816e:	ee10 0a10 	vmov	r0, s0
 8008172:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008176:	e7de      	b.n	8008136 <cos+0x2e>
 8008178:	ed9d 1b02 	vldr	d1, [sp, #8]
 800817c:	ed9d 0b00 	vldr	d0, [sp]
 8008180:	f000 fdf6 	bl	8008d70 <__kernel_cos>
 8008184:	e7f1      	b.n	800816a <cos+0x62>
 8008186:	ed9d 1b02 	vldr	d1, [sp, #8]
 800818a:	ed9d 0b00 	vldr	d0, [sp]
 800818e:	2001      	movs	r0, #1
 8008190:	f001 f9f6 	bl	8009580 <__kernel_sin>
 8008194:	e7c4      	b.n	8008120 <cos+0x18>
 8008196:	bf00      	nop
	...
 80081a0:	3fe921fb 	.word	0x3fe921fb
 80081a4:	7fefffff 	.word	0x7fefffff

080081a8 <sin>:
 80081a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081aa:	ec53 2b10 	vmov	r2, r3, d0
 80081ae:	4826      	ldr	r0, [pc, #152]	; (8008248 <sin+0xa0>)
 80081b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081b4:	4281      	cmp	r1, r0
 80081b6:	dc07      	bgt.n	80081c8 <sin+0x20>
 80081b8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008240 <sin+0x98>
 80081bc:	2000      	movs	r0, #0
 80081be:	f001 f9df 	bl	8009580 <__kernel_sin>
 80081c2:	ec51 0b10 	vmov	r0, r1, d0
 80081c6:	e007      	b.n	80081d8 <sin+0x30>
 80081c8:	4820      	ldr	r0, [pc, #128]	; (800824c <sin+0xa4>)
 80081ca:	4281      	cmp	r1, r0
 80081cc:	dd09      	ble.n	80081e2 <sin+0x3a>
 80081ce:	ee10 0a10 	vmov	r0, s0
 80081d2:	4619      	mov	r1, r3
 80081d4:	f7f8 f850 	bl	8000278 <__aeabi_dsub>
 80081d8:	ec41 0b10 	vmov	d0, r0, r1
 80081dc:	b005      	add	sp, #20
 80081de:	f85d fb04 	ldr.w	pc, [sp], #4
 80081e2:	4668      	mov	r0, sp
 80081e4:	f000 fb04 	bl	80087f0 <__ieee754_rem_pio2>
 80081e8:	f000 0003 	and.w	r0, r0, #3
 80081ec:	2801      	cmp	r0, #1
 80081ee:	d008      	beq.n	8008202 <sin+0x5a>
 80081f0:	2802      	cmp	r0, #2
 80081f2:	d00d      	beq.n	8008210 <sin+0x68>
 80081f4:	b9d0      	cbnz	r0, 800822c <sin+0x84>
 80081f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80081fa:	ed9d 0b00 	vldr	d0, [sp]
 80081fe:	2001      	movs	r0, #1
 8008200:	e7dd      	b.n	80081be <sin+0x16>
 8008202:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008206:	ed9d 0b00 	vldr	d0, [sp]
 800820a:	f000 fdb1 	bl	8008d70 <__kernel_cos>
 800820e:	e7d8      	b.n	80081c2 <sin+0x1a>
 8008210:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008214:	ed9d 0b00 	vldr	d0, [sp]
 8008218:	2001      	movs	r0, #1
 800821a:	f001 f9b1 	bl	8009580 <__kernel_sin>
 800821e:	ec53 2b10 	vmov	r2, r3, d0
 8008222:	ee10 0a10 	vmov	r0, s0
 8008226:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800822a:	e7d5      	b.n	80081d8 <sin+0x30>
 800822c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008230:	ed9d 0b00 	vldr	d0, [sp]
 8008234:	f000 fd9c 	bl	8008d70 <__kernel_cos>
 8008238:	e7f1      	b.n	800821e <sin+0x76>
 800823a:	bf00      	nop
 800823c:	f3af 8000 	nop.w
	...
 8008248:	3fe921fb 	.word	0x3fe921fb
 800824c:	7fefffff 	.word	0x7fefffff

08008250 <acos>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	ed2d 8b02 	vpush	{d8}
 8008256:	ec55 4b10 	vmov	r4, r5, d0
 800825a:	f000 f869 	bl	8008330 <__ieee754_acos>
 800825e:	4b16      	ldr	r3, [pc, #88]	; (80082b8 <acos+0x68>)
 8008260:	eeb0 8a40 	vmov.f32	s16, s0
 8008264:	eef0 8a60 	vmov.f32	s17, s1
 8008268:	f993 3000 	ldrsb.w	r3, [r3]
 800826c:	3301      	adds	r3, #1
 800826e:	d01c      	beq.n	80082aa <acos+0x5a>
 8008270:	4622      	mov	r2, r4
 8008272:	462b      	mov	r3, r5
 8008274:	4620      	mov	r0, r4
 8008276:	4629      	mov	r1, r5
 8008278:	f7f8 fc50 	bl	8000b1c <__aeabi_dcmpun>
 800827c:	b9a8      	cbnz	r0, 80082aa <acos+0x5a>
 800827e:	ec45 4b10 	vmov	d0, r4, r5
 8008282:	f001 fa3b 	bl	80096fc <fabs>
 8008286:	4b0d      	ldr	r3, [pc, #52]	; (80082bc <acos+0x6c>)
 8008288:	ec51 0b10 	vmov	r0, r1, d0
 800828c:	2200      	movs	r2, #0
 800828e:	f7f8 fc3b 	bl	8000b08 <__aeabi_dcmpgt>
 8008292:	b150      	cbz	r0, 80082aa <acos+0x5a>
 8008294:	f7fe ff2c 	bl	80070f0 <__errno>
 8008298:	ecbd 8b02 	vpop	{d8}
 800829c:	2321      	movs	r3, #33	; 0x21
 800829e:	6003      	str	r3, [r0, #0]
 80082a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082a4:	4806      	ldr	r0, [pc, #24]	; (80082c0 <acos+0x70>)
 80082a6:	f001 bab3 	b.w	8009810 <nan>
 80082aa:	eeb0 0a48 	vmov.f32	s0, s16
 80082ae:	eef0 0a68 	vmov.f32	s1, s17
 80082b2:	ecbd 8b02 	vpop	{d8}
 80082b6:	bd38      	pop	{r3, r4, r5, pc}
 80082b8:	20000070 	.word	0x20000070
 80082bc:	3ff00000 	.word	0x3ff00000
 80082c0:	08009b45 	.word	0x08009b45

080082c4 <sqrt>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	ed2d 8b02 	vpush	{d8}
 80082ca:	ec55 4b10 	vmov	r4, r5, d0
 80082ce:	f000 fc99 	bl	8008c04 <__ieee754_sqrt>
 80082d2:	4b15      	ldr	r3, [pc, #84]	; (8008328 <sqrt+0x64>)
 80082d4:	eeb0 8a40 	vmov.f32	s16, s0
 80082d8:	eef0 8a60 	vmov.f32	s17, s1
 80082dc:	f993 3000 	ldrsb.w	r3, [r3]
 80082e0:	3301      	adds	r3, #1
 80082e2:	d019      	beq.n	8008318 <sqrt+0x54>
 80082e4:	4622      	mov	r2, r4
 80082e6:	462b      	mov	r3, r5
 80082e8:	4620      	mov	r0, r4
 80082ea:	4629      	mov	r1, r5
 80082ec:	f7f8 fc16 	bl	8000b1c <__aeabi_dcmpun>
 80082f0:	b990      	cbnz	r0, 8008318 <sqrt+0x54>
 80082f2:	2200      	movs	r2, #0
 80082f4:	2300      	movs	r3, #0
 80082f6:	4620      	mov	r0, r4
 80082f8:	4629      	mov	r1, r5
 80082fa:	f7f8 fbe7 	bl	8000acc <__aeabi_dcmplt>
 80082fe:	b158      	cbz	r0, 8008318 <sqrt+0x54>
 8008300:	f7fe fef6 	bl	80070f0 <__errno>
 8008304:	2321      	movs	r3, #33	; 0x21
 8008306:	6003      	str	r3, [r0, #0]
 8008308:	2200      	movs	r2, #0
 800830a:	2300      	movs	r3, #0
 800830c:	4610      	mov	r0, r2
 800830e:	4619      	mov	r1, r3
 8008310:	f7f8 fa94 	bl	800083c <__aeabi_ddiv>
 8008314:	ec41 0b18 	vmov	d8, r0, r1
 8008318:	eeb0 0a48 	vmov.f32	s0, s16
 800831c:	eef0 0a68 	vmov.f32	s1, s17
 8008320:	ecbd 8b02 	vpop	{d8}
 8008324:	bd38      	pop	{r3, r4, r5, pc}
 8008326:	bf00      	nop
 8008328:	20000070 	.word	0x20000070
 800832c:	00000000 	.word	0x00000000

08008330 <__ieee754_acos>:
 8008330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	ec55 4b10 	vmov	r4, r5, d0
 8008338:	49b7      	ldr	r1, [pc, #732]	; (8008618 <__ieee754_acos+0x2e8>)
 800833a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800833e:	428b      	cmp	r3, r1
 8008340:	dd1b      	ble.n	800837a <__ieee754_acos+0x4a>
 8008342:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8008346:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800834a:	4323      	orrs	r3, r4
 800834c:	d106      	bne.n	800835c <__ieee754_acos+0x2c>
 800834e:	2d00      	cmp	r5, #0
 8008350:	f300 8211 	bgt.w	8008776 <__ieee754_acos+0x446>
 8008354:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80085b0 <__ieee754_acos+0x280>
 8008358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800835c:	ee10 2a10 	vmov	r2, s0
 8008360:	462b      	mov	r3, r5
 8008362:	ee10 0a10 	vmov	r0, s0
 8008366:	4629      	mov	r1, r5
 8008368:	f7f7 ff86 	bl	8000278 <__aeabi_dsub>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	f7f8 fa64 	bl	800083c <__aeabi_ddiv>
 8008374:	ec41 0b10 	vmov	d0, r0, r1
 8008378:	e7ee      	b.n	8008358 <__ieee754_acos+0x28>
 800837a:	49a8      	ldr	r1, [pc, #672]	; (800861c <__ieee754_acos+0x2ec>)
 800837c:	428b      	cmp	r3, r1
 800837e:	f300 8087 	bgt.w	8008490 <__ieee754_acos+0x160>
 8008382:	4aa7      	ldr	r2, [pc, #668]	; (8008620 <__ieee754_acos+0x2f0>)
 8008384:	4293      	cmp	r3, r2
 8008386:	f340 81f9 	ble.w	800877c <__ieee754_acos+0x44c>
 800838a:	ee10 2a10 	vmov	r2, s0
 800838e:	ee10 0a10 	vmov	r0, s0
 8008392:	462b      	mov	r3, r5
 8008394:	4629      	mov	r1, r5
 8008396:	f7f8 f927 	bl	80005e8 <__aeabi_dmul>
 800839a:	a387      	add	r3, pc, #540	; (adr r3, 80085b8 <__ieee754_acos+0x288>)
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	4606      	mov	r6, r0
 80083a2:	460f      	mov	r7, r1
 80083a4:	f7f8 f920 	bl	80005e8 <__aeabi_dmul>
 80083a8:	a385      	add	r3, pc, #532	; (adr r3, 80085c0 <__ieee754_acos+0x290>)
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	f7f7 ff65 	bl	800027c <__adddf3>
 80083b2:	4632      	mov	r2, r6
 80083b4:	463b      	mov	r3, r7
 80083b6:	f7f8 f917 	bl	80005e8 <__aeabi_dmul>
 80083ba:	a383      	add	r3, pc, #524	; (adr r3, 80085c8 <__ieee754_acos+0x298>)
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	f7f7 ff5a 	bl	8000278 <__aeabi_dsub>
 80083c4:	4632      	mov	r2, r6
 80083c6:	463b      	mov	r3, r7
 80083c8:	f7f8 f90e 	bl	80005e8 <__aeabi_dmul>
 80083cc:	a380      	add	r3, pc, #512	; (adr r3, 80085d0 <__ieee754_acos+0x2a0>)
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	f7f7 ff53 	bl	800027c <__adddf3>
 80083d6:	4632      	mov	r2, r6
 80083d8:	463b      	mov	r3, r7
 80083da:	f7f8 f905 	bl	80005e8 <__aeabi_dmul>
 80083de:	a37e      	add	r3, pc, #504	; (adr r3, 80085d8 <__ieee754_acos+0x2a8>)
 80083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e4:	f7f7 ff48 	bl	8000278 <__aeabi_dsub>
 80083e8:	4632      	mov	r2, r6
 80083ea:	463b      	mov	r3, r7
 80083ec:	f7f8 f8fc 	bl	80005e8 <__aeabi_dmul>
 80083f0:	a37b      	add	r3, pc, #492	; (adr r3, 80085e0 <__ieee754_acos+0x2b0>)
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	f7f7 ff41 	bl	800027c <__adddf3>
 80083fa:	4632      	mov	r2, r6
 80083fc:	463b      	mov	r3, r7
 80083fe:	f7f8 f8f3 	bl	80005e8 <__aeabi_dmul>
 8008402:	a379      	add	r3, pc, #484	; (adr r3, 80085e8 <__ieee754_acos+0x2b8>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	4680      	mov	r8, r0
 800840a:	4689      	mov	r9, r1
 800840c:	4630      	mov	r0, r6
 800840e:	4639      	mov	r1, r7
 8008410:	f7f8 f8ea 	bl	80005e8 <__aeabi_dmul>
 8008414:	a376      	add	r3, pc, #472	; (adr r3, 80085f0 <__ieee754_acos+0x2c0>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f7f7 ff2d 	bl	8000278 <__aeabi_dsub>
 800841e:	4632      	mov	r2, r6
 8008420:	463b      	mov	r3, r7
 8008422:	f7f8 f8e1 	bl	80005e8 <__aeabi_dmul>
 8008426:	a374      	add	r3, pc, #464	; (adr r3, 80085f8 <__ieee754_acos+0x2c8>)
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f7f7 ff26 	bl	800027c <__adddf3>
 8008430:	4632      	mov	r2, r6
 8008432:	463b      	mov	r3, r7
 8008434:	f7f8 f8d8 	bl	80005e8 <__aeabi_dmul>
 8008438:	a371      	add	r3, pc, #452	; (adr r3, 8008600 <__ieee754_acos+0x2d0>)
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	f7f7 ff1b 	bl	8000278 <__aeabi_dsub>
 8008442:	4632      	mov	r2, r6
 8008444:	463b      	mov	r3, r7
 8008446:	f7f8 f8cf 	bl	80005e8 <__aeabi_dmul>
 800844a:	4b76      	ldr	r3, [pc, #472]	; (8008624 <__ieee754_acos+0x2f4>)
 800844c:	2200      	movs	r2, #0
 800844e:	f7f7 ff15 	bl	800027c <__adddf3>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4640      	mov	r0, r8
 8008458:	4649      	mov	r1, r9
 800845a:	f7f8 f9ef 	bl	800083c <__aeabi_ddiv>
 800845e:	4622      	mov	r2, r4
 8008460:	462b      	mov	r3, r5
 8008462:	f7f8 f8c1 	bl	80005e8 <__aeabi_dmul>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	a167      	add	r1, pc, #412	; (adr r1, 8008608 <__ieee754_acos+0x2d8>)
 800846c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008470:	f7f7 ff02 	bl	8000278 <__aeabi_dsub>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4620      	mov	r0, r4
 800847a:	4629      	mov	r1, r5
 800847c:	f7f7 fefc 	bl	8000278 <__aeabi_dsub>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	a162      	add	r1, pc, #392	; (adr r1, 8008610 <__ieee754_acos+0x2e0>)
 8008486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800848a:	f7f7 fef5 	bl	8000278 <__aeabi_dsub>
 800848e:	e771      	b.n	8008374 <__ieee754_acos+0x44>
 8008490:	2d00      	cmp	r5, #0
 8008492:	f280 80cb 	bge.w	800862c <__ieee754_acos+0x2fc>
 8008496:	ee10 0a10 	vmov	r0, s0
 800849a:	4b62      	ldr	r3, [pc, #392]	; (8008624 <__ieee754_acos+0x2f4>)
 800849c:	2200      	movs	r2, #0
 800849e:	4629      	mov	r1, r5
 80084a0:	f7f7 feec 	bl	800027c <__adddf3>
 80084a4:	4b60      	ldr	r3, [pc, #384]	; (8008628 <__ieee754_acos+0x2f8>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	f7f8 f89e 	bl	80005e8 <__aeabi_dmul>
 80084ac:	a342      	add	r3, pc, #264	; (adr r3, 80085b8 <__ieee754_acos+0x288>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	4604      	mov	r4, r0
 80084b4:	460d      	mov	r5, r1
 80084b6:	f7f8 f897 	bl	80005e8 <__aeabi_dmul>
 80084ba:	a341      	add	r3, pc, #260	; (adr r3, 80085c0 <__ieee754_acos+0x290>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f7 fedc 	bl	800027c <__adddf3>
 80084c4:	4622      	mov	r2, r4
 80084c6:	462b      	mov	r3, r5
 80084c8:	f7f8 f88e 	bl	80005e8 <__aeabi_dmul>
 80084cc:	a33e      	add	r3, pc, #248	; (adr r3, 80085c8 <__ieee754_acos+0x298>)
 80084ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d2:	f7f7 fed1 	bl	8000278 <__aeabi_dsub>
 80084d6:	4622      	mov	r2, r4
 80084d8:	462b      	mov	r3, r5
 80084da:	f7f8 f885 	bl	80005e8 <__aeabi_dmul>
 80084de:	a33c      	add	r3, pc, #240	; (adr r3, 80085d0 <__ieee754_acos+0x2a0>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	f7f7 feca 	bl	800027c <__adddf3>
 80084e8:	4622      	mov	r2, r4
 80084ea:	462b      	mov	r3, r5
 80084ec:	f7f8 f87c 	bl	80005e8 <__aeabi_dmul>
 80084f0:	a339      	add	r3, pc, #228	; (adr r3, 80085d8 <__ieee754_acos+0x2a8>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f7f7 febf 	bl	8000278 <__aeabi_dsub>
 80084fa:	4622      	mov	r2, r4
 80084fc:	462b      	mov	r3, r5
 80084fe:	f7f8 f873 	bl	80005e8 <__aeabi_dmul>
 8008502:	a337      	add	r3, pc, #220	; (adr r3, 80085e0 <__ieee754_acos+0x2b0>)
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	f7f7 feb8 	bl	800027c <__adddf3>
 800850c:	4622      	mov	r2, r4
 800850e:	462b      	mov	r3, r5
 8008510:	f7f8 f86a 	bl	80005e8 <__aeabi_dmul>
 8008514:	ec45 4b10 	vmov	d0, r4, r5
 8008518:	4680      	mov	r8, r0
 800851a:	4689      	mov	r9, r1
 800851c:	f000 fb72 	bl	8008c04 <__ieee754_sqrt>
 8008520:	a331      	add	r3, pc, #196	; (adr r3, 80085e8 <__ieee754_acos+0x2b8>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	4620      	mov	r0, r4
 8008528:	4629      	mov	r1, r5
 800852a:	ec57 6b10 	vmov	r6, r7, d0
 800852e:	f7f8 f85b 	bl	80005e8 <__aeabi_dmul>
 8008532:	a32f      	add	r3, pc, #188	; (adr r3, 80085f0 <__ieee754_acos+0x2c0>)
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	f7f7 fe9e 	bl	8000278 <__aeabi_dsub>
 800853c:	4622      	mov	r2, r4
 800853e:	462b      	mov	r3, r5
 8008540:	f7f8 f852 	bl	80005e8 <__aeabi_dmul>
 8008544:	a32c      	add	r3, pc, #176	; (adr r3, 80085f8 <__ieee754_acos+0x2c8>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	f7f7 fe97 	bl	800027c <__adddf3>
 800854e:	4622      	mov	r2, r4
 8008550:	462b      	mov	r3, r5
 8008552:	f7f8 f849 	bl	80005e8 <__aeabi_dmul>
 8008556:	a32a      	add	r3, pc, #168	; (adr r3, 8008600 <__ieee754_acos+0x2d0>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f7f7 fe8c 	bl	8000278 <__aeabi_dsub>
 8008560:	4622      	mov	r2, r4
 8008562:	462b      	mov	r3, r5
 8008564:	f7f8 f840 	bl	80005e8 <__aeabi_dmul>
 8008568:	4b2e      	ldr	r3, [pc, #184]	; (8008624 <__ieee754_acos+0x2f4>)
 800856a:	2200      	movs	r2, #0
 800856c:	f7f7 fe86 	bl	800027c <__adddf3>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4640      	mov	r0, r8
 8008576:	4649      	mov	r1, r9
 8008578:	f7f8 f960 	bl	800083c <__aeabi_ddiv>
 800857c:	4632      	mov	r2, r6
 800857e:	463b      	mov	r3, r7
 8008580:	f7f8 f832 	bl	80005e8 <__aeabi_dmul>
 8008584:	a320      	add	r3, pc, #128	; (adr r3, 8008608 <__ieee754_acos+0x2d8>)
 8008586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858a:	f7f7 fe75 	bl	8000278 <__aeabi_dsub>
 800858e:	4632      	mov	r2, r6
 8008590:	463b      	mov	r3, r7
 8008592:	f7f7 fe73 	bl	800027c <__adddf3>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	f7f7 fe6f 	bl	800027c <__adddf3>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	a103      	add	r1, pc, #12	; (adr r1, 80085b0 <__ieee754_acos+0x280>)
 80085a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085a8:	e76f      	b.n	800848a <__ieee754_acos+0x15a>
 80085aa:	bf00      	nop
 80085ac:	f3af 8000 	nop.w
 80085b0:	54442d18 	.word	0x54442d18
 80085b4:	400921fb 	.word	0x400921fb
 80085b8:	0dfdf709 	.word	0x0dfdf709
 80085bc:	3f023de1 	.word	0x3f023de1
 80085c0:	7501b288 	.word	0x7501b288
 80085c4:	3f49efe0 	.word	0x3f49efe0
 80085c8:	b5688f3b 	.word	0xb5688f3b
 80085cc:	3fa48228 	.word	0x3fa48228
 80085d0:	0e884455 	.word	0x0e884455
 80085d4:	3fc9c155 	.word	0x3fc9c155
 80085d8:	03eb6f7d 	.word	0x03eb6f7d
 80085dc:	3fd4d612 	.word	0x3fd4d612
 80085e0:	55555555 	.word	0x55555555
 80085e4:	3fc55555 	.word	0x3fc55555
 80085e8:	b12e9282 	.word	0xb12e9282
 80085ec:	3fb3b8c5 	.word	0x3fb3b8c5
 80085f0:	1b8d0159 	.word	0x1b8d0159
 80085f4:	3fe6066c 	.word	0x3fe6066c
 80085f8:	9c598ac8 	.word	0x9c598ac8
 80085fc:	40002ae5 	.word	0x40002ae5
 8008600:	1c8a2d4b 	.word	0x1c8a2d4b
 8008604:	40033a27 	.word	0x40033a27
 8008608:	33145c07 	.word	0x33145c07
 800860c:	3c91a626 	.word	0x3c91a626
 8008610:	54442d18 	.word	0x54442d18
 8008614:	3ff921fb 	.word	0x3ff921fb
 8008618:	3fefffff 	.word	0x3fefffff
 800861c:	3fdfffff 	.word	0x3fdfffff
 8008620:	3c600000 	.word	0x3c600000
 8008624:	3ff00000 	.word	0x3ff00000
 8008628:	3fe00000 	.word	0x3fe00000
 800862c:	ee10 2a10 	vmov	r2, s0
 8008630:	462b      	mov	r3, r5
 8008632:	496d      	ldr	r1, [pc, #436]	; (80087e8 <__ieee754_acos+0x4b8>)
 8008634:	2000      	movs	r0, #0
 8008636:	f7f7 fe1f 	bl	8000278 <__aeabi_dsub>
 800863a:	4b6c      	ldr	r3, [pc, #432]	; (80087ec <__ieee754_acos+0x4bc>)
 800863c:	2200      	movs	r2, #0
 800863e:	f7f7 ffd3 	bl	80005e8 <__aeabi_dmul>
 8008642:	4604      	mov	r4, r0
 8008644:	460d      	mov	r5, r1
 8008646:	ec45 4b10 	vmov	d0, r4, r5
 800864a:	f000 fadb 	bl	8008c04 <__ieee754_sqrt>
 800864e:	a34e      	add	r3, pc, #312	; (adr r3, 8008788 <__ieee754_acos+0x458>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	4620      	mov	r0, r4
 8008656:	4629      	mov	r1, r5
 8008658:	ec59 8b10 	vmov	r8, r9, d0
 800865c:	f7f7 ffc4 	bl	80005e8 <__aeabi_dmul>
 8008660:	a34b      	add	r3, pc, #300	; (adr r3, 8008790 <__ieee754_acos+0x460>)
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	f7f7 fe09 	bl	800027c <__adddf3>
 800866a:	4622      	mov	r2, r4
 800866c:	462b      	mov	r3, r5
 800866e:	f7f7 ffbb 	bl	80005e8 <__aeabi_dmul>
 8008672:	a349      	add	r3, pc, #292	; (adr r3, 8008798 <__ieee754_acos+0x468>)
 8008674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008678:	f7f7 fdfe 	bl	8000278 <__aeabi_dsub>
 800867c:	4622      	mov	r2, r4
 800867e:	462b      	mov	r3, r5
 8008680:	f7f7 ffb2 	bl	80005e8 <__aeabi_dmul>
 8008684:	a346      	add	r3, pc, #280	; (adr r3, 80087a0 <__ieee754_acos+0x470>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f7f7 fdf7 	bl	800027c <__adddf3>
 800868e:	4622      	mov	r2, r4
 8008690:	462b      	mov	r3, r5
 8008692:	f7f7 ffa9 	bl	80005e8 <__aeabi_dmul>
 8008696:	a344      	add	r3, pc, #272	; (adr r3, 80087a8 <__ieee754_acos+0x478>)
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	f7f7 fdec 	bl	8000278 <__aeabi_dsub>
 80086a0:	4622      	mov	r2, r4
 80086a2:	462b      	mov	r3, r5
 80086a4:	f7f7 ffa0 	bl	80005e8 <__aeabi_dmul>
 80086a8:	a341      	add	r3, pc, #260	; (adr r3, 80087b0 <__ieee754_acos+0x480>)
 80086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ae:	f7f7 fde5 	bl	800027c <__adddf3>
 80086b2:	4622      	mov	r2, r4
 80086b4:	462b      	mov	r3, r5
 80086b6:	f7f7 ff97 	bl	80005e8 <__aeabi_dmul>
 80086ba:	a33f      	add	r3, pc, #252	; (adr r3, 80087b8 <__ieee754_acos+0x488>)
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	4682      	mov	sl, r0
 80086c2:	468b      	mov	fp, r1
 80086c4:	4620      	mov	r0, r4
 80086c6:	4629      	mov	r1, r5
 80086c8:	f7f7 ff8e 	bl	80005e8 <__aeabi_dmul>
 80086cc:	a33c      	add	r3, pc, #240	; (adr r3, 80087c0 <__ieee754_acos+0x490>)
 80086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d2:	f7f7 fdd1 	bl	8000278 <__aeabi_dsub>
 80086d6:	4622      	mov	r2, r4
 80086d8:	462b      	mov	r3, r5
 80086da:	f7f7 ff85 	bl	80005e8 <__aeabi_dmul>
 80086de:	a33a      	add	r3, pc, #232	; (adr r3, 80087c8 <__ieee754_acos+0x498>)
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	f7f7 fdca 	bl	800027c <__adddf3>
 80086e8:	4622      	mov	r2, r4
 80086ea:	462b      	mov	r3, r5
 80086ec:	f7f7 ff7c 	bl	80005e8 <__aeabi_dmul>
 80086f0:	a337      	add	r3, pc, #220	; (adr r3, 80087d0 <__ieee754_acos+0x4a0>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f7f7 fdbf 	bl	8000278 <__aeabi_dsub>
 80086fa:	4622      	mov	r2, r4
 80086fc:	462b      	mov	r3, r5
 80086fe:	f7f7 ff73 	bl	80005e8 <__aeabi_dmul>
 8008702:	4b39      	ldr	r3, [pc, #228]	; (80087e8 <__ieee754_acos+0x4b8>)
 8008704:	2200      	movs	r2, #0
 8008706:	f7f7 fdb9 	bl	800027c <__adddf3>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	4650      	mov	r0, sl
 8008710:	4659      	mov	r1, fp
 8008712:	f7f8 f893 	bl	800083c <__aeabi_ddiv>
 8008716:	4642      	mov	r2, r8
 8008718:	464b      	mov	r3, r9
 800871a:	f7f7 ff65 	bl	80005e8 <__aeabi_dmul>
 800871e:	2600      	movs	r6, #0
 8008720:	4682      	mov	sl, r0
 8008722:	468b      	mov	fp, r1
 8008724:	4632      	mov	r2, r6
 8008726:	464b      	mov	r3, r9
 8008728:	4630      	mov	r0, r6
 800872a:	4649      	mov	r1, r9
 800872c:	f7f7 ff5c 	bl	80005e8 <__aeabi_dmul>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f7 fd9e 	bl	8000278 <__aeabi_dsub>
 800873c:	4632      	mov	r2, r6
 800873e:	4604      	mov	r4, r0
 8008740:	460d      	mov	r5, r1
 8008742:	464b      	mov	r3, r9
 8008744:	4640      	mov	r0, r8
 8008746:	4649      	mov	r1, r9
 8008748:	f7f7 fd98 	bl	800027c <__adddf3>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4620      	mov	r0, r4
 8008752:	4629      	mov	r1, r5
 8008754:	f7f8 f872 	bl	800083c <__aeabi_ddiv>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	4650      	mov	r0, sl
 800875e:	4659      	mov	r1, fp
 8008760:	f7f7 fd8c 	bl	800027c <__adddf3>
 8008764:	4632      	mov	r2, r6
 8008766:	464b      	mov	r3, r9
 8008768:	f7f7 fd88 	bl	800027c <__adddf3>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	f7f7 fd84 	bl	800027c <__adddf3>
 8008774:	e5fe      	b.n	8008374 <__ieee754_acos+0x44>
 8008776:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80087d8 <__ieee754_acos+0x4a8>
 800877a:	e5ed      	b.n	8008358 <__ieee754_acos+0x28>
 800877c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80087e0 <__ieee754_acos+0x4b0>
 8008780:	e5ea      	b.n	8008358 <__ieee754_acos+0x28>
 8008782:	bf00      	nop
 8008784:	f3af 8000 	nop.w
 8008788:	0dfdf709 	.word	0x0dfdf709
 800878c:	3f023de1 	.word	0x3f023de1
 8008790:	7501b288 	.word	0x7501b288
 8008794:	3f49efe0 	.word	0x3f49efe0
 8008798:	b5688f3b 	.word	0xb5688f3b
 800879c:	3fa48228 	.word	0x3fa48228
 80087a0:	0e884455 	.word	0x0e884455
 80087a4:	3fc9c155 	.word	0x3fc9c155
 80087a8:	03eb6f7d 	.word	0x03eb6f7d
 80087ac:	3fd4d612 	.word	0x3fd4d612
 80087b0:	55555555 	.word	0x55555555
 80087b4:	3fc55555 	.word	0x3fc55555
 80087b8:	b12e9282 	.word	0xb12e9282
 80087bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80087c0:	1b8d0159 	.word	0x1b8d0159
 80087c4:	3fe6066c 	.word	0x3fe6066c
 80087c8:	9c598ac8 	.word	0x9c598ac8
 80087cc:	40002ae5 	.word	0x40002ae5
 80087d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80087d4:	40033a27 	.word	0x40033a27
	...
 80087e0:	54442d18 	.word	0x54442d18
 80087e4:	3ff921fb 	.word	0x3ff921fb
 80087e8:	3ff00000 	.word	0x3ff00000
 80087ec:	3fe00000 	.word	0x3fe00000

080087f0 <__ieee754_rem_pio2>:
 80087f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f4:	ed2d 8b02 	vpush	{d8}
 80087f8:	ec55 4b10 	vmov	r4, r5, d0
 80087fc:	4bca      	ldr	r3, [pc, #808]	; (8008b28 <__ieee754_rem_pio2+0x338>)
 80087fe:	b08b      	sub	sp, #44	; 0x2c
 8008800:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008804:	4598      	cmp	r8, r3
 8008806:	4682      	mov	sl, r0
 8008808:	9502      	str	r5, [sp, #8]
 800880a:	dc08      	bgt.n	800881e <__ieee754_rem_pio2+0x2e>
 800880c:	2200      	movs	r2, #0
 800880e:	2300      	movs	r3, #0
 8008810:	ed80 0b00 	vstr	d0, [r0]
 8008814:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008818:	f04f 0b00 	mov.w	fp, #0
 800881c:	e028      	b.n	8008870 <__ieee754_rem_pio2+0x80>
 800881e:	4bc3      	ldr	r3, [pc, #780]	; (8008b2c <__ieee754_rem_pio2+0x33c>)
 8008820:	4598      	cmp	r8, r3
 8008822:	dc78      	bgt.n	8008916 <__ieee754_rem_pio2+0x126>
 8008824:	9b02      	ldr	r3, [sp, #8]
 8008826:	4ec2      	ldr	r6, [pc, #776]	; (8008b30 <__ieee754_rem_pio2+0x340>)
 8008828:	2b00      	cmp	r3, #0
 800882a:	ee10 0a10 	vmov	r0, s0
 800882e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008af0 <__ieee754_rem_pio2+0x300>)
 8008830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008834:	4629      	mov	r1, r5
 8008836:	dd39      	ble.n	80088ac <__ieee754_rem_pio2+0xbc>
 8008838:	f7f7 fd1e 	bl	8000278 <__aeabi_dsub>
 800883c:	45b0      	cmp	r8, r6
 800883e:	4604      	mov	r4, r0
 8008840:	460d      	mov	r5, r1
 8008842:	d01b      	beq.n	800887c <__ieee754_rem_pio2+0x8c>
 8008844:	a3ac      	add	r3, pc, #688	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x308>)
 8008846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884a:	f7f7 fd15 	bl	8000278 <__aeabi_dsub>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	e9ca 2300 	strd	r2, r3, [sl]
 8008856:	4620      	mov	r0, r4
 8008858:	4629      	mov	r1, r5
 800885a:	f7f7 fd0d 	bl	8000278 <__aeabi_dsub>
 800885e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x308>)
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	f7f7 fd08 	bl	8000278 <__aeabi_dsub>
 8008868:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800886c:	f04f 0b01 	mov.w	fp, #1
 8008870:	4658      	mov	r0, fp
 8008872:	b00b      	add	sp, #44	; 0x2c
 8008874:	ecbd 8b02 	vpop	{d8}
 8008878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008b00 <__ieee754_rem_pio2+0x310>)
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	f7f7 fcf9 	bl	8000278 <__aeabi_dsub>
 8008886:	a3a0      	add	r3, pc, #640	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x318>)
 8008888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888c:	4604      	mov	r4, r0
 800888e:	460d      	mov	r5, r1
 8008890:	f7f7 fcf2 	bl	8000278 <__aeabi_dsub>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	e9ca 2300 	strd	r2, r3, [sl]
 800889c:	4620      	mov	r0, r4
 800889e:	4629      	mov	r1, r5
 80088a0:	f7f7 fcea 	bl	8000278 <__aeabi_dsub>
 80088a4:	a398      	add	r3, pc, #608	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x318>)
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	e7db      	b.n	8008864 <__ieee754_rem_pio2+0x74>
 80088ac:	f7f7 fce6 	bl	800027c <__adddf3>
 80088b0:	45b0      	cmp	r8, r6
 80088b2:	4604      	mov	r4, r0
 80088b4:	460d      	mov	r5, r1
 80088b6:	d016      	beq.n	80088e6 <__ieee754_rem_pio2+0xf6>
 80088b8:	a38f      	add	r3, pc, #572	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x308>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f7f7 fcdd 	bl	800027c <__adddf3>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	e9ca 2300 	strd	r2, r3, [sl]
 80088ca:	4620      	mov	r0, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	f7f7 fcd3 	bl	8000278 <__aeabi_dsub>
 80088d2:	a389      	add	r3, pc, #548	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x308>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	f7f7 fcd0 	bl	800027c <__adddf3>
 80088dc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80088e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80088e4:	e7c4      	b.n	8008870 <__ieee754_rem_pio2+0x80>
 80088e6:	a386      	add	r3, pc, #536	; (adr r3, 8008b00 <__ieee754_rem_pio2+0x310>)
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	f7f7 fcc6 	bl	800027c <__adddf3>
 80088f0:	a385      	add	r3, pc, #532	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x318>)
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	4604      	mov	r4, r0
 80088f8:	460d      	mov	r5, r1
 80088fa:	f7f7 fcbf 	bl	800027c <__adddf3>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	e9ca 2300 	strd	r2, r3, [sl]
 8008906:	4620      	mov	r0, r4
 8008908:	4629      	mov	r1, r5
 800890a:	f7f7 fcb5 	bl	8000278 <__aeabi_dsub>
 800890e:	a37e      	add	r3, pc, #504	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x318>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	e7e0      	b.n	80088d8 <__ieee754_rem_pio2+0xe8>
 8008916:	4b87      	ldr	r3, [pc, #540]	; (8008b34 <__ieee754_rem_pio2+0x344>)
 8008918:	4598      	cmp	r8, r3
 800891a:	f300 80d9 	bgt.w	8008ad0 <__ieee754_rem_pio2+0x2e0>
 800891e:	f000 feed 	bl	80096fc <fabs>
 8008922:	ec55 4b10 	vmov	r4, r5, d0
 8008926:	ee10 0a10 	vmov	r0, s0
 800892a:	a379      	add	r3, pc, #484	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x320>)
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	4629      	mov	r1, r5
 8008932:	f7f7 fe59 	bl	80005e8 <__aeabi_dmul>
 8008936:	4b80      	ldr	r3, [pc, #512]	; (8008b38 <__ieee754_rem_pio2+0x348>)
 8008938:	2200      	movs	r2, #0
 800893a:	f7f7 fc9f 	bl	800027c <__adddf3>
 800893e:	f7f8 f903 	bl	8000b48 <__aeabi_d2iz>
 8008942:	4683      	mov	fp, r0
 8008944:	f7f7 fde6 	bl	8000514 <__aeabi_i2d>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	ec43 2b18 	vmov	d8, r2, r3
 8008950:	a367      	add	r3, pc, #412	; (adr r3, 8008af0 <__ieee754_rem_pio2+0x300>)
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f7f7 fe47 	bl	80005e8 <__aeabi_dmul>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4620      	mov	r0, r4
 8008960:	4629      	mov	r1, r5
 8008962:	f7f7 fc89 	bl	8000278 <__aeabi_dsub>
 8008966:	a364      	add	r3, pc, #400	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x308>)
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	4606      	mov	r6, r0
 800896e:	460f      	mov	r7, r1
 8008970:	ec51 0b18 	vmov	r0, r1, d8
 8008974:	f7f7 fe38 	bl	80005e8 <__aeabi_dmul>
 8008978:	f1bb 0f1f 	cmp.w	fp, #31
 800897c:	4604      	mov	r4, r0
 800897e:	460d      	mov	r5, r1
 8008980:	dc0d      	bgt.n	800899e <__ieee754_rem_pio2+0x1ae>
 8008982:	4b6e      	ldr	r3, [pc, #440]	; (8008b3c <__ieee754_rem_pio2+0x34c>)
 8008984:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898c:	4543      	cmp	r3, r8
 800898e:	d006      	beq.n	800899e <__ieee754_rem_pio2+0x1ae>
 8008990:	4622      	mov	r2, r4
 8008992:	462b      	mov	r3, r5
 8008994:	4630      	mov	r0, r6
 8008996:	4639      	mov	r1, r7
 8008998:	f7f7 fc6e 	bl	8000278 <__aeabi_dsub>
 800899c:	e00f      	b.n	80089be <__ieee754_rem_pio2+0x1ce>
 800899e:	462b      	mov	r3, r5
 80089a0:	4622      	mov	r2, r4
 80089a2:	4630      	mov	r0, r6
 80089a4:	4639      	mov	r1, r7
 80089a6:	f7f7 fc67 	bl	8000278 <__aeabi_dsub>
 80089aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80089ae:	9303      	str	r3, [sp, #12]
 80089b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80089b4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80089b8:	f1b8 0f10 	cmp.w	r8, #16
 80089bc:	dc02      	bgt.n	80089c4 <__ieee754_rem_pio2+0x1d4>
 80089be:	e9ca 0100 	strd	r0, r1, [sl]
 80089c2:	e039      	b.n	8008a38 <__ieee754_rem_pio2+0x248>
 80089c4:	a34e      	add	r3, pc, #312	; (adr r3, 8008b00 <__ieee754_rem_pio2+0x310>)
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	ec51 0b18 	vmov	r0, r1, d8
 80089ce:	f7f7 fe0b 	bl	80005e8 <__aeabi_dmul>
 80089d2:	4604      	mov	r4, r0
 80089d4:	460d      	mov	r5, r1
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4630      	mov	r0, r6
 80089dc:	4639      	mov	r1, r7
 80089de:	f7f7 fc4b 	bl	8000278 <__aeabi_dsub>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4680      	mov	r8, r0
 80089e8:	4689      	mov	r9, r1
 80089ea:	4630      	mov	r0, r6
 80089ec:	4639      	mov	r1, r7
 80089ee:	f7f7 fc43 	bl	8000278 <__aeabi_dsub>
 80089f2:	4622      	mov	r2, r4
 80089f4:	462b      	mov	r3, r5
 80089f6:	f7f7 fc3f 	bl	8000278 <__aeabi_dsub>
 80089fa:	a343      	add	r3, pc, #268	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x318>)
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	4604      	mov	r4, r0
 8008a02:	460d      	mov	r5, r1
 8008a04:	ec51 0b18 	vmov	r0, r1, d8
 8008a08:	f7f7 fdee 	bl	80005e8 <__aeabi_dmul>
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	462b      	mov	r3, r5
 8008a10:	f7f7 fc32 	bl	8000278 <__aeabi_dsub>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4604      	mov	r4, r0
 8008a1a:	460d      	mov	r5, r1
 8008a1c:	4640      	mov	r0, r8
 8008a1e:	4649      	mov	r1, r9
 8008a20:	f7f7 fc2a 	bl	8000278 <__aeabi_dsub>
 8008a24:	9a03      	ldr	r2, [sp, #12]
 8008a26:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b31      	cmp	r3, #49	; 0x31
 8008a2e:	dc24      	bgt.n	8008a7a <__ieee754_rem_pio2+0x28a>
 8008a30:	e9ca 0100 	strd	r0, r1, [sl]
 8008a34:	4646      	mov	r6, r8
 8008a36:	464f      	mov	r7, r9
 8008a38:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	4642      	mov	r2, r8
 8008a40:	464b      	mov	r3, r9
 8008a42:	4639      	mov	r1, r7
 8008a44:	f7f7 fc18 	bl	8000278 <__aeabi_dsub>
 8008a48:	462b      	mov	r3, r5
 8008a4a:	4622      	mov	r2, r4
 8008a4c:	f7f7 fc14 	bl	8000278 <__aeabi_dsub>
 8008a50:	9b02      	ldr	r3, [sp, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a58:	f6bf af0a 	bge.w	8008870 <__ieee754_rem_pio2+0x80>
 8008a5c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a60:	f8ca 3004 	str.w	r3, [sl, #4]
 8008a64:	f8ca 8000 	str.w	r8, [sl]
 8008a68:	f8ca 0008 	str.w	r0, [sl, #8]
 8008a6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a70:	f8ca 300c 	str.w	r3, [sl, #12]
 8008a74:	f1cb 0b00 	rsb	fp, fp, #0
 8008a78:	e6fa      	b.n	8008870 <__ieee754_rem_pio2+0x80>
 8008a7a:	a327      	add	r3, pc, #156	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x328>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	ec51 0b18 	vmov	r0, r1, d8
 8008a84:	f7f7 fdb0 	bl	80005e8 <__aeabi_dmul>
 8008a88:	4604      	mov	r4, r0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4640      	mov	r0, r8
 8008a92:	4649      	mov	r1, r9
 8008a94:	f7f7 fbf0 	bl	8000278 <__aeabi_dsub>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	460f      	mov	r7, r1
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	f7f7 fbe8 	bl	8000278 <__aeabi_dsub>
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	462b      	mov	r3, r5
 8008aac:	f7f7 fbe4 	bl	8000278 <__aeabi_dsub>
 8008ab0:	a31b      	add	r3, pc, #108	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x330>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	460d      	mov	r5, r1
 8008aba:	ec51 0b18 	vmov	r0, r1, d8
 8008abe:	f7f7 fd93 	bl	80005e8 <__aeabi_dmul>
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	f7f7 fbd7 	bl	8000278 <__aeabi_dsub>
 8008aca:	4604      	mov	r4, r0
 8008acc:	460d      	mov	r5, r1
 8008ace:	e75f      	b.n	8008990 <__ieee754_rem_pio2+0x1a0>
 8008ad0:	4b1b      	ldr	r3, [pc, #108]	; (8008b40 <__ieee754_rem_pio2+0x350>)
 8008ad2:	4598      	cmp	r8, r3
 8008ad4:	dd36      	ble.n	8008b44 <__ieee754_rem_pio2+0x354>
 8008ad6:	ee10 2a10 	vmov	r2, s0
 8008ada:	462b      	mov	r3, r5
 8008adc:	4620      	mov	r0, r4
 8008ade:	4629      	mov	r1, r5
 8008ae0:	f7f7 fbca 	bl	8000278 <__aeabi_dsub>
 8008ae4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ae8:	e9ca 0100 	strd	r0, r1, [sl]
 8008aec:	e694      	b.n	8008818 <__ieee754_rem_pio2+0x28>
 8008aee:	bf00      	nop
 8008af0:	54400000 	.word	0x54400000
 8008af4:	3ff921fb 	.word	0x3ff921fb
 8008af8:	1a626331 	.word	0x1a626331
 8008afc:	3dd0b461 	.word	0x3dd0b461
 8008b00:	1a600000 	.word	0x1a600000
 8008b04:	3dd0b461 	.word	0x3dd0b461
 8008b08:	2e037073 	.word	0x2e037073
 8008b0c:	3ba3198a 	.word	0x3ba3198a
 8008b10:	6dc9c883 	.word	0x6dc9c883
 8008b14:	3fe45f30 	.word	0x3fe45f30
 8008b18:	2e000000 	.word	0x2e000000
 8008b1c:	3ba3198a 	.word	0x3ba3198a
 8008b20:	252049c1 	.word	0x252049c1
 8008b24:	397b839a 	.word	0x397b839a
 8008b28:	3fe921fb 	.word	0x3fe921fb
 8008b2c:	4002d97b 	.word	0x4002d97b
 8008b30:	3ff921fb 	.word	0x3ff921fb
 8008b34:	413921fb 	.word	0x413921fb
 8008b38:	3fe00000 	.word	0x3fe00000
 8008b3c:	08009b74 	.word	0x08009b74
 8008b40:	7fefffff 	.word	0x7fefffff
 8008b44:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008b48:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008b4c:	ee10 0a10 	vmov	r0, s0
 8008b50:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008b54:	ee10 6a10 	vmov	r6, s0
 8008b58:	460f      	mov	r7, r1
 8008b5a:	f7f7 fff5 	bl	8000b48 <__aeabi_d2iz>
 8008b5e:	f7f7 fcd9 	bl	8000514 <__aeabi_i2d>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	4630      	mov	r0, r6
 8008b68:	4639      	mov	r1, r7
 8008b6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b6e:	f7f7 fb83 	bl	8000278 <__aeabi_dsub>
 8008b72:	4b22      	ldr	r3, [pc, #136]	; (8008bfc <__ieee754_rem_pio2+0x40c>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	f7f7 fd37 	bl	80005e8 <__aeabi_dmul>
 8008b7a:	460f      	mov	r7, r1
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	f7f7 ffe3 	bl	8000b48 <__aeabi_d2iz>
 8008b82:	f7f7 fcc7 	bl	8000514 <__aeabi_i2d>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b92:	f7f7 fb71 	bl	8000278 <__aeabi_dsub>
 8008b96:	4b19      	ldr	r3, [pc, #100]	; (8008bfc <__ieee754_rem_pio2+0x40c>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f7f7 fd25 	bl	80005e8 <__aeabi_dmul>
 8008b9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008ba2:	ad04      	add	r5, sp, #16
 8008ba4:	f04f 0803 	mov.w	r8, #3
 8008ba8:	46a9      	mov	r9, r5
 8008baa:	2600      	movs	r6, #0
 8008bac:	2700      	movs	r7, #0
 8008bae:	4632      	mov	r2, r6
 8008bb0:	463b      	mov	r3, r7
 8008bb2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008bb6:	46c3      	mov	fp, r8
 8008bb8:	3d08      	subs	r5, #8
 8008bba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008bbe:	f7f7 ff7b 	bl	8000ab8 <__aeabi_dcmpeq>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d1f3      	bne.n	8008bae <__ieee754_rem_pio2+0x3be>
 8008bc6:	4b0e      	ldr	r3, [pc, #56]	; (8008c00 <__ieee754_rem_pio2+0x410>)
 8008bc8:	9301      	str	r3, [sp, #4]
 8008bca:	2302      	movs	r3, #2
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	4622      	mov	r2, r4
 8008bd0:	465b      	mov	r3, fp
 8008bd2:	4651      	mov	r1, sl
 8008bd4:	4648      	mov	r0, r9
 8008bd6:	f000 f993 	bl	8008f00 <__kernel_rem_pio2>
 8008bda:	9b02      	ldr	r3, [sp, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	4683      	mov	fp, r0
 8008be0:	f6bf ae46 	bge.w	8008870 <__ieee754_rem_pio2+0x80>
 8008be4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008be8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bec:	f8ca 3004 	str.w	r3, [sl, #4]
 8008bf0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008bf4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bf8:	e73a      	b.n	8008a70 <__ieee754_rem_pio2+0x280>
 8008bfa:	bf00      	nop
 8008bfc:	41700000 	.word	0x41700000
 8008c00:	08009bf4 	.word	0x08009bf4

08008c04 <__ieee754_sqrt>:
 8008c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c08:	ec55 4b10 	vmov	r4, r5, d0
 8008c0c:	4e56      	ldr	r6, [pc, #344]	; (8008d68 <__ieee754_sqrt+0x164>)
 8008c0e:	43ae      	bics	r6, r5
 8008c10:	ee10 0a10 	vmov	r0, s0
 8008c14:	ee10 3a10 	vmov	r3, s0
 8008c18:	4629      	mov	r1, r5
 8008c1a:	462a      	mov	r2, r5
 8008c1c:	d110      	bne.n	8008c40 <__ieee754_sqrt+0x3c>
 8008c1e:	ee10 2a10 	vmov	r2, s0
 8008c22:	462b      	mov	r3, r5
 8008c24:	f7f7 fce0 	bl	80005e8 <__aeabi_dmul>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	4629      	mov	r1, r5
 8008c30:	f7f7 fb24 	bl	800027c <__adddf3>
 8008c34:	4604      	mov	r4, r0
 8008c36:	460d      	mov	r5, r1
 8008c38:	ec45 4b10 	vmov	d0, r4, r5
 8008c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c40:	2d00      	cmp	r5, #0
 8008c42:	dc10      	bgt.n	8008c66 <__ieee754_sqrt+0x62>
 8008c44:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c48:	4330      	orrs	r0, r6
 8008c4a:	d0f5      	beq.n	8008c38 <__ieee754_sqrt+0x34>
 8008c4c:	b15d      	cbz	r5, 8008c66 <__ieee754_sqrt+0x62>
 8008c4e:	ee10 2a10 	vmov	r2, s0
 8008c52:	462b      	mov	r3, r5
 8008c54:	ee10 0a10 	vmov	r0, s0
 8008c58:	f7f7 fb0e 	bl	8000278 <__aeabi_dsub>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	f7f7 fdec 	bl	800083c <__aeabi_ddiv>
 8008c64:	e7e6      	b.n	8008c34 <__ieee754_sqrt+0x30>
 8008c66:	1509      	asrs	r1, r1, #20
 8008c68:	d076      	beq.n	8008d58 <__ieee754_sqrt+0x154>
 8008c6a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008c6e:	07ce      	lsls	r6, r1, #31
 8008c70:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008c74:	bf5e      	ittt	pl
 8008c76:	0fda      	lsrpl	r2, r3, #31
 8008c78:	005b      	lslpl	r3, r3, #1
 8008c7a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008c7e:	0fda      	lsrs	r2, r3, #31
 8008c80:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008c84:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008c88:	2000      	movs	r0, #0
 8008c8a:	106d      	asrs	r5, r5, #1
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	f04f 0e16 	mov.w	lr, #22
 8008c92:	4684      	mov	ip, r0
 8008c94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c98:	eb0c 0401 	add.w	r4, ip, r1
 8008c9c:	4294      	cmp	r4, r2
 8008c9e:	bfde      	ittt	le
 8008ca0:	1b12      	suble	r2, r2, r4
 8008ca2:	eb04 0c01 	addle.w	ip, r4, r1
 8008ca6:	1840      	addle	r0, r0, r1
 8008ca8:	0052      	lsls	r2, r2, #1
 8008caa:	f1be 0e01 	subs.w	lr, lr, #1
 8008cae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008cb2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008cb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008cba:	d1ed      	bne.n	8008c98 <__ieee754_sqrt+0x94>
 8008cbc:	4671      	mov	r1, lr
 8008cbe:	2720      	movs	r7, #32
 8008cc0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008cc4:	4562      	cmp	r2, ip
 8008cc6:	eb04 060e 	add.w	r6, r4, lr
 8008cca:	dc02      	bgt.n	8008cd2 <__ieee754_sqrt+0xce>
 8008ccc:	d113      	bne.n	8008cf6 <__ieee754_sqrt+0xf2>
 8008cce:	429e      	cmp	r6, r3
 8008cd0:	d811      	bhi.n	8008cf6 <__ieee754_sqrt+0xf2>
 8008cd2:	2e00      	cmp	r6, #0
 8008cd4:	eb06 0e04 	add.w	lr, r6, r4
 8008cd8:	da43      	bge.n	8008d62 <__ieee754_sqrt+0x15e>
 8008cda:	f1be 0f00 	cmp.w	lr, #0
 8008cde:	db40      	blt.n	8008d62 <__ieee754_sqrt+0x15e>
 8008ce0:	f10c 0801 	add.w	r8, ip, #1
 8008ce4:	eba2 020c 	sub.w	r2, r2, ip
 8008ce8:	429e      	cmp	r6, r3
 8008cea:	bf88      	it	hi
 8008cec:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008cf0:	1b9b      	subs	r3, r3, r6
 8008cf2:	4421      	add	r1, r4
 8008cf4:	46c4      	mov	ip, r8
 8008cf6:	0052      	lsls	r2, r2, #1
 8008cf8:	3f01      	subs	r7, #1
 8008cfa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008cfe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008d02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d06:	d1dd      	bne.n	8008cc4 <__ieee754_sqrt+0xc0>
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	d006      	beq.n	8008d1a <__ieee754_sqrt+0x116>
 8008d0c:	1c4c      	adds	r4, r1, #1
 8008d0e:	bf13      	iteet	ne
 8008d10:	3101      	addne	r1, #1
 8008d12:	3001      	addeq	r0, #1
 8008d14:	4639      	moveq	r1, r7
 8008d16:	f021 0101 	bicne.w	r1, r1, #1
 8008d1a:	1043      	asrs	r3, r0, #1
 8008d1c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008d20:	0849      	lsrs	r1, r1, #1
 8008d22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008d26:	07c2      	lsls	r2, r0, #31
 8008d28:	bf48      	it	mi
 8008d2a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008d2e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008d32:	460c      	mov	r4, r1
 8008d34:	463d      	mov	r5, r7
 8008d36:	e77f      	b.n	8008c38 <__ieee754_sqrt+0x34>
 8008d38:	0ada      	lsrs	r2, r3, #11
 8008d3a:	3815      	subs	r0, #21
 8008d3c:	055b      	lsls	r3, r3, #21
 8008d3e:	2a00      	cmp	r2, #0
 8008d40:	d0fa      	beq.n	8008d38 <__ieee754_sqrt+0x134>
 8008d42:	02d7      	lsls	r7, r2, #11
 8008d44:	d50a      	bpl.n	8008d5c <__ieee754_sqrt+0x158>
 8008d46:	f1c1 0420 	rsb	r4, r1, #32
 8008d4a:	fa23 f404 	lsr.w	r4, r3, r4
 8008d4e:	1e4d      	subs	r5, r1, #1
 8008d50:	408b      	lsls	r3, r1
 8008d52:	4322      	orrs	r2, r4
 8008d54:	1b41      	subs	r1, r0, r5
 8008d56:	e788      	b.n	8008c6a <__ieee754_sqrt+0x66>
 8008d58:	4608      	mov	r0, r1
 8008d5a:	e7f0      	b.n	8008d3e <__ieee754_sqrt+0x13a>
 8008d5c:	0052      	lsls	r2, r2, #1
 8008d5e:	3101      	adds	r1, #1
 8008d60:	e7ef      	b.n	8008d42 <__ieee754_sqrt+0x13e>
 8008d62:	46e0      	mov	r8, ip
 8008d64:	e7be      	b.n	8008ce4 <__ieee754_sqrt+0xe0>
 8008d66:	bf00      	nop
 8008d68:	7ff00000 	.word	0x7ff00000
 8008d6c:	00000000 	.word	0x00000000

08008d70 <__kernel_cos>:
 8008d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	ec57 6b10 	vmov	r6, r7, d0
 8008d78:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008d7c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008d80:	ed8d 1b00 	vstr	d1, [sp]
 8008d84:	da07      	bge.n	8008d96 <__kernel_cos+0x26>
 8008d86:	ee10 0a10 	vmov	r0, s0
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f7f7 fedc 	bl	8000b48 <__aeabi_d2iz>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	f000 8088 	beq.w	8008ea6 <__kernel_cos+0x136>
 8008d96:	4632      	mov	r2, r6
 8008d98:	463b      	mov	r3, r7
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	4639      	mov	r1, r7
 8008d9e:	f7f7 fc23 	bl	80005e8 <__aeabi_dmul>
 8008da2:	4b51      	ldr	r3, [pc, #324]	; (8008ee8 <__kernel_cos+0x178>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	4604      	mov	r4, r0
 8008da8:	460d      	mov	r5, r1
 8008daa:	f7f7 fc1d 	bl	80005e8 <__aeabi_dmul>
 8008dae:	a340      	add	r3, pc, #256	; (adr r3, 8008eb0 <__kernel_cos+0x140>)
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	4682      	mov	sl, r0
 8008db6:	468b      	mov	fp, r1
 8008db8:	4620      	mov	r0, r4
 8008dba:	4629      	mov	r1, r5
 8008dbc:	f7f7 fc14 	bl	80005e8 <__aeabi_dmul>
 8008dc0:	a33d      	add	r3, pc, #244	; (adr r3, 8008eb8 <__kernel_cos+0x148>)
 8008dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc6:	f7f7 fa59 	bl	800027c <__adddf3>
 8008dca:	4622      	mov	r2, r4
 8008dcc:	462b      	mov	r3, r5
 8008dce:	f7f7 fc0b 	bl	80005e8 <__aeabi_dmul>
 8008dd2:	a33b      	add	r3, pc, #236	; (adr r3, 8008ec0 <__kernel_cos+0x150>)
 8008dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd8:	f7f7 fa4e 	bl	8000278 <__aeabi_dsub>
 8008ddc:	4622      	mov	r2, r4
 8008dde:	462b      	mov	r3, r5
 8008de0:	f7f7 fc02 	bl	80005e8 <__aeabi_dmul>
 8008de4:	a338      	add	r3, pc, #224	; (adr r3, 8008ec8 <__kernel_cos+0x158>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7f7 fa47 	bl	800027c <__adddf3>
 8008dee:	4622      	mov	r2, r4
 8008df0:	462b      	mov	r3, r5
 8008df2:	f7f7 fbf9 	bl	80005e8 <__aeabi_dmul>
 8008df6:	a336      	add	r3, pc, #216	; (adr r3, 8008ed0 <__kernel_cos+0x160>)
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	f7f7 fa3c 	bl	8000278 <__aeabi_dsub>
 8008e00:	4622      	mov	r2, r4
 8008e02:	462b      	mov	r3, r5
 8008e04:	f7f7 fbf0 	bl	80005e8 <__aeabi_dmul>
 8008e08:	a333      	add	r3, pc, #204	; (adr r3, 8008ed8 <__kernel_cos+0x168>)
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f7f7 fa35 	bl	800027c <__adddf3>
 8008e12:	4622      	mov	r2, r4
 8008e14:	462b      	mov	r3, r5
 8008e16:	f7f7 fbe7 	bl	80005e8 <__aeabi_dmul>
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	462b      	mov	r3, r5
 8008e1e:	f7f7 fbe3 	bl	80005e8 <__aeabi_dmul>
 8008e22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e26:	4604      	mov	r4, r0
 8008e28:	460d      	mov	r5, r1
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	f7f7 fbdb 	bl	80005e8 <__aeabi_dmul>
 8008e32:	460b      	mov	r3, r1
 8008e34:	4602      	mov	r2, r0
 8008e36:	4629      	mov	r1, r5
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f7f7 fa1d 	bl	8000278 <__aeabi_dsub>
 8008e3e:	4b2b      	ldr	r3, [pc, #172]	; (8008eec <__kernel_cos+0x17c>)
 8008e40:	4598      	cmp	r8, r3
 8008e42:	4606      	mov	r6, r0
 8008e44:	460f      	mov	r7, r1
 8008e46:	dc10      	bgt.n	8008e6a <__kernel_cos+0xfa>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4650      	mov	r0, sl
 8008e4e:	4659      	mov	r1, fp
 8008e50:	f7f7 fa12 	bl	8000278 <__aeabi_dsub>
 8008e54:	460b      	mov	r3, r1
 8008e56:	4926      	ldr	r1, [pc, #152]	; (8008ef0 <__kernel_cos+0x180>)
 8008e58:	4602      	mov	r2, r0
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	f7f7 fa0c 	bl	8000278 <__aeabi_dsub>
 8008e60:	ec41 0b10 	vmov	d0, r0, r1
 8008e64:	b003      	add	sp, #12
 8008e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6a:	4b22      	ldr	r3, [pc, #136]	; (8008ef4 <__kernel_cos+0x184>)
 8008e6c:	4920      	ldr	r1, [pc, #128]	; (8008ef0 <__kernel_cos+0x180>)
 8008e6e:	4598      	cmp	r8, r3
 8008e70:	bfcc      	ite	gt
 8008e72:	4d21      	ldrgt	r5, [pc, #132]	; (8008ef8 <__kernel_cos+0x188>)
 8008e74:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008e78:	2400      	movs	r4, #0
 8008e7a:	4622      	mov	r2, r4
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	2000      	movs	r0, #0
 8008e80:	f7f7 f9fa 	bl	8000278 <__aeabi_dsub>
 8008e84:	4622      	mov	r2, r4
 8008e86:	4680      	mov	r8, r0
 8008e88:	4689      	mov	r9, r1
 8008e8a:	462b      	mov	r3, r5
 8008e8c:	4650      	mov	r0, sl
 8008e8e:	4659      	mov	r1, fp
 8008e90:	f7f7 f9f2 	bl	8000278 <__aeabi_dsub>
 8008e94:	4632      	mov	r2, r6
 8008e96:	463b      	mov	r3, r7
 8008e98:	f7f7 f9ee 	bl	8000278 <__aeabi_dsub>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	e7da      	b.n	8008e5c <__kernel_cos+0xec>
 8008ea6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008ee0 <__kernel_cos+0x170>
 8008eaa:	e7db      	b.n	8008e64 <__kernel_cos+0xf4>
 8008eac:	f3af 8000 	nop.w
 8008eb0:	be8838d4 	.word	0xbe8838d4
 8008eb4:	bda8fae9 	.word	0xbda8fae9
 8008eb8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008ebc:	3e21ee9e 	.word	0x3e21ee9e
 8008ec0:	809c52ad 	.word	0x809c52ad
 8008ec4:	3e927e4f 	.word	0x3e927e4f
 8008ec8:	19cb1590 	.word	0x19cb1590
 8008ecc:	3efa01a0 	.word	0x3efa01a0
 8008ed0:	16c15177 	.word	0x16c15177
 8008ed4:	3f56c16c 	.word	0x3f56c16c
 8008ed8:	5555554c 	.word	0x5555554c
 8008edc:	3fa55555 	.word	0x3fa55555
 8008ee0:	00000000 	.word	0x00000000
 8008ee4:	3ff00000 	.word	0x3ff00000
 8008ee8:	3fe00000 	.word	0x3fe00000
 8008eec:	3fd33332 	.word	0x3fd33332
 8008ef0:	3ff00000 	.word	0x3ff00000
 8008ef4:	3fe90000 	.word	0x3fe90000
 8008ef8:	3fd20000 	.word	0x3fd20000
 8008efc:	00000000 	.word	0x00000000

08008f00 <__kernel_rem_pio2>:
 8008f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	ed2d 8b02 	vpush	{d8}
 8008f08:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008f0c:	f112 0f14 	cmn.w	r2, #20
 8008f10:	9308      	str	r3, [sp, #32]
 8008f12:	9101      	str	r1, [sp, #4]
 8008f14:	4bc6      	ldr	r3, [pc, #792]	; (8009230 <__kernel_rem_pio2+0x330>)
 8008f16:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008f18:	9009      	str	r0, [sp, #36]	; 0x24
 8008f1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f1e:	9304      	str	r3, [sp, #16]
 8008f20:	9b08      	ldr	r3, [sp, #32]
 8008f22:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008f26:	bfa8      	it	ge
 8008f28:	1ed4      	subge	r4, r2, #3
 8008f2a:	9306      	str	r3, [sp, #24]
 8008f2c:	bfb2      	itee	lt
 8008f2e:	2400      	movlt	r4, #0
 8008f30:	2318      	movge	r3, #24
 8008f32:	fb94 f4f3 	sdivge	r4, r4, r3
 8008f36:	f06f 0317 	mvn.w	r3, #23
 8008f3a:	fb04 3303 	mla	r3, r4, r3, r3
 8008f3e:	eb03 0a02 	add.w	sl, r3, r2
 8008f42:	9b04      	ldr	r3, [sp, #16]
 8008f44:	9a06      	ldr	r2, [sp, #24]
 8008f46:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009220 <__kernel_rem_pio2+0x320>
 8008f4a:	eb03 0802 	add.w	r8, r3, r2
 8008f4e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008f50:	1aa7      	subs	r7, r4, r2
 8008f52:	ae20      	add	r6, sp, #128	; 0x80
 8008f54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008f58:	2500      	movs	r5, #0
 8008f5a:	4545      	cmp	r5, r8
 8008f5c:	dd18      	ble.n	8008f90 <__kernel_rem_pio2+0x90>
 8008f5e:	9b08      	ldr	r3, [sp, #32]
 8008f60:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008f64:	aa20      	add	r2, sp, #128	; 0x80
 8008f66:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009220 <__kernel_rem_pio2+0x320>
 8008f6a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008f6e:	f1c3 0301 	rsb	r3, r3, #1
 8008f72:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008f76:	9307      	str	r3, [sp, #28]
 8008f78:	9b07      	ldr	r3, [sp, #28]
 8008f7a:	9a04      	ldr	r2, [sp, #16]
 8008f7c:	4443      	add	r3, r8
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	db2f      	blt.n	8008fe2 <__kernel_rem_pio2+0xe2>
 8008f82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f86:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008f8a:	462f      	mov	r7, r5
 8008f8c:	2600      	movs	r6, #0
 8008f8e:	e01b      	b.n	8008fc8 <__kernel_rem_pio2+0xc8>
 8008f90:	42ef      	cmn	r7, r5
 8008f92:	d407      	bmi.n	8008fa4 <__kernel_rem_pio2+0xa4>
 8008f94:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008f98:	f7f7 fabc 	bl	8000514 <__aeabi_i2d>
 8008f9c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008fa0:	3501      	adds	r5, #1
 8008fa2:	e7da      	b.n	8008f5a <__kernel_rem_pio2+0x5a>
 8008fa4:	ec51 0b18 	vmov	r0, r1, d8
 8008fa8:	e7f8      	b.n	8008f9c <__kernel_rem_pio2+0x9c>
 8008faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fae:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008fb2:	f7f7 fb19 	bl	80005e8 <__aeabi_dmul>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fbe:	f7f7 f95d 	bl	800027c <__adddf3>
 8008fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fc6:	3601      	adds	r6, #1
 8008fc8:	9b06      	ldr	r3, [sp, #24]
 8008fca:	429e      	cmp	r6, r3
 8008fcc:	f1a7 0708 	sub.w	r7, r7, #8
 8008fd0:	ddeb      	ble.n	8008faa <__kernel_rem_pio2+0xaa>
 8008fd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fd6:	3508      	adds	r5, #8
 8008fd8:	ecab 7b02 	vstmia	fp!, {d7}
 8008fdc:	f108 0801 	add.w	r8, r8, #1
 8008fe0:	e7ca      	b.n	8008f78 <__kernel_rem_pio2+0x78>
 8008fe2:	9b04      	ldr	r3, [sp, #16]
 8008fe4:	aa0c      	add	r2, sp, #48	; 0x30
 8008fe6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fec:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008fee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008ff2:	9c04      	ldr	r4, [sp, #16]
 8008ff4:	930a      	str	r3, [sp, #40]	; 0x28
 8008ff6:	ab98      	add	r3, sp, #608	; 0x260
 8008ff8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ffc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009000:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009004:	f8cd b008 	str.w	fp, [sp, #8]
 8009008:	4625      	mov	r5, r4
 800900a:	2d00      	cmp	r5, #0
 800900c:	dc78      	bgt.n	8009100 <__kernel_rem_pio2+0x200>
 800900e:	ec47 6b10 	vmov	d0, r6, r7
 8009012:	4650      	mov	r0, sl
 8009014:	f000 fc04 	bl	8009820 <scalbn>
 8009018:	ec57 6b10 	vmov	r6, r7, d0
 800901c:	2200      	movs	r2, #0
 800901e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009022:	ee10 0a10 	vmov	r0, s0
 8009026:	4639      	mov	r1, r7
 8009028:	f7f7 fade 	bl	80005e8 <__aeabi_dmul>
 800902c:	ec41 0b10 	vmov	d0, r0, r1
 8009030:	f000 fb6e 	bl	8009710 <floor>
 8009034:	4b7f      	ldr	r3, [pc, #508]	; (8009234 <__kernel_rem_pio2+0x334>)
 8009036:	ec51 0b10 	vmov	r0, r1, d0
 800903a:	2200      	movs	r2, #0
 800903c:	f7f7 fad4 	bl	80005e8 <__aeabi_dmul>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4630      	mov	r0, r6
 8009046:	4639      	mov	r1, r7
 8009048:	f7f7 f916 	bl	8000278 <__aeabi_dsub>
 800904c:	460f      	mov	r7, r1
 800904e:	4606      	mov	r6, r0
 8009050:	f7f7 fd7a 	bl	8000b48 <__aeabi_d2iz>
 8009054:	9007      	str	r0, [sp, #28]
 8009056:	f7f7 fa5d 	bl	8000514 <__aeabi_i2d>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4630      	mov	r0, r6
 8009060:	4639      	mov	r1, r7
 8009062:	f7f7 f909 	bl	8000278 <__aeabi_dsub>
 8009066:	f1ba 0f00 	cmp.w	sl, #0
 800906a:	4606      	mov	r6, r0
 800906c:	460f      	mov	r7, r1
 800906e:	dd70      	ble.n	8009152 <__kernel_rem_pio2+0x252>
 8009070:	1e62      	subs	r2, r4, #1
 8009072:	ab0c      	add	r3, sp, #48	; 0x30
 8009074:	9d07      	ldr	r5, [sp, #28]
 8009076:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800907a:	f1ca 0118 	rsb	r1, sl, #24
 800907e:	fa40 f301 	asr.w	r3, r0, r1
 8009082:	441d      	add	r5, r3
 8009084:	408b      	lsls	r3, r1
 8009086:	1ac0      	subs	r0, r0, r3
 8009088:	ab0c      	add	r3, sp, #48	; 0x30
 800908a:	9507      	str	r5, [sp, #28]
 800908c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009090:	f1ca 0317 	rsb	r3, sl, #23
 8009094:	fa40 f303 	asr.w	r3, r0, r3
 8009098:	9302      	str	r3, [sp, #8]
 800909a:	9b02      	ldr	r3, [sp, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd66      	ble.n	800916e <__kernel_rem_pio2+0x26e>
 80090a0:	9b07      	ldr	r3, [sp, #28]
 80090a2:	2200      	movs	r2, #0
 80090a4:	3301      	adds	r3, #1
 80090a6:	9307      	str	r3, [sp, #28]
 80090a8:	4615      	mov	r5, r2
 80090aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80090ae:	4294      	cmp	r4, r2
 80090b0:	f300 8099 	bgt.w	80091e6 <__kernel_rem_pio2+0x2e6>
 80090b4:	f1ba 0f00 	cmp.w	sl, #0
 80090b8:	dd07      	ble.n	80090ca <__kernel_rem_pio2+0x1ca>
 80090ba:	f1ba 0f01 	cmp.w	sl, #1
 80090be:	f000 80a5 	beq.w	800920c <__kernel_rem_pio2+0x30c>
 80090c2:	f1ba 0f02 	cmp.w	sl, #2
 80090c6:	f000 80c1 	beq.w	800924c <__kernel_rem_pio2+0x34c>
 80090ca:	9b02      	ldr	r3, [sp, #8]
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d14e      	bne.n	800916e <__kernel_rem_pio2+0x26e>
 80090d0:	4632      	mov	r2, r6
 80090d2:	463b      	mov	r3, r7
 80090d4:	4958      	ldr	r1, [pc, #352]	; (8009238 <__kernel_rem_pio2+0x338>)
 80090d6:	2000      	movs	r0, #0
 80090d8:	f7f7 f8ce 	bl	8000278 <__aeabi_dsub>
 80090dc:	4606      	mov	r6, r0
 80090de:	460f      	mov	r7, r1
 80090e0:	2d00      	cmp	r5, #0
 80090e2:	d044      	beq.n	800916e <__kernel_rem_pio2+0x26e>
 80090e4:	4650      	mov	r0, sl
 80090e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009228 <__kernel_rem_pio2+0x328>
 80090ea:	f000 fb99 	bl	8009820 <scalbn>
 80090ee:	4630      	mov	r0, r6
 80090f0:	4639      	mov	r1, r7
 80090f2:	ec53 2b10 	vmov	r2, r3, d0
 80090f6:	f7f7 f8bf 	bl	8000278 <__aeabi_dsub>
 80090fa:	4606      	mov	r6, r0
 80090fc:	460f      	mov	r7, r1
 80090fe:	e036      	b.n	800916e <__kernel_rem_pio2+0x26e>
 8009100:	4b4e      	ldr	r3, [pc, #312]	; (800923c <__kernel_rem_pio2+0x33c>)
 8009102:	2200      	movs	r2, #0
 8009104:	4630      	mov	r0, r6
 8009106:	4639      	mov	r1, r7
 8009108:	f7f7 fa6e 	bl	80005e8 <__aeabi_dmul>
 800910c:	f7f7 fd1c 	bl	8000b48 <__aeabi_d2iz>
 8009110:	f7f7 fa00 	bl	8000514 <__aeabi_i2d>
 8009114:	4b4a      	ldr	r3, [pc, #296]	; (8009240 <__kernel_rem_pio2+0x340>)
 8009116:	2200      	movs	r2, #0
 8009118:	4680      	mov	r8, r0
 800911a:	4689      	mov	r9, r1
 800911c:	f7f7 fa64 	bl	80005e8 <__aeabi_dmul>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4630      	mov	r0, r6
 8009126:	4639      	mov	r1, r7
 8009128:	f7f7 f8a6 	bl	8000278 <__aeabi_dsub>
 800912c:	f7f7 fd0c 	bl	8000b48 <__aeabi_d2iz>
 8009130:	9b02      	ldr	r3, [sp, #8]
 8009132:	f843 0b04 	str.w	r0, [r3], #4
 8009136:	3d01      	subs	r5, #1
 8009138:	9302      	str	r3, [sp, #8]
 800913a:	ab70      	add	r3, sp, #448	; 0x1c0
 800913c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	4640      	mov	r0, r8
 8009146:	4649      	mov	r1, r9
 8009148:	f7f7 f898 	bl	800027c <__adddf3>
 800914c:	4606      	mov	r6, r0
 800914e:	460f      	mov	r7, r1
 8009150:	e75b      	b.n	800900a <__kernel_rem_pio2+0x10a>
 8009152:	d105      	bne.n	8009160 <__kernel_rem_pio2+0x260>
 8009154:	1e63      	subs	r3, r4, #1
 8009156:	aa0c      	add	r2, sp, #48	; 0x30
 8009158:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800915c:	15c3      	asrs	r3, r0, #23
 800915e:	e79b      	b.n	8009098 <__kernel_rem_pio2+0x198>
 8009160:	4b38      	ldr	r3, [pc, #224]	; (8009244 <__kernel_rem_pio2+0x344>)
 8009162:	2200      	movs	r2, #0
 8009164:	f7f7 fcc6 	bl	8000af4 <__aeabi_dcmpge>
 8009168:	2800      	cmp	r0, #0
 800916a:	d139      	bne.n	80091e0 <__kernel_rem_pio2+0x2e0>
 800916c:	9002      	str	r0, [sp, #8]
 800916e:	2200      	movs	r2, #0
 8009170:	2300      	movs	r3, #0
 8009172:	4630      	mov	r0, r6
 8009174:	4639      	mov	r1, r7
 8009176:	f7f7 fc9f 	bl	8000ab8 <__aeabi_dcmpeq>
 800917a:	2800      	cmp	r0, #0
 800917c:	f000 80b4 	beq.w	80092e8 <__kernel_rem_pio2+0x3e8>
 8009180:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8009184:	465b      	mov	r3, fp
 8009186:	2200      	movs	r2, #0
 8009188:	9904      	ldr	r1, [sp, #16]
 800918a:	428b      	cmp	r3, r1
 800918c:	da65      	bge.n	800925a <__kernel_rem_pio2+0x35a>
 800918e:	2a00      	cmp	r2, #0
 8009190:	d07b      	beq.n	800928a <__kernel_rem_pio2+0x38a>
 8009192:	ab0c      	add	r3, sp, #48	; 0x30
 8009194:	f1aa 0a18 	sub.w	sl, sl, #24
 8009198:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 80a0 	beq.w	80092e2 <__kernel_rem_pio2+0x3e2>
 80091a2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009228 <__kernel_rem_pio2+0x328>
 80091a6:	4650      	mov	r0, sl
 80091a8:	f000 fb3a 	bl	8009820 <scalbn>
 80091ac:	4f23      	ldr	r7, [pc, #140]	; (800923c <__kernel_rem_pio2+0x33c>)
 80091ae:	ec55 4b10 	vmov	r4, r5, d0
 80091b2:	46d8      	mov	r8, fp
 80091b4:	2600      	movs	r6, #0
 80091b6:	f1b8 0f00 	cmp.w	r8, #0
 80091ba:	f280 80cf 	bge.w	800935c <__kernel_rem_pio2+0x45c>
 80091be:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009220 <__kernel_rem_pio2+0x320>
 80091c2:	465f      	mov	r7, fp
 80091c4:	f04f 0800 	mov.w	r8, #0
 80091c8:	2f00      	cmp	r7, #0
 80091ca:	f2c0 80fd 	blt.w	80093c8 <__kernel_rem_pio2+0x4c8>
 80091ce:	ab70      	add	r3, sp, #448	; 0x1c0
 80091d0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009248 <__kernel_rem_pio2+0x348>
 80091d4:	ec55 4b18 	vmov	r4, r5, d8
 80091d8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80091dc:	2600      	movs	r6, #0
 80091de:	e0e5      	b.n	80093ac <__kernel_rem_pio2+0x4ac>
 80091e0:	2302      	movs	r3, #2
 80091e2:	9302      	str	r3, [sp, #8]
 80091e4:	e75c      	b.n	80090a0 <__kernel_rem_pio2+0x1a0>
 80091e6:	f8db 3000 	ldr.w	r3, [fp]
 80091ea:	b955      	cbnz	r5, 8009202 <__kernel_rem_pio2+0x302>
 80091ec:	b123      	cbz	r3, 80091f8 <__kernel_rem_pio2+0x2f8>
 80091ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80091f2:	f8cb 3000 	str.w	r3, [fp]
 80091f6:	2301      	movs	r3, #1
 80091f8:	3201      	adds	r2, #1
 80091fa:	f10b 0b04 	add.w	fp, fp, #4
 80091fe:	461d      	mov	r5, r3
 8009200:	e755      	b.n	80090ae <__kernel_rem_pio2+0x1ae>
 8009202:	1acb      	subs	r3, r1, r3
 8009204:	f8cb 3000 	str.w	r3, [fp]
 8009208:	462b      	mov	r3, r5
 800920a:	e7f5      	b.n	80091f8 <__kernel_rem_pio2+0x2f8>
 800920c:	1e62      	subs	r2, r4, #1
 800920e:	ab0c      	add	r3, sp, #48	; 0x30
 8009210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009214:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009218:	a90c      	add	r1, sp, #48	; 0x30
 800921a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800921e:	e754      	b.n	80090ca <__kernel_rem_pio2+0x1ca>
	...
 800922c:	3ff00000 	.word	0x3ff00000
 8009230:	08009d40 	.word	0x08009d40
 8009234:	40200000 	.word	0x40200000
 8009238:	3ff00000 	.word	0x3ff00000
 800923c:	3e700000 	.word	0x3e700000
 8009240:	41700000 	.word	0x41700000
 8009244:	3fe00000 	.word	0x3fe00000
 8009248:	08009d00 	.word	0x08009d00
 800924c:	1e62      	subs	r2, r4, #1
 800924e:	ab0c      	add	r3, sp, #48	; 0x30
 8009250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009254:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009258:	e7de      	b.n	8009218 <__kernel_rem_pio2+0x318>
 800925a:	a90c      	add	r1, sp, #48	; 0x30
 800925c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009260:	3b01      	subs	r3, #1
 8009262:	430a      	orrs	r2, r1
 8009264:	e790      	b.n	8009188 <__kernel_rem_pio2+0x288>
 8009266:	3301      	adds	r3, #1
 8009268:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800926c:	2900      	cmp	r1, #0
 800926e:	d0fa      	beq.n	8009266 <__kernel_rem_pio2+0x366>
 8009270:	9a08      	ldr	r2, [sp, #32]
 8009272:	18e3      	adds	r3, r4, r3
 8009274:	18a6      	adds	r6, r4, r2
 8009276:	aa20      	add	r2, sp, #128	; 0x80
 8009278:	1c65      	adds	r5, r4, #1
 800927a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800927e:	9302      	str	r3, [sp, #8]
 8009280:	9b02      	ldr	r3, [sp, #8]
 8009282:	42ab      	cmp	r3, r5
 8009284:	da04      	bge.n	8009290 <__kernel_rem_pio2+0x390>
 8009286:	461c      	mov	r4, r3
 8009288:	e6b5      	b.n	8008ff6 <__kernel_rem_pio2+0xf6>
 800928a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800928c:	2301      	movs	r3, #1
 800928e:	e7eb      	b.n	8009268 <__kernel_rem_pio2+0x368>
 8009290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009292:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009296:	f7f7 f93d 	bl	8000514 <__aeabi_i2d>
 800929a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800929e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a0:	46b3      	mov	fp, r6
 80092a2:	461c      	mov	r4, r3
 80092a4:	2700      	movs	r7, #0
 80092a6:	f04f 0800 	mov.w	r8, #0
 80092aa:	f04f 0900 	mov.w	r9, #0
 80092ae:	9b06      	ldr	r3, [sp, #24]
 80092b0:	429f      	cmp	r7, r3
 80092b2:	dd06      	ble.n	80092c2 <__kernel_rem_pio2+0x3c2>
 80092b4:	ab70      	add	r3, sp, #448	; 0x1c0
 80092b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80092ba:	e9c3 8900 	strd	r8, r9, [r3]
 80092be:	3501      	adds	r5, #1
 80092c0:	e7de      	b.n	8009280 <__kernel_rem_pio2+0x380>
 80092c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80092c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80092ca:	f7f7 f98d 	bl	80005e8 <__aeabi_dmul>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4640      	mov	r0, r8
 80092d4:	4649      	mov	r1, r9
 80092d6:	f7f6 ffd1 	bl	800027c <__adddf3>
 80092da:	3701      	adds	r7, #1
 80092dc:	4680      	mov	r8, r0
 80092de:	4689      	mov	r9, r1
 80092e0:	e7e5      	b.n	80092ae <__kernel_rem_pio2+0x3ae>
 80092e2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80092e6:	e754      	b.n	8009192 <__kernel_rem_pio2+0x292>
 80092e8:	ec47 6b10 	vmov	d0, r6, r7
 80092ec:	f1ca 0000 	rsb	r0, sl, #0
 80092f0:	f000 fa96 	bl	8009820 <scalbn>
 80092f4:	ec57 6b10 	vmov	r6, r7, d0
 80092f8:	4b9f      	ldr	r3, [pc, #636]	; (8009578 <__kernel_rem_pio2+0x678>)
 80092fa:	ee10 0a10 	vmov	r0, s0
 80092fe:	2200      	movs	r2, #0
 8009300:	4639      	mov	r1, r7
 8009302:	f7f7 fbf7 	bl	8000af4 <__aeabi_dcmpge>
 8009306:	b300      	cbz	r0, 800934a <__kernel_rem_pio2+0x44a>
 8009308:	4b9c      	ldr	r3, [pc, #624]	; (800957c <__kernel_rem_pio2+0x67c>)
 800930a:	2200      	movs	r2, #0
 800930c:	4630      	mov	r0, r6
 800930e:	4639      	mov	r1, r7
 8009310:	f7f7 f96a 	bl	80005e8 <__aeabi_dmul>
 8009314:	f7f7 fc18 	bl	8000b48 <__aeabi_d2iz>
 8009318:	4605      	mov	r5, r0
 800931a:	f7f7 f8fb 	bl	8000514 <__aeabi_i2d>
 800931e:	4b96      	ldr	r3, [pc, #600]	; (8009578 <__kernel_rem_pio2+0x678>)
 8009320:	2200      	movs	r2, #0
 8009322:	f7f7 f961 	bl	80005e8 <__aeabi_dmul>
 8009326:	460b      	mov	r3, r1
 8009328:	4602      	mov	r2, r0
 800932a:	4639      	mov	r1, r7
 800932c:	4630      	mov	r0, r6
 800932e:	f7f6 ffa3 	bl	8000278 <__aeabi_dsub>
 8009332:	f7f7 fc09 	bl	8000b48 <__aeabi_d2iz>
 8009336:	f104 0b01 	add.w	fp, r4, #1
 800933a:	ab0c      	add	r3, sp, #48	; 0x30
 800933c:	f10a 0a18 	add.w	sl, sl, #24
 8009340:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009344:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009348:	e72b      	b.n	80091a2 <__kernel_rem_pio2+0x2a2>
 800934a:	4630      	mov	r0, r6
 800934c:	4639      	mov	r1, r7
 800934e:	f7f7 fbfb 	bl	8000b48 <__aeabi_d2iz>
 8009352:	ab0c      	add	r3, sp, #48	; 0x30
 8009354:	46a3      	mov	fp, r4
 8009356:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800935a:	e722      	b.n	80091a2 <__kernel_rem_pio2+0x2a2>
 800935c:	ab70      	add	r3, sp, #448	; 0x1c0
 800935e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009362:	ab0c      	add	r3, sp, #48	; 0x30
 8009364:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009368:	f7f7 f8d4 	bl	8000514 <__aeabi_i2d>
 800936c:	4622      	mov	r2, r4
 800936e:	462b      	mov	r3, r5
 8009370:	f7f7 f93a 	bl	80005e8 <__aeabi_dmul>
 8009374:	4632      	mov	r2, r6
 8009376:	e9c9 0100 	strd	r0, r1, [r9]
 800937a:	463b      	mov	r3, r7
 800937c:	4620      	mov	r0, r4
 800937e:	4629      	mov	r1, r5
 8009380:	f7f7 f932 	bl	80005e8 <__aeabi_dmul>
 8009384:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009388:	4604      	mov	r4, r0
 800938a:	460d      	mov	r5, r1
 800938c:	e713      	b.n	80091b6 <__kernel_rem_pio2+0x2b6>
 800938e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009392:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009396:	f7f7 f927 	bl	80005e8 <__aeabi_dmul>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	4620      	mov	r0, r4
 80093a0:	4629      	mov	r1, r5
 80093a2:	f7f6 ff6b 	bl	800027c <__adddf3>
 80093a6:	3601      	adds	r6, #1
 80093a8:	4604      	mov	r4, r0
 80093aa:	460d      	mov	r5, r1
 80093ac:	9b04      	ldr	r3, [sp, #16]
 80093ae:	429e      	cmp	r6, r3
 80093b0:	dc01      	bgt.n	80093b6 <__kernel_rem_pio2+0x4b6>
 80093b2:	45b0      	cmp	r8, r6
 80093b4:	daeb      	bge.n	800938e <__kernel_rem_pio2+0x48e>
 80093b6:	ab48      	add	r3, sp, #288	; 0x120
 80093b8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80093bc:	e9c3 4500 	strd	r4, r5, [r3]
 80093c0:	3f01      	subs	r7, #1
 80093c2:	f108 0801 	add.w	r8, r8, #1
 80093c6:	e6ff      	b.n	80091c8 <__kernel_rem_pio2+0x2c8>
 80093c8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	dc0b      	bgt.n	80093e6 <__kernel_rem_pio2+0x4e6>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	dc6e      	bgt.n	80094b0 <__kernel_rem_pio2+0x5b0>
 80093d2:	d045      	beq.n	8009460 <__kernel_rem_pio2+0x560>
 80093d4:	9b07      	ldr	r3, [sp, #28]
 80093d6:	f003 0007 	and.w	r0, r3, #7
 80093da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80093de:	ecbd 8b02 	vpop	{d8}
 80093e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80093e8:	2b03      	cmp	r3, #3
 80093ea:	d1f3      	bne.n	80093d4 <__kernel_rem_pio2+0x4d4>
 80093ec:	ab48      	add	r3, sp, #288	; 0x120
 80093ee:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80093f2:	46d0      	mov	r8, sl
 80093f4:	46d9      	mov	r9, fp
 80093f6:	f1b9 0f00 	cmp.w	r9, #0
 80093fa:	f1a8 0808 	sub.w	r8, r8, #8
 80093fe:	dc64      	bgt.n	80094ca <__kernel_rem_pio2+0x5ca>
 8009400:	465c      	mov	r4, fp
 8009402:	2c01      	cmp	r4, #1
 8009404:	f1aa 0a08 	sub.w	sl, sl, #8
 8009408:	dc7e      	bgt.n	8009508 <__kernel_rem_pio2+0x608>
 800940a:	2000      	movs	r0, #0
 800940c:	2100      	movs	r1, #0
 800940e:	f1bb 0f01 	cmp.w	fp, #1
 8009412:	f300 8097 	bgt.w	8009544 <__kernel_rem_pio2+0x644>
 8009416:	9b02      	ldr	r3, [sp, #8]
 8009418:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800941c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009420:	2b00      	cmp	r3, #0
 8009422:	f040 8099 	bne.w	8009558 <__kernel_rem_pio2+0x658>
 8009426:	9b01      	ldr	r3, [sp, #4]
 8009428:	e9c3 5600 	strd	r5, r6, [r3]
 800942c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009430:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009434:	e7ce      	b.n	80093d4 <__kernel_rem_pio2+0x4d4>
 8009436:	ab48      	add	r3, sp, #288	; 0x120
 8009438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f7f6 ff1c 	bl	800027c <__adddf3>
 8009444:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009448:	f1bb 0f00 	cmp.w	fp, #0
 800944c:	daf3      	bge.n	8009436 <__kernel_rem_pio2+0x536>
 800944e:	9b02      	ldr	r3, [sp, #8]
 8009450:	b113      	cbz	r3, 8009458 <__kernel_rem_pio2+0x558>
 8009452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009456:	4619      	mov	r1, r3
 8009458:	9b01      	ldr	r3, [sp, #4]
 800945a:	e9c3 0100 	strd	r0, r1, [r3]
 800945e:	e7b9      	b.n	80093d4 <__kernel_rem_pio2+0x4d4>
 8009460:	2000      	movs	r0, #0
 8009462:	2100      	movs	r1, #0
 8009464:	e7f0      	b.n	8009448 <__kernel_rem_pio2+0x548>
 8009466:	ab48      	add	r3, sp, #288	; 0x120
 8009468:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f7f6 ff04 	bl	800027c <__adddf3>
 8009474:	3c01      	subs	r4, #1
 8009476:	2c00      	cmp	r4, #0
 8009478:	daf5      	bge.n	8009466 <__kernel_rem_pio2+0x566>
 800947a:	9b02      	ldr	r3, [sp, #8]
 800947c:	b1e3      	cbz	r3, 80094b8 <__kernel_rem_pio2+0x5b8>
 800947e:	4602      	mov	r2, r0
 8009480:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009484:	9c01      	ldr	r4, [sp, #4]
 8009486:	e9c4 2300 	strd	r2, r3, [r4]
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009492:	f7f6 fef1 	bl	8000278 <__aeabi_dsub>
 8009496:	ad4a      	add	r5, sp, #296	; 0x128
 8009498:	2401      	movs	r4, #1
 800949a:	45a3      	cmp	fp, r4
 800949c:	da0f      	bge.n	80094be <__kernel_rem_pio2+0x5be>
 800949e:	9b02      	ldr	r3, [sp, #8]
 80094a0:	b113      	cbz	r3, 80094a8 <__kernel_rem_pio2+0x5a8>
 80094a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094a6:	4619      	mov	r1, r3
 80094a8:	9b01      	ldr	r3, [sp, #4]
 80094aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80094ae:	e791      	b.n	80093d4 <__kernel_rem_pio2+0x4d4>
 80094b0:	465c      	mov	r4, fp
 80094b2:	2000      	movs	r0, #0
 80094b4:	2100      	movs	r1, #0
 80094b6:	e7de      	b.n	8009476 <__kernel_rem_pio2+0x576>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	e7e2      	b.n	8009484 <__kernel_rem_pio2+0x584>
 80094be:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80094c2:	f7f6 fedb 	bl	800027c <__adddf3>
 80094c6:	3401      	adds	r4, #1
 80094c8:	e7e7      	b.n	800949a <__kernel_rem_pio2+0x59a>
 80094ca:	e9d8 4500 	ldrd	r4, r5, [r8]
 80094ce:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80094d2:	4620      	mov	r0, r4
 80094d4:	4632      	mov	r2, r6
 80094d6:	463b      	mov	r3, r7
 80094d8:	4629      	mov	r1, r5
 80094da:	f7f6 fecf 	bl	800027c <__adddf3>
 80094de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4620      	mov	r0, r4
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7f6 fec5 	bl	8000278 <__aeabi_dsub>
 80094ee:	4632      	mov	r2, r6
 80094f0:	463b      	mov	r3, r7
 80094f2:	f7f6 fec3 	bl	800027c <__adddf3>
 80094f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80094fa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80094fe:	ed88 7b00 	vstr	d7, [r8]
 8009502:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009506:	e776      	b.n	80093f6 <__kernel_rem_pio2+0x4f6>
 8009508:	e9da 8900 	ldrd	r8, r9, [sl]
 800950c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009510:	4640      	mov	r0, r8
 8009512:	4632      	mov	r2, r6
 8009514:	463b      	mov	r3, r7
 8009516:	4649      	mov	r1, r9
 8009518:	f7f6 feb0 	bl	800027c <__adddf3>
 800951c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4640      	mov	r0, r8
 8009526:	4649      	mov	r1, r9
 8009528:	f7f6 fea6 	bl	8000278 <__aeabi_dsub>
 800952c:	4632      	mov	r2, r6
 800952e:	463b      	mov	r3, r7
 8009530:	f7f6 fea4 	bl	800027c <__adddf3>
 8009534:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009538:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800953c:	ed8a 7b00 	vstr	d7, [sl]
 8009540:	3c01      	subs	r4, #1
 8009542:	e75e      	b.n	8009402 <__kernel_rem_pio2+0x502>
 8009544:	ab48      	add	r3, sp, #288	; 0x120
 8009546:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f7f6 fe95 	bl	800027c <__adddf3>
 8009552:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009556:	e75a      	b.n	800940e <__kernel_rem_pio2+0x50e>
 8009558:	9b01      	ldr	r3, [sp, #4]
 800955a:	9a01      	ldr	r2, [sp, #4]
 800955c:	601d      	str	r5, [r3, #0]
 800955e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009562:	605c      	str	r4, [r3, #4]
 8009564:	609f      	str	r7, [r3, #8]
 8009566:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800956a:	60d3      	str	r3, [r2, #12]
 800956c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009570:	6110      	str	r0, [r2, #16]
 8009572:	6153      	str	r3, [r2, #20]
 8009574:	e72e      	b.n	80093d4 <__kernel_rem_pio2+0x4d4>
 8009576:	bf00      	nop
 8009578:	41700000 	.word	0x41700000
 800957c:	3e700000 	.word	0x3e700000

08009580 <__kernel_sin>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	ed2d 8b04 	vpush	{d8-d9}
 8009588:	eeb0 8a41 	vmov.f32	s16, s2
 800958c:	eef0 8a61 	vmov.f32	s17, s3
 8009590:	ec55 4b10 	vmov	r4, r5, d0
 8009594:	b083      	sub	sp, #12
 8009596:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800959a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800959e:	9001      	str	r0, [sp, #4]
 80095a0:	da06      	bge.n	80095b0 <__kernel_sin+0x30>
 80095a2:	ee10 0a10 	vmov	r0, s0
 80095a6:	4629      	mov	r1, r5
 80095a8:	f7f7 face 	bl	8000b48 <__aeabi_d2iz>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d051      	beq.n	8009654 <__kernel_sin+0xd4>
 80095b0:	4622      	mov	r2, r4
 80095b2:	462b      	mov	r3, r5
 80095b4:	4620      	mov	r0, r4
 80095b6:	4629      	mov	r1, r5
 80095b8:	f7f7 f816 	bl	80005e8 <__aeabi_dmul>
 80095bc:	4682      	mov	sl, r0
 80095be:	468b      	mov	fp, r1
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4620      	mov	r0, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	f7f7 f80e 	bl	80005e8 <__aeabi_dmul>
 80095cc:	a341      	add	r3, pc, #260	; (adr r3, 80096d4 <__kernel_sin+0x154>)
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	4680      	mov	r8, r0
 80095d4:	4689      	mov	r9, r1
 80095d6:	4650      	mov	r0, sl
 80095d8:	4659      	mov	r1, fp
 80095da:	f7f7 f805 	bl	80005e8 <__aeabi_dmul>
 80095de:	a33f      	add	r3, pc, #252	; (adr r3, 80096dc <__kernel_sin+0x15c>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	f7f6 fe48 	bl	8000278 <__aeabi_dsub>
 80095e8:	4652      	mov	r2, sl
 80095ea:	465b      	mov	r3, fp
 80095ec:	f7f6 fffc 	bl	80005e8 <__aeabi_dmul>
 80095f0:	a33c      	add	r3, pc, #240	; (adr r3, 80096e4 <__kernel_sin+0x164>)
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	f7f6 fe41 	bl	800027c <__adddf3>
 80095fa:	4652      	mov	r2, sl
 80095fc:	465b      	mov	r3, fp
 80095fe:	f7f6 fff3 	bl	80005e8 <__aeabi_dmul>
 8009602:	a33a      	add	r3, pc, #232	; (adr r3, 80096ec <__kernel_sin+0x16c>)
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f7f6 fe36 	bl	8000278 <__aeabi_dsub>
 800960c:	4652      	mov	r2, sl
 800960e:	465b      	mov	r3, fp
 8009610:	f7f6 ffea 	bl	80005e8 <__aeabi_dmul>
 8009614:	a337      	add	r3, pc, #220	; (adr r3, 80096f4 <__kernel_sin+0x174>)
 8009616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961a:	f7f6 fe2f 	bl	800027c <__adddf3>
 800961e:	9b01      	ldr	r3, [sp, #4]
 8009620:	4606      	mov	r6, r0
 8009622:	460f      	mov	r7, r1
 8009624:	b9eb      	cbnz	r3, 8009662 <__kernel_sin+0xe2>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4650      	mov	r0, sl
 800962c:	4659      	mov	r1, fp
 800962e:	f7f6 ffdb 	bl	80005e8 <__aeabi_dmul>
 8009632:	a325      	add	r3, pc, #148	; (adr r3, 80096c8 <__kernel_sin+0x148>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f6 fe1e 	bl	8000278 <__aeabi_dsub>
 800963c:	4642      	mov	r2, r8
 800963e:	464b      	mov	r3, r9
 8009640:	f7f6 ffd2 	bl	80005e8 <__aeabi_dmul>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4620      	mov	r0, r4
 800964a:	4629      	mov	r1, r5
 800964c:	f7f6 fe16 	bl	800027c <__adddf3>
 8009650:	4604      	mov	r4, r0
 8009652:	460d      	mov	r5, r1
 8009654:	ec45 4b10 	vmov	d0, r4, r5
 8009658:	b003      	add	sp, #12
 800965a:	ecbd 8b04 	vpop	{d8-d9}
 800965e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009662:	4b1b      	ldr	r3, [pc, #108]	; (80096d0 <__kernel_sin+0x150>)
 8009664:	ec51 0b18 	vmov	r0, r1, d8
 8009668:	2200      	movs	r2, #0
 800966a:	f7f6 ffbd 	bl	80005e8 <__aeabi_dmul>
 800966e:	4632      	mov	r2, r6
 8009670:	ec41 0b19 	vmov	d9, r0, r1
 8009674:	463b      	mov	r3, r7
 8009676:	4640      	mov	r0, r8
 8009678:	4649      	mov	r1, r9
 800967a:	f7f6 ffb5 	bl	80005e8 <__aeabi_dmul>
 800967e:	4602      	mov	r2, r0
 8009680:	460b      	mov	r3, r1
 8009682:	ec51 0b19 	vmov	r0, r1, d9
 8009686:	f7f6 fdf7 	bl	8000278 <__aeabi_dsub>
 800968a:	4652      	mov	r2, sl
 800968c:	465b      	mov	r3, fp
 800968e:	f7f6 ffab 	bl	80005e8 <__aeabi_dmul>
 8009692:	ec53 2b18 	vmov	r2, r3, d8
 8009696:	f7f6 fdef 	bl	8000278 <__aeabi_dsub>
 800969a:	a30b      	add	r3, pc, #44	; (adr r3, 80096c8 <__kernel_sin+0x148>)
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	4606      	mov	r6, r0
 80096a2:	460f      	mov	r7, r1
 80096a4:	4640      	mov	r0, r8
 80096a6:	4649      	mov	r1, r9
 80096a8:	f7f6 ff9e 	bl	80005e8 <__aeabi_dmul>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4630      	mov	r0, r6
 80096b2:	4639      	mov	r1, r7
 80096b4:	f7f6 fde2 	bl	800027c <__adddf3>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4620      	mov	r0, r4
 80096be:	4629      	mov	r1, r5
 80096c0:	f7f6 fdda 	bl	8000278 <__aeabi_dsub>
 80096c4:	e7c4      	b.n	8009650 <__kernel_sin+0xd0>
 80096c6:	bf00      	nop
 80096c8:	55555549 	.word	0x55555549
 80096cc:	3fc55555 	.word	0x3fc55555
 80096d0:	3fe00000 	.word	0x3fe00000
 80096d4:	5acfd57c 	.word	0x5acfd57c
 80096d8:	3de5d93a 	.word	0x3de5d93a
 80096dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80096e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80096e4:	57b1fe7d 	.word	0x57b1fe7d
 80096e8:	3ec71de3 	.word	0x3ec71de3
 80096ec:	19c161d5 	.word	0x19c161d5
 80096f0:	3f2a01a0 	.word	0x3f2a01a0
 80096f4:	1110f8a6 	.word	0x1110f8a6
 80096f8:	3f811111 	.word	0x3f811111

080096fc <fabs>:
 80096fc:	ec51 0b10 	vmov	r0, r1, d0
 8009700:	ee10 2a10 	vmov	r2, s0
 8009704:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009708:	ec43 2b10 	vmov	d0, r2, r3
 800970c:	4770      	bx	lr
	...

08009710 <floor>:
 8009710:	ec51 0b10 	vmov	r0, r1, d0
 8009714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800971c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009720:	2e13      	cmp	r6, #19
 8009722:	ee10 5a10 	vmov	r5, s0
 8009726:	ee10 8a10 	vmov	r8, s0
 800972a:	460c      	mov	r4, r1
 800972c:	dc32      	bgt.n	8009794 <floor+0x84>
 800972e:	2e00      	cmp	r6, #0
 8009730:	da14      	bge.n	800975c <floor+0x4c>
 8009732:	a333      	add	r3, pc, #204	; (adr r3, 8009800 <floor+0xf0>)
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f7f6 fda0 	bl	800027c <__adddf3>
 800973c:	2200      	movs	r2, #0
 800973e:	2300      	movs	r3, #0
 8009740:	f7f7 f9e2 	bl	8000b08 <__aeabi_dcmpgt>
 8009744:	b138      	cbz	r0, 8009756 <floor+0x46>
 8009746:	2c00      	cmp	r4, #0
 8009748:	da57      	bge.n	80097fa <floor+0xea>
 800974a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800974e:	431d      	orrs	r5, r3
 8009750:	d001      	beq.n	8009756 <floor+0x46>
 8009752:	4c2d      	ldr	r4, [pc, #180]	; (8009808 <floor+0xf8>)
 8009754:	2500      	movs	r5, #0
 8009756:	4621      	mov	r1, r4
 8009758:	4628      	mov	r0, r5
 800975a:	e025      	b.n	80097a8 <floor+0x98>
 800975c:	4f2b      	ldr	r7, [pc, #172]	; (800980c <floor+0xfc>)
 800975e:	4137      	asrs	r7, r6
 8009760:	ea01 0307 	and.w	r3, r1, r7
 8009764:	4303      	orrs	r3, r0
 8009766:	d01f      	beq.n	80097a8 <floor+0x98>
 8009768:	a325      	add	r3, pc, #148	; (adr r3, 8009800 <floor+0xf0>)
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	f7f6 fd85 	bl	800027c <__adddf3>
 8009772:	2200      	movs	r2, #0
 8009774:	2300      	movs	r3, #0
 8009776:	f7f7 f9c7 	bl	8000b08 <__aeabi_dcmpgt>
 800977a:	2800      	cmp	r0, #0
 800977c:	d0eb      	beq.n	8009756 <floor+0x46>
 800977e:	2c00      	cmp	r4, #0
 8009780:	bfbe      	ittt	lt
 8009782:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009786:	fa43 f606 	asrlt.w	r6, r3, r6
 800978a:	19a4      	addlt	r4, r4, r6
 800978c:	ea24 0407 	bic.w	r4, r4, r7
 8009790:	2500      	movs	r5, #0
 8009792:	e7e0      	b.n	8009756 <floor+0x46>
 8009794:	2e33      	cmp	r6, #51	; 0x33
 8009796:	dd0b      	ble.n	80097b0 <floor+0xa0>
 8009798:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800979c:	d104      	bne.n	80097a8 <floor+0x98>
 800979e:	ee10 2a10 	vmov	r2, s0
 80097a2:	460b      	mov	r3, r1
 80097a4:	f7f6 fd6a 	bl	800027c <__adddf3>
 80097a8:	ec41 0b10 	vmov	d0, r0, r1
 80097ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80097b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097b8:	fa23 f707 	lsr.w	r7, r3, r7
 80097bc:	4207      	tst	r7, r0
 80097be:	d0f3      	beq.n	80097a8 <floor+0x98>
 80097c0:	a30f      	add	r3, pc, #60	; (adr r3, 8009800 <floor+0xf0>)
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	f7f6 fd59 	bl	800027c <__adddf3>
 80097ca:	2200      	movs	r2, #0
 80097cc:	2300      	movs	r3, #0
 80097ce:	f7f7 f99b 	bl	8000b08 <__aeabi_dcmpgt>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d0bf      	beq.n	8009756 <floor+0x46>
 80097d6:	2c00      	cmp	r4, #0
 80097d8:	da02      	bge.n	80097e0 <floor+0xd0>
 80097da:	2e14      	cmp	r6, #20
 80097dc:	d103      	bne.n	80097e6 <floor+0xd6>
 80097de:	3401      	adds	r4, #1
 80097e0:	ea25 0507 	bic.w	r5, r5, r7
 80097e4:	e7b7      	b.n	8009756 <floor+0x46>
 80097e6:	2301      	movs	r3, #1
 80097e8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80097ec:	fa03 f606 	lsl.w	r6, r3, r6
 80097f0:	4435      	add	r5, r6
 80097f2:	4545      	cmp	r5, r8
 80097f4:	bf38      	it	cc
 80097f6:	18e4      	addcc	r4, r4, r3
 80097f8:	e7f2      	b.n	80097e0 <floor+0xd0>
 80097fa:	2500      	movs	r5, #0
 80097fc:	462c      	mov	r4, r5
 80097fe:	e7aa      	b.n	8009756 <floor+0x46>
 8009800:	8800759c 	.word	0x8800759c
 8009804:	7e37e43c 	.word	0x7e37e43c
 8009808:	bff00000 	.word	0xbff00000
 800980c:	000fffff 	.word	0x000fffff

08009810 <nan>:
 8009810:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009818 <nan+0x8>
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	00000000 	.word	0x00000000
 800981c:	7ff80000 	.word	0x7ff80000

08009820 <scalbn>:
 8009820:	b570      	push	{r4, r5, r6, lr}
 8009822:	ec55 4b10 	vmov	r4, r5, d0
 8009826:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800982a:	4606      	mov	r6, r0
 800982c:	462b      	mov	r3, r5
 800982e:	b99a      	cbnz	r2, 8009858 <scalbn+0x38>
 8009830:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009834:	4323      	orrs	r3, r4
 8009836:	d036      	beq.n	80098a6 <scalbn+0x86>
 8009838:	4b39      	ldr	r3, [pc, #228]	; (8009920 <scalbn+0x100>)
 800983a:	4629      	mov	r1, r5
 800983c:	ee10 0a10 	vmov	r0, s0
 8009840:	2200      	movs	r2, #0
 8009842:	f7f6 fed1 	bl	80005e8 <__aeabi_dmul>
 8009846:	4b37      	ldr	r3, [pc, #220]	; (8009924 <scalbn+0x104>)
 8009848:	429e      	cmp	r6, r3
 800984a:	4604      	mov	r4, r0
 800984c:	460d      	mov	r5, r1
 800984e:	da10      	bge.n	8009872 <scalbn+0x52>
 8009850:	a32b      	add	r3, pc, #172	; (adr r3, 8009900 <scalbn+0xe0>)
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	e03a      	b.n	80098ce <scalbn+0xae>
 8009858:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800985c:	428a      	cmp	r2, r1
 800985e:	d10c      	bne.n	800987a <scalbn+0x5a>
 8009860:	ee10 2a10 	vmov	r2, s0
 8009864:	4620      	mov	r0, r4
 8009866:	4629      	mov	r1, r5
 8009868:	f7f6 fd08 	bl	800027c <__adddf3>
 800986c:	4604      	mov	r4, r0
 800986e:	460d      	mov	r5, r1
 8009870:	e019      	b.n	80098a6 <scalbn+0x86>
 8009872:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009876:	460b      	mov	r3, r1
 8009878:	3a36      	subs	r2, #54	; 0x36
 800987a:	4432      	add	r2, r6
 800987c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009880:	428a      	cmp	r2, r1
 8009882:	dd08      	ble.n	8009896 <scalbn+0x76>
 8009884:	2d00      	cmp	r5, #0
 8009886:	a120      	add	r1, pc, #128	; (adr r1, 8009908 <scalbn+0xe8>)
 8009888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800988c:	da1c      	bge.n	80098c8 <scalbn+0xa8>
 800988e:	a120      	add	r1, pc, #128	; (adr r1, 8009910 <scalbn+0xf0>)
 8009890:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009894:	e018      	b.n	80098c8 <scalbn+0xa8>
 8009896:	2a00      	cmp	r2, #0
 8009898:	dd08      	ble.n	80098ac <scalbn+0x8c>
 800989a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800989e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098a6:	ec45 4b10 	vmov	d0, r4, r5
 80098aa:	bd70      	pop	{r4, r5, r6, pc}
 80098ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80098b0:	da19      	bge.n	80098e6 <scalbn+0xc6>
 80098b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80098b6:	429e      	cmp	r6, r3
 80098b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80098bc:	dd0a      	ble.n	80098d4 <scalbn+0xb4>
 80098be:	a112      	add	r1, pc, #72	; (adr r1, 8009908 <scalbn+0xe8>)
 80098c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e2      	bne.n	800988e <scalbn+0x6e>
 80098c8:	a30f      	add	r3, pc, #60	; (adr r3, 8009908 <scalbn+0xe8>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f7f6 fe8b 	bl	80005e8 <__aeabi_dmul>
 80098d2:	e7cb      	b.n	800986c <scalbn+0x4c>
 80098d4:	a10a      	add	r1, pc, #40	; (adr r1, 8009900 <scalbn+0xe0>)
 80098d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d0b8      	beq.n	8009850 <scalbn+0x30>
 80098de:	a10e      	add	r1, pc, #56	; (adr r1, 8009918 <scalbn+0xf8>)
 80098e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e4:	e7b4      	b.n	8009850 <scalbn+0x30>
 80098e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098ea:	3236      	adds	r2, #54	; 0x36
 80098ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80098f4:	4620      	mov	r0, r4
 80098f6:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <scalbn+0x108>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	e7e8      	b.n	80098ce <scalbn+0xae>
 80098fc:	f3af 8000 	nop.w
 8009900:	c2f8f359 	.word	0xc2f8f359
 8009904:	01a56e1f 	.word	0x01a56e1f
 8009908:	8800759c 	.word	0x8800759c
 800990c:	7e37e43c 	.word	0x7e37e43c
 8009910:	8800759c 	.word	0x8800759c
 8009914:	fe37e43c 	.word	0xfe37e43c
 8009918:	c2f8f359 	.word	0xc2f8f359
 800991c:	81a56e1f 	.word	0x81a56e1f
 8009920:	43500000 	.word	0x43500000
 8009924:	ffff3cb0 	.word	0xffff3cb0
 8009928:	3c900000 	.word	0x3c900000

0800992c <_init>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	bf00      	nop
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr

08009938 <_fini>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr
