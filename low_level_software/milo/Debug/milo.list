
milo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006554  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006848  08006848  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006848  08006848  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006848  08006848  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006848  08006848  00016848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000070  080068c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  080068c0  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a8e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d5  00000000  00000000  00031b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00034408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00035270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dae  00000000  00000000  00035fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a32  00000000  00000000  00057d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c36ab  00000000  00000000  000697a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012ce4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004314  00000000  00000000  0012cea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066cc 	.word	0x080066cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080066cc 	.word	0x080066cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_DMA_Init+0x38>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <MX_DMA_Init+0x38>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6153      	str	r3, [r2, #20]
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_DMA_Init+0x38>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800028e:	2200      	movs	r2, #0
 8000290:	2100      	movs	r1, #0
 8000292:	2010      	movs	r0, #16
 8000294:	f001 fb55 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000298:	2010      	movs	r0, #16
 800029a:	f001 fb6e 	bl	800197a <HAL_NVIC_EnableIRQ>

}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000

080002ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08a      	sub	sp, #40	; 0x28
 80002b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c2:	4b35      	ldr	r3, [pc, #212]	; (8000398 <MX_GPIO_Init+0xec>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a34      	ldr	r2, [pc, #208]	; (8000398 <MX_GPIO_Init+0xec>)
 80002c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002cc:	6153      	str	r3, [r2, #20]
 80002ce:	4b32      	ldr	r3, [pc, #200]	; (8000398 <MX_GPIO_Init+0xec>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002d6:	613b      	str	r3, [r7, #16]
 80002d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <MX_GPIO_Init+0xec>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a2e      	ldr	r2, [pc, #184]	; (8000398 <MX_GPIO_Init+0xec>)
 80002e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002e4:	6153      	str	r3, [r2, #20]
 80002e6:	4b2c      	ldr	r3, [pc, #176]	; (8000398 <MX_GPIO_Init+0xec>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f2:	4b29      	ldr	r3, [pc, #164]	; (8000398 <MX_GPIO_Init+0xec>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a28      	ldr	r2, [pc, #160]	; (8000398 <MX_GPIO_Init+0xec>)
 80002f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b26      	ldr	r3, [pc, #152]	; (8000398 <MX_GPIO_Init+0xec>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030a:	4b23      	ldr	r3, [pc, #140]	; (8000398 <MX_GPIO_Init+0xec>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a22      	ldr	r2, [pc, #136]	; (8000398 <MX_GPIO_Init+0xec>)
 8000310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000314:	6153      	str	r3, [r2, #20]
 8000316:	4b20      	ldr	r3, [pc, #128]	; (8000398 <MX_GPIO_Init+0xec>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2120      	movs	r1, #32
 8000326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032a:	f001 fe33 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800032e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000334:	4b19      	ldr	r3, [pc, #100]	; (800039c <MX_GPIO_Init+0xf0>)
 8000336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	2300      	movs	r3, #0
 800033a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800033c:	f107 0314 	add.w	r3, r7, #20
 8000340:	4619      	mov	r1, r3
 8000342:	4817      	ldr	r0, [pc, #92]	; (80003a0 <MX_GPIO_Init+0xf4>)
 8000344:	f001 fcb4 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 8000348:	2310      	movs	r3, #16
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <MX_GPIO_Init+0xf0>)
 800034e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000350:	2301      	movs	r3, #1
 8000352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000354:	f107 0314 	add.w	r3, r7, #20
 8000358:	4619      	mov	r1, r3
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035e:	f001 fca7 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000362:	2320      	movs	r3, #32
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	2300      	movs	r3, #0
 8000370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	4619      	mov	r1, r3
 8000378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037c:	f001 fc98 	bl	8001cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000380:	2200      	movs	r2, #0
 8000382:	2100      	movs	r1, #0
 8000384:	200a      	movs	r0, #10
 8000386:	f001 fadc 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800038a:	200a      	movs	r0, #10
 800038c:	f001 faf5 	bl	800197a <HAL_NVIC_EnableIRQ>

}
 8000390:	bf00      	nop
 8000392:	3728      	adds	r7, #40	; 0x28
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40021000 	.word	0x40021000
 800039c:	10210000 	.word	0x10210000
 80003a0:	48000800 	.word	0x48000800

080003a4 <string_to_int>:

#define IS_NUMERIC_STRING(d) (*(char*)d >= 48) && (*(char*)d<= 57)
#define CONVERSION(d,k)  ((d<<3) +(d<<1))+(*(char*)k-48);

uint32_t
string_to_int(uint8_t *pszBuffer) {
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
    uint32_t u32Number=0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
    while( IS_NUMERIC_STRING(pszBuffer)) {
 80003b0:	e00c      	b.n	80003cc <string_to_int+0x28>
        u32Number=CONVERSION(u32Number,pszBuffer);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	00da      	lsls	r2, r3, #3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	4413      	add	r3, r2
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	7812      	ldrb	r2, [r2, #0]
 80003c0:	4413      	add	r3, r2
 80003c2:	3b30      	subs	r3, #48	; 0x30
 80003c4:	60fb      	str	r3, [r7, #12]
        pszBuffer++;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	3301      	adds	r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
    while( IS_NUMERIC_STRING(pszBuffer)) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b2f      	cmp	r3, #47	; 0x2f
 80003d2:	d903      	bls.n	80003dc <string_to_int+0x38>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b39      	cmp	r3, #57	; 0x39
 80003da:	d9ea      	bls.n	80003b2 <string_to_int+0xe>
    }
    return u32Number;
 80003dc:	68fb      	ldr	r3, [r7, #12]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
	...

080003ec <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int
_write(int file, uint8_t *ptr, int len) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, ptr, len);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	461a      	mov	r2, r3
 80003fe:	68b9      	ldr	r1, [r7, #8]
 8000400:	4803      	ldr	r0, [pc, #12]	; (8000410 <_write+0x24>)
 8000402:	f004 f9c3 	bl	800478c <HAL_UART_Transmit_IT>
	return len;
 8000406:	687b      	ldr	r3, [r7, #4]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	200000a8 	.word	0x200000a8

08000414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000416:	b0d9      	sub	sp, #356	; 0x164
 8000418:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041a:	f001 f92d 	bl	8001678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041e:	f000 f8f9 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000422:	f7ff ff43 	bl	80002ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000426:	f7ff ff23 	bl	8000270 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800042a:	f001 f857 	bl	80014dc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800042e:	f000 fc8b 	bl	8000d48 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000432:	f000 fd6f 	bl	8000f14 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000436:	f000 fdf3 	bl	8001020 <MX_TIM16_Init>
  MX_TIM17_Init();
 800043a:	f000 fe6b 	bl	8001114 <MX_TIM17_Init>
  MX_TIM3_Init();
 800043e:	f000 fcd7 	bl	8000df0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000442:	f000 fd2f 	bl	8000ea4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim6); // debug
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000446:	2100      	movs	r1, #0
 8000448:	4869      	ldr	r0, [pc, #420]	; (80005f0 <main+0x1dc>)
 800044a:	f002 ffbf 	bl	80033cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800044e:	2100      	movs	r1, #0
 8000450:	4868      	ldr	r0, [pc, #416]	; (80005f4 <main+0x1e0>)
 8000452:	f002 ffbb 	bl	80033cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000456:	2100      	movs	r1, #0
 8000458:	4867      	ldr	r0, [pc, #412]	; (80005f8 <main+0x1e4>)
 800045a:	f002 ffb7 	bl	80033cc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 800045e:	2100      	movs	r1, #0
 8000460:	4866      	ldr	r0, [pc, #408]	; (80005fc <main+0x1e8>)
 8000462:	f003 f945 	bl	80036f0 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_IT(&huart2, &message, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	4965      	ldr	r1, [pc, #404]	; (8000600 <main+0x1ec>)
 800046a:	4866      	ldr	r0, [pc, #408]	; (8000604 <main+0x1f0>)
 800046c:	f004 f9ea 	bl	8004844 <HAL_UART_Receive_IT>

  servo_t ft[3] = { 0 };
 8000470:	463b      	mov	r3, r7
 8000472:	4618      	mov	r0, r3
 8000474:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000478:	461a      	mov	r2, r3
 800047a:	2100      	movs	r1, #0
 800047c:	f005 f952 	bl	8005724 <memset>
  servo_init(&ft[0], htim15, TIM_CHANNEL_1, 0, 0, 1800, 500, 2500);
 8000480:	4e5b      	ldr	r6, [pc, #364]	; (80005f0 <main+0x1dc>)
 8000482:	46bc      	mov	ip, r7
 8000484:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000488:	9315      	str	r3, [sp, #84]	; 0x54
 800048a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800048e:	9314      	str	r3, [sp, #80]	; 0x50
 8000490:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000494:	9313      	str	r3, [sp, #76]	; 0x4c
 8000496:	2300      	movs	r3, #0
 8000498:	9312      	str	r3, [sp, #72]	; 0x48
 800049a:	2300      	movs	r3, #0
 800049c:	9311      	str	r3, [sp, #68]	; 0x44
 800049e:	2300      	movs	r3, #0
 80004a0:	9310      	str	r3, [sp, #64]	; 0x40
 80004a2:	466d      	mov	r5, sp
 80004a4:	f106 040c 	add.w	r4, r6, #12
 80004a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004bc:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80004c0:	4660      	mov	r0, ip
 80004c2:	f000 fa38 	bl	8000936 <servo_init>
  servo_init(&ft[1], htim16, TIM_CHANNEL_1, 0, 0, 1800, 500, 2500);
 80004c6:	4e4b      	ldr	r6, [pc, #300]	; (80005f4 <main+0x1e0>)
 80004c8:	463b      	mov	r3, r7
 80004ca:	f103 0c58 	add.w	ip, r3, #88	; 0x58
 80004ce:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80004d2:	9315      	str	r3, [sp, #84]	; 0x54
 80004d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004d8:	9314      	str	r3, [sp, #80]	; 0x50
 80004da:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80004de:	9313      	str	r3, [sp, #76]	; 0x4c
 80004e0:	2300      	movs	r3, #0
 80004e2:	9312      	str	r3, [sp, #72]	; 0x48
 80004e4:	2300      	movs	r3, #0
 80004e6:	9311      	str	r3, [sp, #68]	; 0x44
 80004e8:	2300      	movs	r3, #0
 80004ea:	9310      	str	r3, [sp, #64]	; 0x40
 80004ec:	466d      	mov	r5, sp
 80004ee:	f106 040c 	add.w	r4, r6, #12
 80004f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000502:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000506:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800050a:	4660      	mov	r0, ip
 800050c:	f000 fa13 	bl	8000936 <servo_init>
  servo_init(&ft[2], htim17, TIM_CHANNEL_1, 0, 0, 1800, 500, 2500);
 8000510:	4e39      	ldr	r6, [pc, #228]	; (80005f8 <main+0x1e4>)
 8000512:	463b      	mov	r3, r7
 8000514:	f103 0cb0 	add.w	ip, r3, #176	; 0xb0
 8000518:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800051c:	9315      	str	r3, [sp, #84]	; 0x54
 800051e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000522:	9314      	str	r3, [sp, #80]	; 0x50
 8000524:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000528:	9313      	str	r3, [sp, #76]	; 0x4c
 800052a:	2300      	movs	r3, #0
 800052c:	9312      	str	r3, [sp, #72]	; 0x48
 800052e:	2300      	movs	r3, #0
 8000530:	9311      	str	r3, [sp, #68]	; 0x44
 8000532:	2300      	movs	r3, #0
 8000534:	9310      	str	r3, [sp, #64]	; 0x40
 8000536:	466d      	mov	r5, sp
 8000538:	f106 040c 	add.w	r4, r6, #12
 800053c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800053e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000548:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800054c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000550:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000554:	4660      	mov	r0, ip
 8000556:	f000 f9ee 	bl	8000936 <servo_init>
		while (!HAL_GPIO_ReadPin(ENCODER_BUTTON_GPIO_Port, ENCODER_BUTTON_Pin));
	}
	*/

	 // sprawdzenie overflow
	 enc_val = __HAL_TIM_GET_COUNTER(&htim2);
 800055a:	4b28      	ldr	r3, [pc, #160]	; (80005fc <main+0x1e8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000560:	b21a      	sxth	r2, r3
 8000562:	4b29      	ldr	r3, [pc, #164]	; (8000608 <main+0x1f4>)
 8000564:	801a      	strh	r2, [r3, #0]
	 if (enc_val < 0) {
 8000566:	4b28      	ldr	r3, [pc, #160]	; (8000608 <main+0x1f4>)
 8000568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800056c:	2b00      	cmp	r3, #0
 800056e:	da03      	bge.n	8000578 <main+0x164>
		 enc_val = 0;
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <main+0x1f4>)
 8000572:	2200      	movs	r2, #0
 8000574:	801a      	strh	r2, [r3, #0]
 8000576:	e007      	b.n	8000588 <main+0x174>
	 } else if (enc_val > 180) {
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <main+0x1f4>)
 800057a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800057e:	2bb4      	cmp	r3, #180	; 0xb4
 8000580:	dd02      	ble.n	8000588 <main+0x174>
		 enc_val = 180;
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <main+0x1f4>)
 8000584:	22b4      	movs	r2, #180	; 0xb4
 8000586:	801a      	strh	r2, [r3, #0]
	 }
	 servo_angle[button]= enc_val;
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <main+0x1f4>)
 800058a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <main+0x1f8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	b291      	uxth	r1, r2
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <main+0x1fc>)
 8000596:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 servo_set(&ft[0], servo_angle[0] * 10, 0);
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <main+0x1fc>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	0092      	lsls	r2, r2, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	b299      	uxth	r1, r3
 80005a8:	463b      	mov	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fa17 	bl	80009e0 <servo_set>
	 servo_set(&ft[1], servo_angle[1] * 10, 0);
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <main+0x1fc>)
 80005b4:	885b      	ldrh	r3, [r3, #2]
 80005b6:	461a      	mov	r2, r3
 80005b8:	0092      	lsls	r2, r2, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	b299      	uxth	r1, r3
 80005c0:	463b      	mov	r3, r7
 80005c2:	3358      	adds	r3, #88	; 0x58
 80005c4:	2200      	movs	r2, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fa0a 	bl	80009e0 <servo_set>
	 servo_set(&ft[2], servo_angle[2] * 10, 0);
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0x1fc>)
 80005ce:	889b      	ldrh	r3, [r3, #4]
 80005d0:	461a      	mov	r2, r3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	b299      	uxth	r1, r3
 80005da:	463b      	mov	r3, r7
 80005dc:	33b0      	adds	r3, #176	; 0xb0
 80005de:	2200      	movs	r2, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f9fd 	bl	80009e0 <servo_set>
	 //printf("servo[0]: %d; servo[1]: %d; servo[2]: %d; Przycisk: %d\r\n", servo_angle[0], servo_angle[1], servo_angle[2], button);
	 HAL_Delay(10);
 80005e6:	200a      	movs	r0, #10
 80005e8:	f001 f8ac 	bl	8001744 <HAL_Delay>
	 enc_val = __HAL_TIM_GET_COUNTER(&htim2);
 80005ec:	e7b5      	b.n	800055a <main+0x146>
 80005ee:	bf00      	nop
 80005f0:	20000138 	.word	0x20000138
 80005f4:	200002b4 	.word	0x200002b4
 80005f8:	20000184 	.word	0x20000184
 80005fc:	20000268 	.word	0x20000268
 8000600:	200000a4 	.word	0x200000a4
 8000604:	200000a8 	.word	0x200000a8
 8000608:	2000012c 	.word	0x2000012c
 800060c:	2000008c 	.word	0x2000008c
 8000610:	20000090 	.word	0x20000090

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b090      	sub	sp, #64	; 0x40
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2228      	movs	r2, #40	; 0x28
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f005 f87e 	bl	8005724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800063a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000652:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0318 	add.w	r3, r7, #24
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fcc9 	bl	8001ff4 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000668:	f000 f95e 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fbbc 	bl	8002e04 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000692:	f000 f949 	bl	8000928 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3740      	adds	r7, #64	; 0x40
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENCODER_BUTTON_Pin) {
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	2b10      	cmp	r3, #16
 80006ae:	d118      	bne.n	80006e2 <HAL_GPIO_EXTI_Callback+0x42>
		button++;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80006b8:	6013      	str	r3, [r2, #0]
		button = button % 3;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80006bc:	6819      	ldr	r1, [r3, #0]
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <HAL_GPIO_EXTI_Callback+0x54>)
 80006c0:	fba3 2301 	umull	r2, r3, r3, r1
 80006c4:	085a      	lsrs	r2, r3, #1
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	1aca      	subs	r2, r1, r3
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, servo_angle[button]);
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x58>)
 80006d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <HAL_GPIO_EXTI_Callback+0x5c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
	}

}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	2000008c 	.word	0x2000008c
 80006f4:	aaaaaaab 	.word	0xaaaaaaab
 80006f8:	20000090 	.word	0x20000090
 80006fc:	20000268 	.word	0x20000268

08000700 <HAL_UART_RxCpltCallback>:

void
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a67      	ldr	r2, [pc, #412]	; (80008ac <HAL_UART_RxCpltCallback+0x1ac>)
 800070e:	4293      	cmp	r3, r2
 8000710:	f040 80c7 	bne.w	80008a2 <HAL_UART_RxCpltCallback+0x1a2>
		if (message == 'b') {
 8000714:	4b66      	ldr	r3, [pc, #408]	; (80008b0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b62      	cmp	r3, #98	; 0x62
 800071a:	d106      	bne.n	800072a <HAL_UART_RxCpltCallback+0x2a>
			printf("b %ld;\r\n", button);
 800071c:	4b65      	ldr	r3, [pc, #404]	; (80008b4 <HAL_UART_RxCpltCallback+0x1b4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	4865      	ldr	r0, [pc, #404]	; (80008b8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000724:	f005 f806 	bl	8005734 <iprintf>
 8000728:	e0b6      	b.n	8000898 <HAL_UART_RxCpltCallback+0x198>
		} else if (message == 'c') {
 800072a:	4b61      	ldr	r3, [pc, #388]	; (80008b0 <HAL_UART_RxCpltCallback+0x1b0>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b63      	cmp	r3, #99	; 0x63
 8000730:	d112      	bne.n	8000758 <HAL_UART_RxCpltCallback+0x58>
			uint8_t button_number;
			HAL_UART_Receive(huart, &button_number, 1, 10);
 8000732:	f107 0115 	add.w	r1, r7, #21
 8000736:	230a      	movs	r3, #10
 8000738:	2201      	movs	r2, #1
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f003 ff54 	bl	80045e8 <HAL_UART_Receive>
			button = button_number - '0';
 8000740:	7d7b      	ldrb	r3, [r7, #21]
 8000742:	3b30      	subs	r3, #48	; 0x30
 8000744:	461a      	mov	r2, r3
 8000746:	4b5b      	ldr	r3, [pc, #364]	; (80008b4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000748:	601a      	str	r2, [r3, #0]
			printf("c %ld;\r\n", button);
 800074a:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <HAL_UART_RxCpltCallback+0x1b4>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4619      	mov	r1, r3
 8000750:	485a      	ldr	r0, [pc, #360]	; (80008bc <HAL_UART_RxCpltCallback+0x1bc>)
 8000752:	f004 ffef 	bl	8005734 <iprintf>
 8000756:	e09f      	b.n	8000898 <HAL_UART_RxCpltCallback+0x198>
		} else if (message == 'e') {
 8000758:	4b55      	ldr	r3, [pc, #340]	; (80008b0 <HAL_UART_RxCpltCallback+0x1b0>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b65      	cmp	r3, #101	; 0x65
 800075e:	d107      	bne.n	8000770 <HAL_UART_RxCpltCallback+0x70>
			printf("e %ld;\r\n", __HAL_TIM_GET_COUNTER(&htim2));
 8000760:	4b57      	ldr	r3, [pc, #348]	; (80008c0 <HAL_UART_RxCpltCallback+0x1c0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000766:	4619      	mov	r1, r3
 8000768:	4856      	ldr	r0, [pc, #344]	; (80008c4 <HAL_UART_RxCpltCallback+0x1c4>)
 800076a:	f004 ffe3 	bl	8005734 <iprintf>
 800076e:	e093      	b.n	8000898 <HAL_UART_RxCpltCallback+0x198>
		} else if (message == 'a') {
 8000770:	4b4f      	ldr	r3, [pc, #316]	; (80008b0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b61      	cmp	r3, #97	; 0x61
 8000776:	d119      	bne.n	80007ac <HAL_UART_RxCpltCallback+0xac>
			uint8_t servo_number, semicolon;
			HAL_UART_Receive(huart, &servo_number, 1, 10);
 8000778:	f107 0114 	add.w	r1, r7, #20
 800077c:	230a      	movs	r3, #10
 800077e:	2201      	movs	r2, #1
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f003 ff31 	bl	80045e8 <HAL_UART_Receive>
			HAL_UART_Receive(huart, &semicolon, 1, 10);	// semicolon
 8000786:	f107 0113 	add.w	r1, r7, #19
 800078a:	230a      	movs	r3, #10
 800078c:	2201      	movs	r2, #1
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f003 ff2a 	bl	80045e8 <HAL_UART_Receive>
			printf("a%c %d;\r\n", servo_number, servo_angle[servo_number - '0']);
 8000794:	7d3b      	ldrb	r3, [r7, #20]
 8000796:	4619      	mov	r1, r3
 8000798:	7d3b      	ldrb	r3, [r7, #20]
 800079a:	3b30      	subs	r3, #48	; 0x30
 800079c:	4a4a      	ldr	r2, [pc, #296]	; (80008c8 <HAL_UART_RxCpltCallback+0x1c8>)
 800079e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4849      	ldr	r0, [pc, #292]	; (80008cc <HAL_UART_RxCpltCallback+0x1cc>)
 80007a6:	f004 ffc5 	bl	8005734 <iprintf>
 80007aa:	e075      	b.n	8000898 <HAL_UART_RxCpltCallback+0x198>
		} else if (message == 'd') {
 80007ac:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <HAL_UART_RxCpltCallback+0x1b0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b64      	cmp	r3, #100	; 0x64
 80007b2:	d112      	bne.n	80007da <HAL_UART_RxCpltCallback+0xda>
			uint8_t semicolon;
			HAL_UART_Receive(huart, &semicolon, 1, 10);	// semicolon
 80007b4:	f107 0112 	add.w	r1, r7, #18
 80007b8:	230a      	movs	r3, #10
 80007ba:	2201      	movs	r2, #1
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f003 ff13 	bl	80045e8 <HAL_UART_Receive>
			printf("d;%d;%d;%d;\r\n", servo_angle[0], servo_angle[1], servo_angle[2]);
 80007c2:	4b41      	ldr	r3, [pc, #260]	; (80008c8 <HAL_UART_RxCpltCallback+0x1c8>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	4619      	mov	r1, r3
 80007c8:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <HAL_UART_RxCpltCallback+0x1c8>)
 80007ca:	885b      	ldrh	r3, [r3, #2]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <HAL_UART_RxCpltCallback+0x1c8>)
 80007d0:	889b      	ldrh	r3, [r3, #4]
 80007d2:	483f      	ldr	r0, [pc, #252]	; (80008d0 <HAL_UART_RxCpltCallback+0x1d0>)
 80007d4:	f004 ffae 	bl	8005734 <iprintf>
 80007d8:	e05e      	b.n	8000898 <HAL_UART_RxCpltCallback+0x198>
		} else if (message == 's') {
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <HAL_UART_RxCpltCallback+0x1b0>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b73      	cmp	r3, #115	; 0x73
 80007e0:	d157      	bne.n	8000892 <HAL_UART_RxCpltCallback+0x192>
			uint8_t set_servo_number, tmp, set_servo_angle_str[4];
			uint8_t set_servo_angle_int;
			HAL_UART_Receive(huart, &set_servo_number, 1, 10);
 80007e2:	f107 0111 	add.w	r1, r7, #17
 80007e6:	230a      	movs	r3, #10
 80007e8:	2201      	movs	r2, #1
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f003 fefc 	bl	80045e8 <HAL_UART_Receive>
			HAL_UART_Receive(huart, &tmp, 1, 10); // space
 80007f0:	f107 0110 	add.w	r1, r7, #16
 80007f4:	230a      	movs	r3, #10
 80007f6:	2201      	movs	r2, #1
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f003 fef5 	bl	80045e8 <HAL_UART_Receive>
			for (uint8_t i = 0; i < 4; i++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	75bb      	strb	r3, [r7, #22]
 8000802:	e01b      	b.n	800083c <HAL_UART_RxCpltCallback+0x13c>
			HAL_UART_Receive(huart, &tmp, 1, 10);
 8000804:	f107 0110 	add.w	r1, r7, #16
 8000808:	230a      	movs	r3, #10
 800080a:	2201      	movs	r2, #1
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f003 feeb 	bl	80045e8 <HAL_UART_Receive>
				if (tmp == ';') {
 8000812:	7c3b      	ldrb	r3, [r7, #16]
 8000814:	2b3b      	cmp	r3, #59	; 0x3b
 8000816:	d107      	bne.n	8000828 <HAL_UART_RxCpltCallback+0x128>
					set_servo_angle_str[i] = 0;
 8000818:	7dbb      	ldrb	r3, [r7, #22]
 800081a:	f107 0218 	add.w	r2, r7, #24
 800081e:	4413      	add	r3, r2
 8000820:	2200      	movs	r2, #0
 8000822:	f803 2c0c 	strb.w	r2, [r3, #-12]
					break;
 8000826:	e00c      	b.n	8000842 <HAL_UART_RxCpltCallback+0x142>
				}
				set_servo_angle_str[i] = tmp;
 8000828:	7dbb      	ldrb	r3, [r7, #22]
 800082a:	7c3a      	ldrb	r2, [r7, #16]
 800082c:	f107 0118 	add.w	r1, r7, #24
 8000830:	440b      	add	r3, r1
 8000832:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (uint8_t i = 0; i < 4; i++) {
 8000836:	7dbb      	ldrb	r3, [r7, #22]
 8000838:	3301      	adds	r3, #1
 800083a:	75bb      	strb	r3, [r7, #22]
 800083c:	7dbb      	ldrb	r3, [r7, #22]
 800083e:	2b03      	cmp	r3, #3
 8000840:	d9e0      	bls.n	8000804 <HAL_UART_RxCpltCallback+0x104>
			}
			set_servo_angle_int = string_to_int(set_servo_angle_str);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fdac 	bl	80003a4 <string_to_int>
 800084c:	4603      	mov	r3, r0
 800084e:	75fb      	strb	r3, [r7, #23]
			if (set_servo_angle_int > 180) {
 8000850:	7dfb      	ldrb	r3, [r7, #23]
 8000852:	2bb4      	cmp	r3, #180	; 0xb4
 8000854:	d904      	bls.n	8000860 <HAL_UART_RxCpltCallback+0x160>
				set_servo_angle_int = 180;
 8000856:	23b4      	movs	r3, #180	; 0xb4
 8000858:	75fb      	strb	r3, [r7, #23]
				printf("zbyt duzy kat\r\n");
 800085a:	481e      	ldr	r0, [pc, #120]	; (80008d4 <HAL_UART_RxCpltCallback+0x1d4>)
 800085c:	f004 fff0 	bl	8005840 <puts>
			} else if (set_servo_angle_int < 0) {
				set_servo_angle_int = 0;
				printf("zbyt maly kat\r\n");
			}
			servo_angle[set_servo_number - '0'] = set_servo_angle_int;
 8000860:	7c7b      	ldrb	r3, [r7, #17]
 8000862:	3b30      	subs	r3, #48	; 0x30
 8000864:	7dfa      	ldrb	r2, [r7, #23]
 8000866:	b291      	uxth	r1, r2
 8000868:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <HAL_UART_RxCpltCallback+0x1c8>)
 800086a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (set_servo_number - '0' == button) {
 800086e:	7c7b      	ldrb	r3, [r7, #17]
 8000870:	3b30      	subs	r3, #48	; 0x30
 8000872:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000874:	6812      	ldr	r2, [r2, #0]
 8000876:	4293      	cmp	r3, r2
 8000878:	d103      	bne.n	8000882 <HAL_UART_RxCpltCallback+0x182>
				__HAL_TIM_SET_COUNTER(&htim2, set_servo_angle_int);
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_UART_RxCpltCallback+0x1c0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	7dfa      	ldrb	r2, [r7, #23]
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
			}
			printf("s%c %d;\r\n", set_servo_number, set_servo_angle_int);
 8000882:	7c7b      	ldrb	r3, [r7, #17]
 8000884:	4619      	mov	r1, r3
 8000886:	7dfb      	ldrb	r3, [r7, #23]
 8000888:	461a      	mov	r2, r3
 800088a:	4813      	ldr	r0, [pc, #76]	; (80008d8 <HAL_UART_RxCpltCallback+0x1d8>)
 800088c:	f004 ff52 	bl	8005734 <iprintf>
 8000890:	e002      	b.n	8000898 <HAL_UART_RxCpltCallback+0x198>
		} else {
			printf("Niepoprawne dane\r\n");
 8000892:	4812      	ldr	r0, [pc, #72]	; (80008dc <HAL_UART_RxCpltCallback+0x1dc>)
 8000894:	f004 ffd4 	bl	8005840 <puts>
		}
		HAL_UART_Receive_IT(huart, &message, 1);
 8000898:	2201      	movs	r2, #1
 800089a:	4905      	ldr	r1, [pc, #20]	; (80008b0 <HAL_UART_RxCpltCallback+0x1b0>)
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f003 ffd1 	bl	8004844 <HAL_UART_Receive_IT>
	}
}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40004400 	.word	0x40004400
 80008b0:	200000a4 	.word	0x200000a4
 80008b4:	2000008c 	.word	0x2000008c
 80008b8:	080066e4 	.word	0x080066e4
 80008bc:	080066f0 	.word	0x080066f0
 80008c0:	20000268 	.word	0x20000268
 80008c4:	080066fc 	.word	0x080066fc
 80008c8:	20000090 	.word	0x20000090
 80008cc:	08006708 	.word	0x08006708
 80008d0:	08006714 	.word	0x08006714
 80008d4:	08006724 	.word	0x08006724
 80008d8:	08006734 	.word	0x08006734
 80008dc:	08006740 	.word	0x08006740

080008e0 <HAL_TIM_PeriodElapsedCallback>:

void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {	// wyswietlanie aktualnych danych do debugu
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d10f      	bne.n	8000910 <HAL_TIM_PeriodElapsedCallback+0x30>
		printf("a0: %d; a1: %d; a2: %d; b: %ld\r\n", servo_angle[0], servo_angle[1], servo_angle[2], button);
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80008f8:	885b      	ldrh	r3, [r3, #2]
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80008fe:	889b      	ldrh	r3, [r3, #4]
 8000900:	4618      	mov	r0, r3
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	4603      	mov	r3, r0
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800090c:	f004 ff12 	bl	8005734 <iprintf>
	}
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000021c 	.word	0x2000021c
 800091c:	20000090 	.word	0x20000090
 8000920:	2000008c 	.word	0x2000008c
 8000924:	08006754 	.word	0x08006754

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <servo_init>:
		uint8_t tch,
		uint16_t a,
		uint16_t amin,
		uint16_t amax,
		uint16_t pmin,
		uint16_t pmax) {
 8000936:	b084      	sub	sp, #16
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	f107 0014 	add.w	r0, r7, #20
 8000944:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	servo->htim = htm;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4618      	mov	r0, r3
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	224c      	movs	r2, #76	; 0x4c
 8000952:	4619      	mov	r1, r3
 8000954:	f004 fed8 	bl	8005708 <memcpy>
	servo->tim_channel = tch;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800095e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	servo->angle = a;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000968:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	servo->angle_min = amin;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8000972:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	servo->angle_max = amax;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800097c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	servo->pwm_min = pmin;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8000986:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	servo->pwm_max = pmax;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8000990:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	//servo_set(servo, a, 0);
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800099e:	b004      	add	sp, #16
 80009a0:	4770      	bx	lr

080009a2 <servo_step>:

uint16_t
servo_step(servo_t servo) {
 80009a2:	b084      	sub	sp, #16
 80009a4:	b490      	push	{r4, r7}
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	f107 0408 	add.w	r4, r7, #8
 80009ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return ((1000 * (servo.pwm_max - servo.pwm_min)) / (servo.angle_max - servo.angle_min));
 80009b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80009b4:	461a      	mov	r2, r3
 80009b6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009c0:	fb02 f203 	mul.w	r2, r2, r3
 80009c4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80009c8:	4619      	mov	r1, r3
 80009ca:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80009ce:	1acb      	subs	r3, r1, r3
 80009d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80009d4:	b29b      	uxth	r3, r3
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc90      	pop	{r4, r7}
 80009dc:	b004      	add	sp, #16
 80009de:	4770      	bx	lr

080009e0 <servo_set>:

void
servo_set(servo_t* servo, uint16_t angle, uint8_t mode) {
 80009e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e2:	b097      	sub	sp, #92	; 0x5c
 80009e4:	af12      	add	r7, sp, #72	; 0x48
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	460b      	mov	r3, r1
 80009ea:	807b      	strh	r3, [r7, #2]
 80009ec:	4613      	mov	r3, r2
 80009ee:	707b      	strb	r3, [r7, #1]
	uint16_t val;
	servo->angle = angle;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	887a      	ldrh	r2, [r7, #2]
 80009f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	if (angle > servo->angle_max) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80009fe:	887a      	ldrh	r2, [r7, #2]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d904      	bls.n	8000a0e <servo_set+0x2e>
		angle = servo->angle_max;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000a0a:	807b      	strh	r3, [r7, #2]
 8000a0c:	e009      	b.n	8000a22 <servo_set+0x42>
	} else if (angle < servo->angle_min) {
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000a14:	887a      	ldrh	r2, [r7, #2]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d203      	bcs.n	8000a22 <servo_set+0x42>
		angle = servo->angle_min;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000a20:	807b      	strh	r3, [r7, #2]
	}
	if (mode) {
 8000a22:	787b      	ldrb	r3, [r7, #1]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d020      	beq.n	8000a6a <servo_set+0x8a>
		val = servo->pwm_min + ((angle - servo->angle_min) * servo_step(*servo)) / 1000;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f8b3 5054 	ldrh.w	r5, [r3, #84]	; 0x54
 8000a2e:	887b      	ldrh	r3, [r7, #2]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8000a36:	1a9e      	subs	r6, r3, r2
 8000a38:	687c      	ldr	r4, [r7, #4]
 8000a3a:	4668      	mov	r0, sp
 8000a3c:	f104 0310 	add.w	r3, r4, #16
 8000a40:	2248      	movs	r2, #72	; 0x48
 8000a42:	4619      	mov	r1, r3
 8000a44:	f004 fe60 	bl	8005708 <memcpy>
 8000a48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a4c:	f7ff ffa9 	bl	80009a2 <servo_step>
 8000a50:	4603      	mov	r3, r0
 8000a52:	fb03 f306 	mul.w	r3, r3, r6
 8000a56:	4a32      	ldr	r2, [pc, #200]	; (8000b20 <servo_set+0x140>)
 8000a58:	fb82 1203 	smull	r1, r2, r2, r3
 8000a5c:	1192      	asrs	r2, r2, #6
 8000a5e:	17db      	asrs	r3, r3, #31
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	442b      	add	r3, r5
 8000a66:	81fb      	strh	r3, [r7, #14]
 8000a68:	e01f      	b.n	8000aaa <servo_set+0xca>
	} else {
		val = servo->pwm_max - ((angle - servo->angle_min) * servo_step(*servo)) / 1000;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f8b3 5056 	ldrh.w	r5, [r3, #86]	; 0x56
 8000a70:	887b      	ldrh	r3, [r7, #2]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8000a78:	1a9e      	subs	r6, r3, r2
 8000a7a:	687c      	ldr	r4, [r7, #4]
 8000a7c:	4668      	mov	r0, sp
 8000a7e:	f104 0310 	add.w	r3, r4, #16
 8000a82:	2248      	movs	r2, #72	; 0x48
 8000a84:	4619      	mov	r1, r3
 8000a86:	f004 fe3f 	bl	8005708 <memcpy>
 8000a8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a8e:	f7ff ff88 	bl	80009a2 <servo_step>
 8000a92:	4603      	mov	r3, r0
 8000a94:	fb03 f306 	mul.w	r3, r3, r6
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <servo_set+0x140>)
 8000a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9e:	1192      	asrs	r2, r2, #6
 8000aa0:	17db      	asrs	r3, r3, #31
 8000aa2:	1a9b      	subs	r3, r3, r2
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	442b      	add	r3, r5
 8000aa8:	81fb      	strh	r3, [r7, #14]
	}
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d104      	bne.n	8000abe <servo_set+0xde>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	89fa      	ldrh	r2, [r7, #14]
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000abc:	e02b      	b.n	8000b16 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d104      	bne.n	8000ad2 <servo_set+0xf2>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	89fb      	ldrh	r3, [r7, #14]
 8000ace:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ad0:	e021      	b.n	8000b16 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000ad8:	2b08      	cmp	r3, #8
 8000ada:	d104      	bne.n	8000ae6 <servo_set+0x106>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000ae4:	e017      	b.n	8000b16 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000aec:	2b0c      	cmp	r3, #12
 8000aee:	d104      	bne.n	8000afa <servo_set+0x11a>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	89fb      	ldrh	r3, [r7, #14]
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000af8:	e00d      	b.n	8000b16 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000b00:	2b10      	cmp	r3, #16
 8000b02:	d104      	bne.n	8000b0e <servo_set+0x12e>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	89fb      	ldrh	r3, [r7, #14]
 8000b0a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000b0c:	e003      	b.n	8000b16 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	89fb      	ldrh	r3, [r7, #14]
 8000b14:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	10624dd3 	.word	0x10624dd3

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x44>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_MspInit+0x44>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6193      	str	r3, [r2, #24]
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_MspInit+0x44>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x44>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x44>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	61d3      	str	r3, [r2, #28]
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x44>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b5a:	2007      	movs	r0, #7
 8000b5c:	f000 fee6 	bl	800192c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021000 	.word	0x40021000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 fda0 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000bcc:	2010      	movs	r0, #16
 8000bce:	f001 f9f9 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <DMA1_Channel6_IRQHandler+0x10>)
 8000bde:	f000 ffa4 	bl	8001b2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000300 	.word	0x20000300

08000bec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <USART2_IRQHandler+0x10>)
 8000bf2:	f003 fe65 	bl	80048c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000a8 	.word	0x200000a8

08000c00 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <TIM6_DAC1_IRQHandler+0x10>)
 8000c06:	f002 fe01 	bl	800380c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000021c 	.word	0x2000021c

08000c14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	e00a      	b.n	8000c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c26:	f3af 8000 	nop.w
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	b2ca      	uxtb	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf0      	blt.n	8000c26 <_read+0x12>
	}

return len;
 8000c44:	687b      	ldr	r3, [r7, #4]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
	return -1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c76:	605a      	str	r2, [r3, #4]
	return 0;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_isatty>:

int _isatty(int file)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc0:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <_sbrk+0x5c>)
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <_sbrk+0x60>)
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <_sbrk+0x64>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	; (8000d20 <_sbrk+0x68>)
 8000cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d207      	bcs.n	8000cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce8:	f004 fce4 	bl	80056b4 <__errno>
 8000cec:	4603      	mov	r3, r0
 8000cee:	220c      	movs	r2, #12
 8000cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cf6:	e009      	b.n	8000d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <_sbrk+0x64>)
 8000d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20003000 	.word	0x20003000
 8000d18:	00000400 	.word	0x00000400
 8000d1c:	20000098 	.word	0x20000098
 8000d20:	20000358 	.word	0x20000358

08000d24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	2224      	movs	r2, #36	; 0x24
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f004 fce4 	bl	8005724 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_TIM2_Init+0xa4>)
 8000d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <MX_TIM2_Init+0xa4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_TIM2_Init+0xa4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <MX_TIM2_Init+0xa4>)
 8000d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_TIM2_Init+0xa4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_TIM2_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000d9e:	230f      	movs	r3, #15
 8000da0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000da6:	2301      	movs	r3, #1
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000dae:	230f      	movs	r3, #15
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4619      	mov	r1, r3
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <MX_TIM2_Init+0xa4>)
 8000dba:	f002 fbf3 	bl	80035a4 <HAL_TIM_Encoder_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000dc4:	f7ff fdb0 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_TIM2_Init+0xa4>)
 8000dd6:	f003 fab5 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000de0:	f7ff fda2 	bl	8000928 <Error_Handler>
  }

}
 8000de4:	bf00      	nop
 8000de6:	3730      	adds	r7, #48	; 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000268 	.word	0x20000268

08000df0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e02:	463b      	mov	r3, r7
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	615a      	str	r2, [r3, #20]
 8000e12:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_TIM3_Init+0xac>)
 8000e16:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <MX_TIM3_Init+0xb0>)
 8000e18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM3_PWM_PRESCALER;
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <MX_TIM3_Init+0xac>)
 8000e1c:	2247      	movs	r2, #71	; 0x47
 8000e1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MX_TIM3_Init+0xac>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_PWM_PERIOD;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_TIM3_Init+0xac>)
 8000e28:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_TIM3_Init+0xac>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_TIM3_Init+0xac>)
 8000e36:	2280      	movs	r2, #128	; 0x80
 8000e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e3a:	4818      	ldr	r0, [pc, #96]	; (8000e9c <MX_TIM3_Init+0xac>)
 8000e3c:	f002 fa6f 	bl	800331e <HAL_TIM_PWM_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e46:	f7ff fd6f 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4810      	ldr	r0, [pc, #64]	; (8000e9c <MX_TIM3_Init+0xac>)
 8000e5a:	f003 fa73 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e64:	f7ff fd60 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e68:	2360      	movs	r3, #96	; 0x60
 8000e6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4807      	ldr	r0, [pc, #28]	; (8000e9c <MX_TIM3_Init+0xac>)
 8000e80:	f002 fde4 	bl	8003a4c <HAL_TIM_PWM_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000e8a:	f7ff fd4d 	bl	8000928 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000e8e:	4803      	ldr	r0, [pc, #12]	; (8000e9c <MX_TIM3_Init+0xac>)
 8000e90:	f000 fa7c 	bl	800138c <HAL_TIM_MspPostInit>

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200001d0 	.word	0x200001d0
 8000ea0:	40000400 	.word	0x40000400

08000ea4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_TIM6_Init+0x68>)
 8000eb6:	4a16      	ldr	r2, [pc, #88]	; (8000f10 <MX_TIM6_Init+0x6c>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PRINT_PRESCALER;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_TIM6_Init+0x68>)
 8000ebc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000ec0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_TIM6_Init+0x68>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_PRINT_PERIOD;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_TIM6_Init+0x68>)
 8000eca:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ece:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_TIM6_Init+0x68>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <MX_TIM6_Init+0x68>)
 8000ed8:	f002 f9ca 	bl	8003270 <HAL_TIM_Base_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000ee2:	f7ff fd21 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <MX_TIM6_Init+0x68>)
 8000ef4:	f003 fa26 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000efe:	f7ff fd13 	bl	8000928 <Error_Handler>
  }

}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000021c 	.word	0x2000021c
 8000f10:	40001000 	.word	0x40001000

08000f14 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b096      	sub	sp, #88	; 0x58
 8000f18:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
 8000f36:	615a      	str	r2, [r3, #20]
 8000f38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	222c      	movs	r2, #44	; 0x2c
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f004 fbef 	bl	8005724 <memset>

  htim15.Instance = TIM15;
 8000f46:	4b34      	ldr	r3, [pc, #208]	; (8001018 <MX_TIM15_Init+0x104>)
 8000f48:	4a34      	ldr	r2, [pc, #208]	; (800101c <MX_TIM15_Init+0x108>)
 8000f4a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = TIM15_PWM_PRESCALER;
 8000f4c:	4b32      	ldr	r3, [pc, #200]	; (8001018 <MX_TIM15_Init+0x104>)
 8000f4e:	2247      	movs	r2, #71	; 0x47
 8000f50:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b31      	ldr	r3, [pc, #196]	; (8001018 <MX_TIM15_Init+0x104>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = TIM15_PWM_PERIOD;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <MX_TIM15_Init+0x104>)
 8000f5a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000f5e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <MX_TIM15_Init+0x104>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <MX_TIM15_Init+0x104>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <MX_TIM15_Init+0x104>)
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f72:	4829      	ldr	r0, [pc, #164]	; (8001018 <MX_TIM15_Init+0x104>)
 8000f74:	f002 f9d3 	bl	800331e <HAL_TIM_PWM_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f7ff fcd3 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4821      	ldr	r0, [pc, #132]	; (8001018 <MX_TIM15_Init+0x104>)
 8000f92:	f003 f9d7 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000f9c:	f7ff fcc4 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa0:	2360      	movs	r3, #96	; 0x60
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4814      	ldr	r0, [pc, #80]	; (8001018 <MX_TIM15_Init+0x104>)
 8000fc6:	f002 fd41 	bl	8003a4c <HAL_TIM_PWM_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000fd0:	f7ff fcaa 	bl	8000928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4807      	ldr	r0, [pc, #28]	; (8001018 <MX_TIM15_Init+0x104>)
 8000ffc:	f003 fa10 	bl	8004420 <HAL_TIMEx_ConfigBreakDeadTime>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001006:	f7ff fc8f 	bl	8000928 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <MX_TIM15_Init+0x104>)
 800100c:	f000 f9be 	bl	800138c <HAL_TIM_MspPostInit>

}
 8001010:	bf00      	nop
 8001012:	3758      	adds	r7, #88	; 0x58
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000138 	.word	0x20000138
 800101c:	40014000 	.word	0x40014000

08001020 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b092      	sub	sp, #72	; 0x48
 8001024:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	615a      	str	r2, [r3, #20]
 8001038:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	222c      	movs	r2, #44	; 0x2c
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f004 fb6f 	bl	8005724 <memset>

  htim16.Instance = TIM16;
 8001046:	4b31      	ldr	r3, [pc, #196]	; (800110c <MX_TIM16_Init+0xec>)
 8001048:	4a31      	ldr	r2, [pc, #196]	; (8001110 <MX_TIM16_Init+0xf0>)
 800104a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = TIM16_PWM_PRESCALER;
 800104c:	4b2f      	ldr	r3, [pc, #188]	; (800110c <MX_TIM16_Init+0xec>)
 800104e:	2247      	movs	r2, #71	; 0x47
 8001050:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b2e      	ldr	r3, [pc, #184]	; (800110c <MX_TIM16_Init+0xec>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_PWM_PERIOD;
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <MX_TIM16_Init+0xec>)
 800105a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800105e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001060:	4b2a      	ldr	r3, [pc, #168]	; (800110c <MX_TIM16_Init+0xec>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001066:	4b29      	ldr	r3, [pc, #164]	; (800110c <MX_TIM16_Init+0xec>)
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106c:	4b27      	ldr	r3, [pc, #156]	; (800110c <MX_TIM16_Init+0xec>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001072:	4826      	ldr	r0, [pc, #152]	; (800110c <MX_TIM16_Init+0xec>)
 8001074:	f002 f8fc 	bl	8003270 <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800107e:	f7ff fc53 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001082:	4822      	ldr	r0, [pc, #136]	; (800110c <MX_TIM16_Init+0xec>)
 8001084:	f002 f94b 	bl	800331e <HAL_TIM_PWM_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800108e:	f7ff fc4b 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001092:	2360      	movs	r3, #96	; 0x60
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109a:	2300      	movs	r3, #0
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800109e:	2300      	movs	r3, #0
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4815      	ldr	r0, [pc, #84]	; (800110c <MX_TIM16_Init+0xec>)
 80010b8:	f002 fcc8 	bl	8003a4c <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80010c2:	f7ff fc31 	bl	8000928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <MX_TIM16_Init+0xec>)
 80010ee:	f003 f997 	bl	8004420 <HAL_TIMEx_ConfigBreakDeadTime>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80010f8:	f7ff fc16 	bl	8000928 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <MX_TIM16_Init+0xec>)
 80010fe:	f000 f945 	bl	800138c <HAL_TIM_MspPostInit>

}
 8001102:	bf00      	nop
 8001104:	3748      	adds	r7, #72	; 0x48
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200002b4 	.word	0x200002b4
 8001110:	40014400 	.word	0x40014400

08001114 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b092      	sub	sp, #72	; 0x48
 8001118:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800112e:	463b      	mov	r3, r7
 8001130:	222c      	movs	r2, #44	; 0x2c
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f004 faf5 	bl	8005724 <memset>

  htim17.Instance = TIM17;
 800113a:	4b31      	ldr	r3, [pc, #196]	; (8001200 <MX_TIM17_Init+0xec>)
 800113c:	4a31      	ldr	r2, [pc, #196]	; (8001204 <MX_TIM17_Init+0xf0>)
 800113e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = TIM17_PWM_PRESCALER;
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <MX_TIM17_Init+0xec>)
 8001142:	2247      	movs	r2, #71	; 0x47
 8001144:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <MX_TIM17_Init+0xec>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = TIM17_PWM_PERIOD;
 800114c:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <MX_TIM17_Init+0xec>)
 800114e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001152:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <MX_TIM17_Init+0xec>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <MX_TIM17_Init+0xec>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <MX_TIM17_Init+0xec>)
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001166:	4826      	ldr	r0, [pc, #152]	; (8001200 <MX_TIM17_Init+0xec>)
 8001168:	f002 f882 	bl	8003270 <HAL_TIM_Base_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001172:	f7ff fbd9 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001176:	4822      	ldr	r0, [pc, #136]	; (8001200 <MX_TIM17_Init+0xec>)
 8001178:	f002 f8d1 	bl	800331e <HAL_TIM_PWM_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001182:	f7ff fbd1 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001186:	2360      	movs	r3, #96	; 0x60
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118e:	2300      	movs	r3, #0
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001192:	2300      	movs	r3, #0
 8001194:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	4815      	ldr	r0, [pc, #84]	; (8001200 <MX_TIM17_Init+0xec>)
 80011ac:	f002 fc4e 	bl	8003a4c <HAL_TIM_PWM_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80011b6:	f7ff fbb7 	bl	8000928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	4619      	mov	r1, r3
 80011e0:	4807      	ldr	r0, [pc, #28]	; (8001200 <MX_TIM17_Init+0xec>)
 80011e2:	f003 f91d 	bl	8004420 <HAL_TIMEx_ConfigBreakDeadTime>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80011ec:	f7ff fb9c 	bl	8000928 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 80011f0:	4803      	ldr	r0, [pc, #12]	; (8001200 <MX_TIM17_Init+0xec>)
 80011f2:	f000 f8cb 	bl	800138c <HAL_TIM_MspPostInit>

}
 80011f6:	bf00      	nop
 80011f8:	3748      	adds	r7, #72	; 0x48
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000184 	.word	0x20000184
 8001204:	40014800 	.word	0x40014800

08001208 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001228:	d128      	bne.n	800127c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_TIM_Encoder_MspInit+0x7c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a15      	ldr	r2, [pc, #84]	; (8001284 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	6153      	str	r3, [r2, #20]
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 800125a:	2303      	movs	r3, #3
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800126a:	2301      	movs	r3, #1
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f000 fd1a 	bl	8001cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d10c      	bne.n	80012b4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_TIM_PWM_MspInit+0x60>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <HAL_TIM_PWM_MspInit+0x60>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_TIM_PWM_MspInit+0x60>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80012b2:	e010      	b.n	80012d6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM15)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <HAL_TIM_PWM_MspInit+0x64>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d10b      	bne.n	80012d6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_TIM_PWM_MspInit+0x60>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <HAL_TIM_PWM_MspInit+0x60>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6193      	str	r3, [r2, #24]
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <HAL_TIM_PWM_MspInit+0x60>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40000400 	.word	0x40000400
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40014000 	.word	0x40014000

080012f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1f      	ldr	r2, [pc, #124]	; (800137c <HAL_TIM_Base_MspInit+0x8c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d114      	bne.n	800132c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_TIM_Base_MspInit+0x90>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a1e      	ldr	r2, [pc, #120]	; (8001380 <HAL_TIM_Base_MspInit+0x90>)
 8001308:	f043 0310 	orr.w	r3, r3, #16
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <HAL_TIM_Base_MspInit+0x90>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2036      	movs	r0, #54	; 0x36
 8001320:	f000 fb0f 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001324:	2036      	movs	r0, #54	; 0x36
 8001326:	f000 fb28 	bl	800197a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800132a:	e022      	b.n	8001372 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM16)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <HAL_TIM_Base_MspInit+0x94>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d10c      	bne.n	8001350 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_TIM_Base_MspInit+0x90>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	4a11      	ldr	r2, [pc, #68]	; (8001380 <HAL_TIM_Base_MspInit+0x90>)
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	6193      	str	r3, [r2, #24]
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_TIM_Base_MspInit+0x90>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
}
 800134e:	e010      	b.n	8001372 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM17)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <HAL_TIM_Base_MspInit+0x98>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d10b      	bne.n	8001372 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_TIM_Base_MspInit+0x90>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_TIM_Base_MspInit+0x90>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001364:	6193      	str	r3, [r2, #24]
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_TIM_Base_MspInit+0x90>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40001000 	.word	0x40001000
 8001380:	40021000 	.word	0x40021000
 8001384:	40014400 	.word	0x40014400
 8001388:	40014800 	.word	0x40014800

0800138c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a45      	ldr	r2, [pc, #276]	; (80014c0 <HAL_TIM_MspPostInit+0x134>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d11c      	bne.n	80013e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <HAL_TIM_MspPostInit+0x138>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	4a44      	ldr	r2, [pc, #272]	; (80014c4 <HAL_TIM_MspPostInit+0x138>)
 80013b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013b8:	6153      	str	r3, [r2, #20]
 80013ba:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <HAL_TIM_MspPostInit+0x138>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c2:	61bb      	str	r3, [r7, #24]
 80013c4:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 80013c6:	2340      	movs	r3, #64	; 0x40
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013d6:	2302      	movs	r3, #2
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4839      	ldr	r0, [pc, #228]	; (80014c8 <HAL_TIM_MspPostInit+0x13c>)
 80013e2:	f000 fc65 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80013e6:	e067      	b.n	80014b8 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM15)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a37      	ldr	r2, [pc, #220]	; (80014cc <HAL_TIM_MspPostInit+0x140>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d11d      	bne.n	800142e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <HAL_TIM_MspPostInit+0x138>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4a33      	ldr	r2, [pc, #204]	; (80014c4 <HAL_TIM_MspPostInit+0x138>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fc:	6153      	str	r3, [r2, #20]
 80013fe:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <HAL_TIM_MspPostInit+0x138>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 800140a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800141c:	2301      	movs	r3, #1
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	482a      	ldr	r0, [pc, #168]	; (80014d0 <HAL_TIM_MspPostInit+0x144>)
 8001428:	f000 fc42 	bl	8001cb0 <HAL_GPIO_Init>
}
 800142c:	e044      	b.n	80014b8 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM16)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a28      	ldr	r2, [pc, #160]	; (80014d4 <HAL_TIM_MspPostInit+0x148>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d11d      	bne.n	8001474 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_TIM_MspPostInit+0x138>)
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <HAL_TIM_MspPostInit+0x138>)
 800143e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001442:	6153      	str	r3, [r2, #20]
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <HAL_TIM_MspPostInit+0x138>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO3_PWM_Pin;
 8001450:	2340      	movs	r3, #64	; 0x40
 8001452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001460:	2301      	movs	r3, #1
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4619      	mov	r1, r3
 800146a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146e:	f000 fc1f 	bl	8001cb0 <HAL_GPIO_Init>
}
 8001472:	e021      	b.n	80014b8 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM17)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_TIM_MspPostInit+0x14c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d11c      	bne.n	80014b8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_TIM_MspPostInit+0x138>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <HAL_TIM_MspPostInit+0x138>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	6153      	str	r3, [r2, #20]
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_TIM_MspPostInit+0x138>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO4_PWM_Pin;
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80014a6:	2301      	movs	r3, #1
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO4_PWM_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b4:	f000 fbfc 	bl	8001cb0 <HAL_GPIO_Init>
}
 80014b8:	bf00      	nop
 80014ba:	3730      	adds	r7, #48	; 0x30
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40000400 	.word	0x40000400
 80014c4:	40021000 	.word	0x40021000
 80014c8:	48000800 	.word	0x48000800
 80014cc:	40014000 	.word	0x40014000
 80014d0:	48000400 	.word	0x48000400
 80014d4:	40014400 	.word	0x40014400
 80014d8:	40014800 	.word	0x40014800

080014dc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <MX_USART2_UART_Init+0x5c>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014e8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART2_UART_Init+0x58>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART2_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART2_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART2_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART2_UART_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART2_UART_Init+0x58>)
 8001520:	f003 f814 	bl	800454c <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800152a:	f7ff f9fd 	bl	8000928 <Error_Handler>
  }

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200000a8 	.word	0x200000a8
 8001538:	40004400 	.word	0x40004400

0800153c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a2e      	ldr	r2, [pc, #184]	; (8001614 <HAL_UART_MspInit+0xd8>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d156      	bne.n	800160c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <HAL_UART_MspInit+0xdc>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a2d      	ldr	r2, [pc, #180]	; (8001618 <HAL_UART_MspInit+0xdc>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_UART_MspInit+0xdc>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <HAL_UART_MspInit+0xdc>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	4a27      	ldr	r2, [pc, #156]	; (8001618 <HAL_UART_MspInit+0xdc>)
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	6153      	str	r3, [r2, #20]
 8001582:	4b25      	ldr	r3, [pc, #148]	; (8001618 <HAL_UART_MspInit+0xdc>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800158e:	230c      	movs	r3, #12
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159e:	2307      	movs	r3, #7
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ac:	f000 fb80 	bl	8001cb0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_UART_MspInit+0xe0>)
 80015b2:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <HAL_UART_MspInit+0xe4>)
 80015b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_UART_MspInit+0xe0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_UART_MspInit+0xe0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_UART_MspInit+0xe0>)
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_UART_MspInit+0xe0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_UART_MspInit+0xe0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_UART_MspInit+0xe0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_UART_MspInit+0xe0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <HAL_UART_MspInit+0xe0>)
 80015e2:	f000 f9e4 	bl	80019ae <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80015ec:	f7ff f99c 	bl	8000928 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_UART_MspInit+0xe0>)
 80015f4:	671a      	str	r2, [r3, #112]	; 0x70
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <HAL_UART_MspInit+0xe0>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2026      	movs	r0, #38	; 0x26
 8001602:	f000 f99e 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001606:	2026      	movs	r0, #38	; 0x26
 8001608:	f000 f9b7 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40004400 	.word	0x40004400
 8001618:	40021000 	.word	0x40021000
 800161c:	20000300 	.word	0x20000300
 8001620:	4002006c 	.word	0x4002006c

08001624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800165c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <LoopForever+0x6>)
  ldr r1, =_edata
 800162a:	490e      	ldr	r1, [pc, #56]	; (8001664 <LoopForever+0xa>)
  ldr r2, =_sidata
 800162c:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <LoopForever+0xe>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001640:	4c0b      	ldr	r4, [pc, #44]	; (8001670 <LoopForever+0x16>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800164e:	f7ff fb69 	bl	8000d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001652:	f004 f835 	bl	80056c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001656:	f7fe fedd 	bl	8000414 <main>

0800165a <LoopForever>:

LoopForever:
    b LoopForever
 800165a:	e7fe      	b.n	800165a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800165c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001664:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001668:	08006850 	.word	0x08006850
  ldr r2, =_sbss
 800166c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001670:	20000358 	.word	0x20000358

08001674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC1_2_IRQHandler>
	...

08001678 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_Init+0x28>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_Init+0x28>)
 8001682:	f043 0310 	orr.w	r3, r3, #16
 8001686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f94f 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f808 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7ff fa46 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40022000 	.word	0x40022000

080016a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f967 	bl	8001996 <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016e0:	f000 f92f 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000008 	.word	0x20000008
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008
 8001728:	20000344 	.word	0x20000344

0800172c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000344 	.word	0x20000344

08001744 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff ffee 	bl	800172c <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_Delay+0x44>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800176a:	bf00      	nop
 800176c:	f7ff ffde 	bl	800172c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff29 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff3e 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff31 	bl	80017f0 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e037      	b.n	8001a34 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2202      	movs	r2, #2
 80019c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f92a 	bl	8001c70 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}  
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d008      	beq.n	8001a60 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2204      	movs	r2, #4
 8001a52:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e020      	b.n	8001aa2 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 020e 	bic.w	r2, r2, #14
 8001a6e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0201 	bic.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d005      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e027      	b.n	8001b20 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 020e 	bic.w	r2, r2, #14
 8001ade:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0201 	bic.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
    } 
  }
  return status;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	2204      	movs	r2, #4
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d024      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x72>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01f      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d107      	bne.n	8001b7a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0204 	bic.w	r2, r2, #4
 8001b78:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	2104      	movs	r1, #4
 8001b84:	fa01 f202 	lsl.w	r2, r1, r2
 8001b88:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d06a      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001b9a:	e065      	b.n	8001c68 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d02c      	beq.n	8001c06 <HAL_DMA_IRQHandler+0xdc>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d027      	beq.n	8001c06 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10b      	bne.n	8001bdc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020a 	bic.w	r2, r2, #10
 8001bd2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be4:	2102      	movs	r1, #2
 8001be6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bea:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d035      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001c04:	e030      	b.n	8001c68 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d028      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x13e>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d023      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 020e 	bic.w	r2, r2, #14
 8001c2e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
    }
  }
}  
 8001c66:	e7ff      	b.n	8001c68 <HAL_DMA_IRQHandler+0x13e>
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <DMA_CalcBaseAndBitshift+0x34>)
 8001c80:	4413      	add	r3, r2
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <DMA_CalcBaseAndBitshift+0x38>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	009a      	lsls	r2, r3, #2
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a06      	ldr	r2, [pc, #24]	; (8001cac <DMA_CalcBaseAndBitshift+0x3c>)
 8001c94:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	bffdfff8 	.word	0xbffdfff8
 8001ca8:	cccccccd 	.word	0xcccccccd
 8001cac:	40020000 	.word	0x40020000

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e14e      	b.n	8001f5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8140 	beq.w	8001f58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d00b      	beq.n	8001cf8 <HAL_GPIO_Init+0x48>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d007      	beq.n	8001cf8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cec:	2b11      	cmp	r3, #17
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b12      	cmp	r3, #18
 8001cf6:	d130      	bne.n	8001d5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d2e:	2201      	movs	r2, #1
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f003 0201 	and.w	r2, r3, #1
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0xea>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b12      	cmp	r3, #18
 8001d98:	d123      	bne.n	8001de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	08da      	lsrs	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3208      	adds	r2, #8
 8001da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	6939      	ldr	r1, [r7, #16]
 8001dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0203 	and.w	r2, r3, #3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 809a 	beq.w	8001f58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e24:	4b55      	ldr	r3, [pc, #340]	; (8001f7c <HAL_GPIO_Init+0x2cc>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a54      	ldr	r2, [pc, #336]	; (8001f7c <HAL_GPIO_Init+0x2cc>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6193      	str	r3, [r2, #24]
 8001e30:	4b52      	ldr	r3, [pc, #328]	; (8001f7c <HAL_GPIO_Init+0x2cc>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e3c:	4a50      	ldr	r2, [pc, #320]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e66:	d013      	beq.n	8001e90 <HAL_GPIO_Init+0x1e0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a46      	ldr	r2, [pc, #280]	; (8001f84 <HAL_GPIO_Init+0x2d4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00d      	beq.n	8001e8c <HAL_GPIO_Init+0x1dc>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a45      	ldr	r2, [pc, #276]	; (8001f88 <HAL_GPIO_Init+0x2d8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <HAL_GPIO_Init+0x1d8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a44      	ldr	r2, [pc, #272]	; (8001f8c <HAL_GPIO_Init+0x2dc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d101      	bne.n	8001e84 <HAL_GPIO_Init+0x1d4>
 8001e80:	2303      	movs	r3, #3
 8001e82:	e006      	b.n	8001e92 <HAL_GPIO_Init+0x1e2>
 8001e84:	2305      	movs	r3, #5
 8001e86:	e004      	b.n	8001e92 <HAL_GPIO_Init+0x1e2>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e002      	b.n	8001e92 <HAL_GPIO_Init+0x1e2>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_GPIO_Init+0x1e2>
 8001e90:	2300      	movs	r3, #0
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	f002 0203 	and.w	r2, r2, #3
 8001e98:	0092      	lsls	r2, r2, #2
 8001e9a:	4093      	lsls	r3, r2
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ea2:	4937      	ldr	r1, [pc, #220]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb0:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <HAL_GPIO_Init+0x2e0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ed4:	4a2e      	ldr	r2, [pc, #184]	; (8001f90 <HAL_GPIO_Init+0x2e0>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_GPIO_Init+0x2e0>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001efe:	4a24      	ldr	r2, [pc, #144]	; (8001f90 <HAL_GPIO_Init+0x2e0>)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <HAL_GPIO_Init+0x2e0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f28:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <HAL_GPIO_Init+0x2e0>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_GPIO_Init+0x2e0>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f52:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <HAL_GPIO_Init+0x2e0>)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f47f aea9 	bne.w	8001cc0 <HAL_GPIO_Init+0x10>
  }
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	371c      	adds	r7, #28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000
 8001f84:	48000400 	.word	0x48000400
 8001f88:	48000800 	.word	0x48000800
 8001f8c:	48000c00 	.word	0x48000c00
 8001f90:	40010400 	.word	0x40010400

08001f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fb5c 	bl	80006a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40010400 	.word	0x40010400

08001ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	f000 bef4 	b.w	8002df6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 816a 	beq.w	80022f2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800201e:	4bb3      	ldr	r3, [pc, #716]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d00c      	beq.n	8002044 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800202a:	4bb0      	ldr	r3, [pc, #704]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b08      	cmp	r3, #8
 8002034:	d159      	bne.n	80020ea <HAL_RCC_OscConfig+0xf6>
 8002036:	4bad      	ldr	r3, [pc, #692]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002042:	d152      	bne.n	80020ea <HAL_RCC_OscConfig+0xf6>
 8002044:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002048:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002058:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d102      	bne.n	8002076 <HAL_RCC_OscConfig+0x82>
 8002070:	4b9e      	ldr	r3, [pc, #632]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	e015      	b.n	80020a2 <HAL_RCC_OscConfig+0xae>
 8002076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800207a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800208a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800208e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002092:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800209e:	4b93      	ldr	r3, [pc, #588]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020a6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80020aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020ae:	fa92 f2a2 	rbit	r2, r2
 80020b2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80020b6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80020ba:	fab2 f282 	clz	r2, r2
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	f042 0220 	orr.w	r2, r2, #32
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	f002 021f 	and.w	r2, r2, #31
 80020ca:	2101      	movs	r1, #1
 80020cc:	fa01 f202 	lsl.w	r2, r1, r2
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 810c 	beq.w	80022f0 <HAL_RCC_OscConfig+0x2fc>
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 8106 	bne.w	80022f0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	f000 be86 	b.w	8002df6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f4:	d106      	bne.n	8002104 <HAL_RCC_OscConfig+0x110>
 80020f6:	4b7d      	ldr	r3, [pc, #500]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a7c      	ldr	r2, [pc, #496]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e030      	b.n	8002166 <HAL_RCC_OscConfig+0x172>
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x134>
 800210e:	4b77      	ldr	r3, [pc, #476]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a76      	ldr	r2, [pc, #472]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b74      	ldr	r3, [pc, #464]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a73      	ldr	r2, [pc, #460]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01e      	b.n	8002166 <HAL_RCC_OscConfig+0x172>
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002132:	d10c      	bne.n	800214e <HAL_RCC_OscConfig+0x15a>
 8002134:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a6c      	ldr	r2, [pc, #432]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 800213a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a69      	ldr	r2, [pc, #420]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	e00b      	b.n	8002166 <HAL_RCC_OscConfig+0x172>
 800214e:	4b67      	ldr	r3, [pc, #412]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a66      	ldr	r2, [pc, #408]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b64      	ldr	r3, [pc, #400]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a63      	ldr	r2, [pc, #396]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002166:	4b61      	ldr	r3, [pc, #388]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216a:	f023 020f 	bic.w	r2, r3, #15
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	495d      	ldr	r1, [pc, #372]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002176:	4313      	orrs	r3, r2
 8002178:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d059      	beq.n	8002238 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fad2 	bl	800172c <HAL_GetTick>
 8002188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218e:	f7ff facd 	bl	800172c <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d902      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	f000 be29 	b.w	8002df6 <HAL_RCC_OscConfig+0xe02>
 80021a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80021b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d102      	bne.n	80021d6 <HAL_RCC_OscConfig+0x1e2>
 80021d0:	4b46      	ldr	r3, [pc, #280]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	e015      	b.n	8002202 <HAL_RCC_OscConfig+0x20e>
 80021d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021da:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80021ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80021f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002206:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800220a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800220e:	fa92 f2a2 	rbit	r2, r2
 8002212:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002216:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800221a:	fab2 f282 	clz	r2, r2
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	f042 0220 	orr.w	r2, r2, #32
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f002 021f 	and.w	r2, r2, #31
 800222a:	2101      	movs	r1, #1
 800222c:	fa01 f202 	lsl.w	r2, r1, r2
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0ab      	beq.n	800218e <HAL_RCC_OscConfig+0x19a>
 8002236:	e05c      	b.n	80022f2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fa78 	bl	800172c <HAL_GetTick>
 800223c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002242:	f7ff fa73 	bl	800172c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d902      	bls.n	8002258 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	f000 bdcf 	b.w	8002df6 <HAL_RCC_OscConfig+0xe02>
 8002258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800225c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800226c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d102      	bne.n	800228a <HAL_RCC_OscConfig+0x296>
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	e015      	b.n	80022b6 <HAL_RCC_OscConfig+0x2c2>
 800228a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800228e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800229e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <HAL_RCC_OscConfig+0x2f8>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80022be:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80022c2:	fa92 f2a2 	rbit	r2, r2
 80022c6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80022ca:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80022ce:	fab2 f282 	clz	r2, r2
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f042 0220 	orr.w	r2, r2, #32
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f002 021f 	and.w	r2, r2, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1ab      	bne.n	8002242 <HAL_RCC_OscConfig+0x24e>
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_OscConfig+0x2fe>
 80022ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 816f 	beq.w	80025e0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002302:	4bd0      	ldr	r3, [pc, #832]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800230e:	4bcd      	ldr	r3, [pc, #820]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b08      	cmp	r3, #8
 8002318:	d16c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x400>
 800231a:	4bca      	ldr	r3, [pc, #808]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d166      	bne.n	80023f4 <HAL_RCC_OscConfig+0x400>
 8002326:	2302      	movs	r3, #2
 8002328:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002338:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d102      	bne.n	8002356 <HAL_RCC_OscConfig+0x362>
 8002350:	4bbc      	ldr	r3, [pc, #752]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	e013      	b.n	800237e <HAL_RCC_OscConfig+0x38a>
 8002356:	2302      	movs	r3, #2
 8002358:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002368:	2302      	movs	r3, #2
 800236a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800236e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800237a:	4bb2      	ldr	r3, [pc, #712]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	2202      	movs	r2, #2
 8002380:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002384:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002388:	fa92 f2a2 	rbit	r2, r2
 800238c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002390:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002394:	fab2 f282 	clz	r2, r2
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f042 0220 	orr.w	r2, r2, #32
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f002 021f 	and.w	r2, r2, #31
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f202 	lsl.w	r2, r1, r2
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_RCC_OscConfig+0x3cc>
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d002      	beq.n	80023c0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f000 bd1b 	b.w	8002df6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4ba0      	ldr	r3, [pc, #640]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	21f8      	movs	r1, #248	; 0xf8
 80023d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80023d8:	fa91 f1a1 	rbit	r1, r1
 80023dc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80023e0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80023e4:	fab1 f181 	clz	r1, r1
 80023e8:	b2c9      	uxtb	r1, r1
 80023ea:	408b      	lsls	r3, r1
 80023ec:	4995      	ldr	r1, [pc, #596]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f2:	e0f5      	b.n	80025e0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8085 	beq.w	800250a <HAL_RCC_OscConfig+0x516>
 8002400:	2301      	movs	r3, #1
 8002402:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002412:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002420:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	461a      	mov	r2, r3
 8002428:	2301      	movs	r3, #1
 800242a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff f97e 	bl	800172c <HAL_GetTick>
 8002430:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002436:	f7ff f979 	bl	800172c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d902      	bls.n	800244c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	f000 bcd5 	b.w	8002df6 <HAL_RCC_OscConfig+0xe02>
 800244c:	2302      	movs	r3, #2
 800244e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800245e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <HAL_RCC_OscConfig+0x488>
 8002476:	4b73      	ldr	r3, [pc, #460]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	e013      	b.n	80024a4 <HAL_RCC_OscConfig+0x4b0>
 800247c:	2302      	movs	r3, #2
 800247e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800248e:	2302      	movs	r3, #2
 8002490:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002494:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80024a0:	4b68      	ldr	r3, [pc, #416]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	2202      	movs	r2, #2
 80024a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80024aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80024ae:	fa92 f2a2 	rbit	r2, r2
 80024b2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80024b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80024ba:	fab2 f282 	clz	r2, r2
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	f042 0220 	orr.w	r2, r2, #32
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	f002 021f 	and.w	r2, r2, #31
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0af      	beq.n	8002436 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	4b5b      	ldr	r3, [pc, #364]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	21f8      	movs	r1, #248	; 0xf8
 80024e6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80024ee:	fa91 f1a1 	rbit	r1, r1
 80024f2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80024f6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80024fa:	fab1 f181 	clz	r1, r1
 80024fe:	b2c9      	uxtb	r1, r1
 8002500:	408b      	lsls	r3, r1
 8002502:	4950      	ldr	r1, [pc, #320]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
 8002508:	e06a      	b.n	80025e0 <HAL_RCC_OscConfig+0x5ec>
 800250a:	2301      	movs	r3, #1
 800250c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800251c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800252a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	461a      	mov	r2, r3
 8002532:	2300      	movs	r3, #0
 8002534:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7ff f8f9 	bl	800172c <HAL_GetTick>
 800253a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	e00a      	b.n	8002556 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002540:	f7ff f8f4 	bl	800172c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d902      	bls.n	8002556 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	f000 bc50 	b.w	8002df6 <HAL_RCC_OscConfig+0xe02>
 8002556:	2302      	movs	r3, #2
 8002558:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	b2db      	uxtb	r3, r3
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d102      	bne.n	8002586 <HAL_RCC_OscConfig+0x592>
 8002580:	4b30      	ldr	r3, [pc, #192]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	e013      	b.n	80025ae <HAL_RCC_OscConfig+0x5ba>
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002598:	2302      	movs	r3, #2
 800259a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800259e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_RCC_OscConfig+0x650>)
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	2202      	movs	r2, #2
 80025b0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80025b4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80025b8:	fa92 f2a2 	rbit	r2, r2
 80025bc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80025c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80025c4:	fab2 f282 	clz	r2, r2
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f042 0220 	orr.w	r2, r2, #32
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f002 021f 	and.w	r2, r2, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f202 	lsl.w	r2, r1, r2
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1af      	bne.n	8002540 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80da 	beq.w	80027a4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d069      	beq.n	80026ce <HAL_RCC_OscConfig+0x6da>
 80025fa:	2301      	movs	r3, #1
 80025fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800260c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_OscConfig+0x654>)
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	461a      	mov	r2, r3
 8002620:	2301      	movs	r3, #1
 8002622:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002624:	f7ff f882 	bl	800172c <HAL_GetTick>
 8002628:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262c:	e00e      	b.n	800264c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262e:	f7ff f87d 	bl	800172c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d906      	bls.n	800264c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e3d9      	b.n	8002df6 <HAL_RCC_OscConfig+0xe02>
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	10908120 	.word	0x10908120
 800264c:	2302      	movs	r3, #2
 800264e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800265e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002662:	2202      	movs	r2, #2
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f2a3 	rbit	r2, r3
 8002670:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800267a:	2202      	movs	r2, #2
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	fa93 f2a3 	rbit	r2, r3
 8002688:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800268c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	4ba5      	ldr	r3, [pc, #660]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 8002690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002692:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002696:	2102      	movs	r1, #2
 8002698:	6019      	str	r1, [r3, #0]
 800269a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	fa93 f1a3 	rbit	r1, r3
 80026a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026a8:	6019      	str	r1, [r3, #0]
  return result;
 80026aa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0b0      	beq.n	800262e <HAL_RCC_OscConfig+0x63a>
 80026cc:	e06a      	b.n	80027a4 <HAL_RCC_OscConfig+0x7b0>
 80026ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	fa93 f2a3 	rbit	r2, r3
 80026e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026e4:	601a      	str	r2, [r3, #0]
  return result;
 80026e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026ea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b8c      	ldr	r3, [pc, #560]	; (8002928 <HAL_RCC_OscConfig+0x934>)
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	461a      	mov	r2, r3
 80026fc:	2300      	movs	r3, #0
 80026fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002700:	f7ff f814 	bl	800172c <HAL_GetTick>
 8002704:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	e009      	b.n	800271e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270a:	f7ff f80f 	bl	800172c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e36b      	b.n	8002df6 <HAL_RCC_OscConfig+0xe02>
 800271e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002722:	2202      	movs	r2, #2
 8002724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800273a:	2202      	movs	r2, #2
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f2a3 	rbit	r2, r3
 8002748:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002752:	2202      	movs	r2, #2
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002764:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002766:	4b6f      	ldr	r3, [pc, #444]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 8002768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800276a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800276e:	2102      	movs	r1, #2
 8002770:	6019      	str	r1, [r3, #0]
 8002772:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	fa93 f1a3 	rbit	r1, r3
 800277c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002780:	6019      	str	r1, [r3, #0]
  return result;
 8002782:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	2101      	movs	r1, #1
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1b2      	bne.n	800270a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8158 	beq.w	8002a64 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ba:	4b5a      	ldr	r3, [pc, #360]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d112      	bne.n	80027ec <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	4b57      	ldr	r3, [pc, #348]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4a56      	ldr	r2, [pc, #344]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d0:	61d3      	str	r3, [r2, #28]
 80027d2:	4b54      	ldr	r3, [pc, #336]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	f107 0308 	add.w	r3, r7, #8
 80027e4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	4b4f      	ldr	r3, [pc, #316]	; (800292c <HAL_RCC_OscConfig+0x938>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d11a      	bne.n	800282e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f8:	4b4c      	ldr	r3, [pc, #304]	; (800292c <HAL_RCC_OscConfig+0x938>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a4b      	ldr	r2, [pc, #300]	; (800292c <HAL_RCC_OscConfig+0x938>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002804:	f7fe ff92 	bl	800172c <HAL_GetTick>
 8002808:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	e009      	b.n	8002822 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7fe ff8d 	bl	800172c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e2e9      	b.n	8002df6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002822:	4b42      	ldr	r3, [pc, #264]	; (800292c <HAL_RCC_OscConfig+0x938>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0ef      	beq.n	800280e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x852>
 8002838:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4a39      	ldr	r2, [pc, #228]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6213      	str	r3, [r2, #32]
 8002844:	e02f      	b.n	80028a6 <HAL_RCC_OscConfig+0x8b2>
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10c      	bne.n	800286a <HAL_RCC_OscConfig+0x876>
 8002850:	4b34      	ldr	r3, [pc, #208]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4a33      	ldr	r2, [pc, #204]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 8002856:	f023 0301 	bic.w	r3, r3, #1
 800285a:	6213      	str	r3, [r2, #32]
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4a30      	ldr	r2, [pc, #192]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 8002862:	f023 0304 	bic.w	r3, r3, #4
 8002866:	6213      	str	r3, [r2, #32]
 8002868:	e01d      	b.n	80028a6 <HAL_RCC_OscConfig+0x8b2>
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d10c      	bne.n	800288e <HAL_RCC_OscConfig+0x89a>
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 800287a:	f043 0304 	orr.w	r3, r3, #4
 800287e:	6213      	str	r3, [r2, #32]
 8002880:	4b28      	ldr	r3, [pc, #160]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4a27      	ldr	r2, [pc, #156]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6213      	str	r3, [r2, #32]
 800288c:	e00b      	b.n	80028a6 <HAL_RCC_OscConfig+0x8b2>
 800288e:	4b25      	ldr	r3, [pc, #148]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a24      	ldr	r2, [pc, #144]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	6213      	str	r3, [r2, #32]
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a21      	ldr	r2, [pc, #132]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 80028a0:	f023 0304 	bic.w	r3, r3, #4
 80028a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d06b      	beq.n	8002988 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7fe ff3c 	bl	800172c <HAL_GetTick>
 80028b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	e00b      	b.n	80028d2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7fe ff37 	bl	800172c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e291      	b.n	8002df6 <HAL_RCC_OscConfig+0xe02>
 80028d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028d6:	2202      	movs	r2, #2
 80028d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	fa93 f2a3 	rbit	r2, r3
 80028e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028ee:	2202      	movs	r2, #2
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	fa93 f2a3 	rbit	r2, r3
 80028fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002900:	601a      	str	r2, [r3, #0]
  return result;
 8002902:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002906:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f043 0302 	orr.w	r3, r3, #2
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d109      	bne.n	8002930 <HAL_RCC_OscConfig+0x93c>
 800291c:	4b01      	ldr	r3, [pc, #4]	; (8002924 <HAL_RCC_OscConfig+0x930>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	e014      	b.n	800294c <HAL_RCC_OscConfig+0x958>
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	10908120 	.word	0x10908120
 800292c:	40007000 	.word	0x40007000
 8002930:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002934:	2202      	movs	r2, #2
 8002936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	4bbb      	ldr	r3, [pc, #748]	; (8002c38 <HAL_RCC_OscConfig+0xc44>)
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002950:	2102      	movs	r1, #2
 8002952:	6011      	str	r1, [r2, #0]
 8002954:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	fa92 f1a2 	rbit	r1, r2
 800295e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002962:	6011      	str	r1, [r2, #0]
  return result;
 8002964:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	fab2 f282 	clz	r2, r2
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	f002 021f 	and.w	r2, r2, #31
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f202 	lsl.w	r2, r1, r2
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d099      	beq.n	80028ba <HAL_RCC_OscConfig+0x8c6>
 8002986:	e063      	b.n	8002a50 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002988:	f7fe fed0 	bl	800172c <HAL_GetTick>
 800298c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	e00b      	b.n	80029aa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe fecb 	bl	800172c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e225      	b.n	8002df6 <HAL_RCC_OscConfig+0xe02>
 80029aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80029ae:	2202      	movs	r2, #2
 80029b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80029c6:	2202      	movs	r2, #2
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	fa93 f2a3 	rbit	r2, r3
 80029d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029d8:	601a      	str	r2, [r3, #0]
  return result;
 80029da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d102      	bne.n	80029fa <HAL_RCC_OscConfig+0xa06>
 80029f4:	4b90      	ldr	r3, [pc, #576]	; (8002c38 <HAL_RCC_OscConfig+0xc44>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	e00d      	b.n	8002a16 <HAL_RCC_OscConfig+0xa22>
 80029fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029fe:	2202      	movs	r2, #2
 8002a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	fa93 f2a3 	rbit	r2, r3
 8002a0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	4b89      	ldr	r3, [pc, #548]	; (8002c38 <HAL_RCC_OscConfig+0xc44>)
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	6011      	str	r1, [r2, #0]
 8002a1e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	fa92 f1a2 	rbit	r1, r2
 8002a28:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a2c:	6011      	str	r1, [r2, #0]
  return result;
 8002a2e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	fab2 f282 	clz	r2, r2
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	f002 021f 	and.w	r2, r2, #31
 8002a44:	2101      	movs	r1, #1
 8002a46:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1a0      	bne.n	8002992 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a50:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a58:	4b77      	ldr	r3, [pc, #476]	; (8002c38 <HAL_RCC_OscConfig+0xc44>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	4a76      	ldr	r2, [pc, #472]	; (8002c38 <HAL_RCC_OscConfig+0xc44>)
 8002a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a62:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 81c2 	beq.w	8002df4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a70:	4b71      	ldr	r3, [pc, #452]	; (8002c38 <HAL_RCC_OscConfig+0xc44>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	f000 819c 	beq.w	8002db6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	f040 8114 	bne.w	8002cb2 <HAL_RCC_OscConfig+0xcbe>
 8002a8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002aa2:	601a      	str	r2, [r3, #0]
  return result;
 8002aa4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002aa8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ab4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	461a      	mov	r2, r3
 8002abc:	2300      	movs	r3, #0
 8002abe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fe34 	bl	800172c <HAL_GetTick>
 8002ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac8:	e009      	b.n	8002ade <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fe2f 	bl	800172c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e18b      	b.n	8002df6 <HAL_RCC_OscConfig+0xe02>
 8002ade:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	fa93 f2a3 	rbit	r2, r3
 8002af2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002af6:	601a      	str	r2, [r3, #0]
  return result;
 8002af8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002afc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d102      	bne.n	8002b18 <HAL_RCC_OscConfig+0xb24>
 8002b12:	4b49      	ldr	r3, [pc, #292]	; (8002c38 <HAL_RCC_OscConfig+0xc44>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	e01b      	b.n	8002b50 <HAL_RCC_OscConfig+0xb5c>
 8002b18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	fa93 f2a3 	rbit	r2, r3
 8002b2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	fa93 f2a3 	rbit	r2, r3
 8002b46:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	4b3a      	ldr	r3, [pc, #232]	; (8002c38 <HAL_RCC_OscConfig+0xc44>)
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b58:	6011      	str	r1, [r2, #0]
 8002b5a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	fa92 f1a2 	rbit	r1, r2
 8002b64:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002b68:	6011      	str	r1, [r2, #0]
  return result;
 8002b6a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	fab2 f282 	clz	r2, r2
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	f042 0220 	orr.w	r2, r2, #32
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	f002 021f 	and.w	r2, r2, #31
 8002b80:	2101      	movs	r1, #1
 8002b82:	fa01 f202 	lsl.w	r2, r1, r2
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d19e      	bne.n	8002aca <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <HAL_RCC_OscConfig+0xc44>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	4925      	ldr	r1, [pc, #148]	; (8002c38 <HAL_RCC_OscConfig+0xc44>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
 8002ba8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	fa93 f2a3 	rbit	r2, r3
 8002bbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bc0:	601a      	str	r2, [r3, #0]
  return result;
 8002bc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bc6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2301      	movs	r3, #1
 8002bdc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe fda5 	bl	800172c <HAL_GetTick>
 8002be2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be6:	e009      	b.n	8002bfc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe fda0 	bl	800172c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e0fc      	b.n	8002df6 <HAL_RCC_OscConfig+0xe02>
 8002bfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	fa93 f2a3 	rbit	r2, r3
 8002c10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c14:	601a      	str	r2, [r3, #0]
  return result;
 8002c16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c1c:	fab3 f383 	clz	r3, r3
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCC_OscConfig+0xc48>
 8002c30:	4b01      	ldr	r3, [pc, #4]	; (8002c38 <HAL_RCC_OscConfig+0xc44>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	e01e      	b.n	8002c74 <HAL_RCC_OscConfig+0xc80>
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	fa93 f2a3 	rbit	r2, r3
 8002c50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	fa93 f2a3 	rbit	r2, r3
 8002c6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	4b63      	ldr	r3, [pc, #396]	; (8002e00 <HAL_RCC_OscConfig+0xe0c>)
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c7c:	6011      	str	r1, [r2, #0]
 8002c7e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	fa92 f1a2 	rbit	r1, r2
 8002c88:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002c8c:	6011      	str	r1, [r2, #0]
  return result;
 8002c8e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	fab2 f282 	clz	r2, r2
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	f042 0220 	orr.w	r2, r2, #32
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	f002 021f 	and.w	r2, r2, #31
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d09b      	beq.n	8002be8 <HAL_RCC_OscConfig+0xbf4>
 8002cb0:	e0a0      	b.n	8002df4 <HAL_RCC_OscConfig+0xe00>
 8002cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f2a3 	rbit	r2, r3
 8002cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cca:	601a      	str	r2, [r3, #0]
  return result;
 8002ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cd0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fd20 	bl	800172c <HAL_GetTick>
 8002cec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf0:	e009      	b.n	8002d06 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7fe fd1b 	bl	800172c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e077      	b.n	8002df6 <HAL_RCC_OscConfig+0xe02>
 8002d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	fa93 f2a3 	rbit	r2, r3
 8002d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1e:	601a      	str	r2, [r3, #0]
  return result;
 8002d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_OscConfig+0xd4c>
 8002d3a:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_RCC_OscConfig+0xe0c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	e01b      	b.n	8002d78 <HAL_RCC_OscConfig+0xd84>
 8002d40:	f107 0320 	add.w	r3, r7, #32
 8002d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f107 0320 	add.w	r3, r7, #32
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	fa93 f2a3 	rbit	r2, r3
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	f107 0318 	add.w	r3, r7, #24
 8002d5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f107 0318 	add.w	r3, r7, #24
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	fa93 f2a3 	rbit	r2, r3
 8002d6e:	f107 0314 	add.w	r3, r7, #20
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_RCC_OscConfig+0xe0c>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f107 0210 	add.w	r2, r7, #16
 8002d7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d80:	6011      	str	r1, [r2, #0]
 8002d82:	f107 0210 	add.w	r2, r7, #16
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	fa92 f1a2 	rbit	r1, r2
 8002d8c:	f107 020c 	add.w	r2, r7, #12
 8002d90:	6011      	str	r1, [r2, #0]
  return result;
 8002d92:	f107 020c 	add.w	r2, r7, #12
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	fab2 f282 	clz	r2, r2
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	f042 0220 	orr.w	r2, r2, #32
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	f002 021f 	and.w	r2, r2, #31
 8002da8:	2101      	movs	r1, #1
 8002daa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d19e      	bne.n	8002cf2 <HAL_RCC_OscConfig+0xcfe>
 8002db4:	e01e      	b.n	8002df4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e018      	b.n	8002df6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <HAL_RCC_OscConfig+0xe0c>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dcc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d108      	bne.n	8002df0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002dde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002de2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000

08002e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b09e      	sub	sp, #120	; 0x78
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e162      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b90      	ldr	r3, [pc, #576]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d910      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b8d      	ldr	r3, [pc, #564]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	498b      	ldr	r1, [pc, #556]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b89      	ldr	r3, [pc, #548]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e14a      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e58:	4b82      	ldr	r3, [pc, #520]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	497f      	ldr	r1, [pc, #508]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80dc 	beq.w	8003030 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d13c      	bne.n	8002efa <HAL_RCC_ClockConfig+0xf6>
 8002e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xa6>
 8002ea4:	4b6f      	ldr	r3, [pc, #444]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	e00f      	b.n	8002eca <HAL_RCC_ClockConfig+0xc6>
 8002eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	667b      	str	r3, [r7, #100]	; 0x64
 8002eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8002ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ec6:	4b67      	ldr	r3, [pc, #412]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ece:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ed0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ed2:	fa92 f2a2 	rbit	r2, r2
 8002ed6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ed8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002eda:	fab2 f282 	clz	r2, r2
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f042 0220 	orr.w	r2, r2, #32
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f002 021f 	and.w	r2, r2, #31
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d17b      	bne.n	8002fee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0f3      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d13c      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x178>
 8002f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d102      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x128>
 8002f26:	4b4f      	ldr	r3, [pc, #316]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCC_ClockConfig+0x148>
 8002f2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	647b      	str	r3, [r7, #68]	; 0x44
 8002f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f48:	4b46      	ldr	r3, [pc, #280]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f50:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f54:	fa92 f2a2 	rbit	r2, r2
 8002f58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f5c:	fab2 f282 	clz	r2, r2
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	f042 0220 	orr.w	r2, r2, #32
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	f002 021f 	and.w	r2, r2, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d13a      	bne.n	8002fee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b2      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1a0>
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	e00d      	b.n	8002fc0 <HAL_RCC_ClockConfig+0x1bc>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	623b      	str	r3, [r7, #32]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	61ba      	str	r2, [r7, #24]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	fa92 f2a2 	rbit	r2, r2
 8002fca:	617a      	str	r2, [r7, #20]
  return result;
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	fab2 f282 	clz	r2, r2
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f042 0220 	orr.w	r2, r2, #32
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	f002 021f 	and.w	r2, r2, #31
 8002fde:	2101      	movs	r1, #1
 8002fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e079      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	491a      	ldr	r1, [pc, #104]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003000:	f7fe fb94 	bl	800172c <HAL_GetTick>
 8003004:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7fe fb90 	bl	800172c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e061      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d214      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 0207 	bic.w	r2, r3, #7
 8003046:	4906      	ldr	r1, [pc, #24]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e040      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
 8003060:	40022000 	.word	0x40022000
 8003064:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	491a      	ldr	r1, [pc, #104]	; (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003092:	4b16      	ldr	r3, [pc, #88]	; (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4912      	ldr	r1, [pc, #72]	; (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030a6:	f000 f829 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030aa:	4601      	mov	r1, r0
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b4:	22f0      	movs	r2, #240	; 0xf0
 80030b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	fa92 f2a2 	rbit	r2, r2
 80030be:	60fa      	str	r2, [r7, #12]
  return result;
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	fab2 f282 	clz	r2, r2
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	40d3      	lsrs	r3, r2
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x2ec>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	fa21 f303 	lsr.w	r3, r1, r3
 80030d2:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <HAL_RCC_ClockConfig+0x2f0>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_RCC_ClockConfig+0x2f4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe fae2 	bl	80016a4 <HAL_InitTick>
  
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3778      	adds	r7, #120	; 0x78
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08006778 	.word	0x08006778
 80030f4:	20000000 	.word	0x20000000
 80030f8:	20000004 	.word	0x20000004

080030fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b08b      	sub	sp, #44	; 0x2c
 8003100:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	2300      	movs	r3, #0
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b04      	cmp	r3, #4
 8003124:	d002      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x30>
 8003126:	2b08      	cmp	r3, #8
 8003128:	d003      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0x36>
 800312a:	e03c      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800312c:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800312e:	623b      	str	r3, [r7, #32]
      break;
 8003130:	e03c      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003138:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800313c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	fa92 f2a2 	rbit	r2, r2
 8003144:	607a      	str	r2, [r7, #4]
  return result;
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	fab2 f282 	clz	r2, r2
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	40d3      	lsrs	r3, r2
 8003150:	4a1c      	ldr	r2, [pc, #112]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003152:	5cd3      	ldrb	r3, [r2, r3]
 8003154:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003156:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	220f      	movs	r2, #15
 8003160:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	fa92 f2a2 	rbit	r2, r2
 8003168:	60fa      	str	r2, [r7, #12]
  return result;
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	40d3      	lsrs	r3, r2
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003184:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	fbb2 f2f3 	udiv	r2, r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	e004      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	623b      	str	r3, [r7, #32]
      break;
 80031a4:	e002      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031a8:	623b      	str	r3, [r7, #32]
      break;
 80031aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ac:	6a3b      	ldr	r3, [r7, #32]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	372c      	adds	r7, #44	; 0x2c
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	007a1200 	.word	0x007a1200
 80031c4:	08006790 	.word	0x08006790
 80031c8:	080067a0 	.word	0x080067a0
 80031cc:	003d0900 	.word	0x003d0900

080031d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000000 	.word	0x20000000

080031e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031ee:	f7ff ffef 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 80031f2:	4601      	mov	r1, r0
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003200:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	fa92 f2a2 	rbit	r2, r2
 8003208:	603a      	str	r2, [r7, #0]
  return result;
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	fab2 f282 	clz	r2, r2
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	40d3      	lsrs	r3, r2
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	08006788 	.word	0x08006788

0800322c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003232:	f7ff ffcd 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 8003236:	4601      	mov	r1, r0
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003240:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003244:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	fa92 f2a2 	rbit	r2, r2
 800324c:	603a      	str	r2, [r7, #0]
  return result;
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	fab2 f282 	clz	r2, r2
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	40d3      	lsrs	r3, r2
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_RCC_GetPCLK2Freq+0x40>)
 800325a:	5cd3      	ldrb	r3, [r2, r3]
 800325c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000
 800326c:	08006788 	.word	0x08006788

08003270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e049      	b.n	8003316 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe f82a 	bl	80012f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3304      	adds	r3, #4
 80032ac:	4619      	mov	r1, r3
 80032ae:	4610      	mov	r0, r2
 80032b0:	f000 fd04 	bl	8003cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e049      	b.n	80033c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7fd ff9f 	bl	8001288 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f000 fcad 	bl	8003cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_TIM_PWM_Start+0x24>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	bf14      	ite	ne
 80033e8:	2301      	movne	r3, #1
 80033ea:	2300      	moveq	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e03c      	b.n	800346a <HAL_TIM_PWM_Start+0x9e>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d109      	bne.n	800340a <HAL_TIM_PWM_Start+0x3e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	bf14      	ite	ne
 8003402:	2301      	movne	r3, #1
 8003404:	2300      	moveq	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	e02f      	b.n	800346a <HAL_TIM_PWM_Start+0x9e>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b08      	cmp	r3, #8
 800340e:	d109      	bne.n	8003424 <HAL_TIM_PWM_Start+0x58>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	bf14      	ite	ne
 800341c:	2301      	movne	r3, #1
 800341e:	2300      	moveq	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e022      	b.n	800346a <HAL_TIM_PWM_Start+0x9e>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d109      	bne.n	800343e <HAL_TIM_PWM_Start+0x72>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	bf14      	ite	ne
 8003436:	2301      	movne	r3, #1
 8003438:	2300      	moveq	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	e015      	b.n	800346a <HAL_TIM_PWM_Start+0x9e>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b10      	cmp	r3, #16
 8003442:	d109      	bne.n	8003458 <HAL_TIM_PWM_Start+0x8c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e008      	b.n	800346a <HAL_TIM_PWM_Start+0x9e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e088      	b.n	8003584 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d104      	bne.n	8003482 <HAL_TIM_PWM_Start+0xb6>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003480:	e023      	b.n	80034ca <HAL_TIM_PWM_Start+0xfe>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d104      	bne.n	8003492 <HAL_TIM_PWM_Start+0xc6>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003490:	e01b      	b.n	80034ca <HAL_TIM_PWM_Start+0xfe>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d104      	bne.n	80034a2 <HAL_TIM_PWM_Start+0xd6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a0:	e013      	b.n	80034ca <HAL_TIM_PWM_Start+0xfe>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_PWM_Start+0xe6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034b0:	e00b      	b.n	80034ca <HAL_TIM_PWM_Start+0xfe>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d104      	bne.n	80034c2 <HAL_TIM_PWM_Start+0xf6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c0:	e003      	b.n	80034ca <HAL_TIM_PWM_Start+0xfe>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2201      	movs	r2, #1
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 ff10 	bl	80042f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a2b      	ldr	r2, [pc, #172]	; (800358c <HAL_TIM_PWM_Start+0x1c0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <HAL_TIM_PWM_Start+0x134>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2a      	ldr	r2, [pc, #168]	; (8003590 <HAL_TIM_PWM_Start+0x1c4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d009      	beq.n	8003500 <HAL_TIM_PWM_Start+0x134>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a28      	ldr	r2, [pc, #160]	; (8003594 <HAL_TIM_PWM_Start+0x1c8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIM_PWM_Start+0x134>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a27      	ldr	r2, [pc, #156]	; (8003598 <HAL_TIM_PWM_Start+0x1cc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d101      	bne.n	8003504 <HAL_TIM_PWM_Start+0x138>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <HAL_TIM_PWM_Start+0x13a>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_TIM_PWM_Start+0x1c0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_TIM_PWM_Start+0x176>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d009      	beq.n	8003542 <HAL_TIM_PWM_Start+0x176>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1a      	ldr	r2, [pc, #104]	; (800359c <HAL_TIM_PWM_Start+0x1d0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_TIM_PWM_Start+0x176>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <HAL_TIM_PWM_Start+0x1c4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d115      	bne.n	800356e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <HAL_TIM_PWM_Start+0x1d4>)
 800354a:	4013      	ands	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b06      	cmp	r3, #6
 8003552:	d015      	beq.n	8003580 <HAL_TIM_PWM_Start+0x1b4>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355a:	d011      	beq.n	8003580 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	e008      	b.n	8003580 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e000      	b.n	8003582 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003580:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40014000 	.word	0x40014000
 8003594:	40014400 	.word	0x40014400
 8003598:	40014800 	.word	0x40014800
 800359c:	40000400 	.word	0x40000400
 80035a0:	00010007 	.word	0x00010007

080035a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e097      	b.n	80036e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d106      	bne.n	80035d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7fd fe1b 	bl	8001208 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80035e8:	f023 0307 	bic.w	r3, r3, #7
 80035ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f000 fb5f 	bl	8003cbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003626:	f023 0303 	bic.w	r3, r3, #3
 800362a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	4313      	orrs	r3, r2
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003644:	f023 030c 	bic.w	r3, r3, #12
 8003648:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003654:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	4313      	orrs	r3, r2
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	011a      	lsls	r2, r3, #4
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	031b      	lsls	r3, r3, #12
 8003674:	4313      	orrs	r3, r2
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003682:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800368a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	4313      	orrs	r3, r2
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003700:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003708:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003710:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003718:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d110      	bne.n	8003742 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d102      	bne.n	800372c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003726:	7b7b      	ldrb	r3, [r7, #13]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d001      	beq.n	8003730 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e069      	b.n	8003804 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003740:	e031      	b.n	80037a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d110      	bne.n	800376a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003748:	7bbb      	ldrb	r3, [r7, #14]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d102      	bne.n	8003754 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800374e:	7b3b      	ldrb	r3, [r7, #12]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d001      	beq.n	8003758 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e055      	b.n	8003804 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003768:	e01d      	b.n	80037a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d108      	bne.n	8003782 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003770:	7bbb      	ldrb	r3, [r7, #14]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003776:	7b7b      	ldrb	r3, [r7, #13]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d102      	bne.n	8003782 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800377c:	7b3b      	ldrb	r3, [r7, #12]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d001      	beq.n	8003786 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e03e      	b.n	8003804 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_TIM_Encoder_Start+0xc4>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d008      	beq.n	80037c4 <HAL_TIM_Encoder_Start+0xd4>
 80037b2:	e00f      	b.n	80037d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2201      	movs	r2, #1
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fd9b 	bl	80042f8 <TIM_CCxChannelCmd>
      break;
 80037c2:	e016      	b.n	80037f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2201      	movs	r2, #1
 80037ca:	2104      	movs	r1, #4
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fd93 	bl	80042f8 <TIM_CCxChannelCmd>
      break;
 80037d2:	e00e      	b.n	80037f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2201      	movs	r2, #1
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fd8b 	bl	80042f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2201      	movs	r2, #1
 80037e8:	2104      	movs	r1, #4
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fd84 	bl	80042f8 <TIM_CCxChannelCmd>
      break;
 80037f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0201 	orr.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d122      	bne.n	8003868 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d11b      	bne.n	8003868 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0202 	mvn.w	r2, #2
 8003838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fa16 	bl	8003c80 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa08 	bl	8003c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fa19 	bl	8003c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b04      	cmp	r3, #4
 8003874:	d122      	bne.n	80038bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d11b      	bne.n	80038bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0204 	mvn.w	r2, #4
 800388c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f9ec 	bl	8003c80 <HAL_TIM_IC_CaptureCallback>
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f9de 	bl	8003c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f9ef 	bl	8003c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d122      	bne.n	8003910 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d11b      	bne.n	8003910 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0208 	mvn.w	r2, #8
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2204      	movs	r2, #4
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f9c2 	bl	8003c80 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f9b4 	bl	8003c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f9c5 	bl	8003c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	2b10      	cmp	r3, #16
 800391c:	d122      	bne.n	8003964 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b10      	cmp	r3, #16
 800392a:	d11b      	bne.n	8003964 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0210 	mvn.w	r2, #16
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2208      	movs	r2, #8
 800393a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f998 	bl	8003c80 <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f98a 	bl	8003c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f99b 	bl	8003c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d10e      	bne.n	8003990 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d107      	bne.n	8003990 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0201 	mvn.w	r2, #1
 8003988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fc ffa8 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b80      	cmp	r3, #128	; 0x80
 800399c:	d10e      	bne.n	80039bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d107      	bne.n	80039bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fdb4 	bl	8004524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ca:	d10e      	bne.n	80039ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b80      	cmp	r3, #128	; 0x80
 80039d8:	d107      	bne.n	80039ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fda7 	bl	8004538 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d10e      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d107      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f949 	bl	8003ca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d10e      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d107      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0220 	mvn.w	r2, #32
 8003a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fd67 	bl	8004510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e0fd      	b.n	8003c62 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b14      	cmp	r3, #20
 8003a72:	f200 80f0 	bhi.w	8003c56 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003a76:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003ad1 	.word	0x08003ad1
 8003a80:	08003c57 	.word	0x08003c57
 8003a84:	08003c57 	.word	0x08003c57
 8003a88:	08003c57 	.word	0x08003c57
 8003a8c:	08003b11 	.word	0x08003b11
 8003a90:	08003c57 	.word	0x08003c57
 8003a94:	08003c57 	.word	0x08003c57
 8003a98:	08003c57 	.word	0x08003c57
 8003a9c:	08003b53 	.word	0x08003b53
 8003aa0:	08003c57 	.word	0x08003c57
 8003aa4:	08003c57 	.word	0x08003c57
 8003aa8:	08003c57 	.word	0x08003c57
 8003aac:	08003b93 	.word	0x08003b93
 8003ab0:	08003c57 	.word	0x08003c57
 8003ab4:	08003c57 	.word	0x08003c57
 8003ab8:	08003c57 	.word	0x08003c57
 8003abc:	08003bd5 	.word	0x08003bd5
 8003ac0:	08003c57 	.word	0x08003c57
 8003ac4:	08003c57 	.word	0x08003c57
 8003ac8:	08003c57 	.word	0x08003c57
 8003acc:	08003c15 	.word	0x08003c15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f968 	bl	8003dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0208 	orr.w	r2, r2, #8
 8003aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0204 	bic.w	r2, r2, #4
 8003afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6999      	ldr	r1, [r3, #24]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	619a      	str	r2, [r3, #24]
      break;
 8003b0e:	e0a3      	b.n	8003c58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f9ce 	bl	8003eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6999      	ldr	r1, [r3, #24]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	021a      	lsls	r2, r3, #8
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	619a      	str	r2, [r3, #24]
      break;
 8003b50:	e082      	b.n	8003c58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fa2d 	bl	8003fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0208 	orr.w	r2, r2, #8
 8003b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0204 	bic.w	r2, r2, #4
 8003b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69d9      	ldr	r1, [r3, #28]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	61da      	str	r2, [r3, #28]
      break;
 8003b90:	e062      	b.n	8003c58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fa8b 	bl	80040b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69d9      	ldr	r1, [r3, #28]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	021a      	lsls	r2, r3, #8
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	61da      	str	r2, [r3, #28]
      break;
 8003bd2:	e041      	b.n	8003c58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 face 	bl	800417c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0208 	orr.w	r2, r2, #8
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0204 	bic.w	r2, r2, #4
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c12:	e021      	b.n	8003c58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fb0c 	bl	8004238 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	021a      	lsls	r2, r3, #8
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c54:	e000      	b.n	8003c58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003c56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop

08003c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a32      	ldr	r2, [pc, #200]	; (8003d98 <TIM_Base_SetConfig+0xdc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d007      	beq.n	8003ce4 <TIM_Base_SetConfig+0x28>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cda:	d003      	beq.n	8003ce4 <TIM_Base_SetConfig+0x28>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <TIM_Base_SetConfig+0xe0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d108      	bne.n	8003cf6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a27      	ldr	r2, [pc, #156]	; (8003d98 <TIM_Base_SetConfig+0xdc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <TIM_Base_SetConfig+0x6a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d04:	d00f      	beq.n	8003d26 <TIM_Base_SetConfig+0x6a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a24      	ldr	r2, [pc, #144]	; (8003d9c <TIM_Base_SetConfig+0xe0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <TIM_Base_SetConfig+0x6a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a23      	ldr	r2, [pc, #140]	; (8003da0 <TIM_Base_SetConfig+0xe4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d007      	beq.n	8003d26 <TIM_Base_SetConfig+0x6a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <TIM_Base_SetConfig+0xe8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_Base_SetConfig+0x6a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a21      	ldr	r2, [pc, #132]	; (8003da8 <TIM_Base_SetConfig+0xec>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d108      	bne.n	8003d38 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <TIM_Base_SetConfig+0xdc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <TIM_Base_SetConfig+0xc0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a0e      	ldr	r2, [pc, #56]	; (8003da0 <TIM_Base_SetConfig+0xe4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d007      	beq.n	8003d7c <TIM_Base_SetConfig+0xc0>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <TIM_Base_SetConfig+0xe8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_Base_SetConfig+0xc0>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a0c      	ldr	r2, [pc, #48]	; (8003da8 <TIM_Base_SetConfig+0xec>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d103      	bne.n	8003d84 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	615a      	str	r2, [r3, #20]
}
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40000400 	.word	0x40000400
 8003da0:	40014000 	.word	0x40014000
 8003da4:	40014400 	.word	0x40014400
 8003da8:	40014800 	.word	0x40014800

08003dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f023 0302 	bic.w	r3, r3, #2
 8003df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a28      	ldr	r2, [pc, #160]	; (8003ea8 <TIM_OC1_SetConfig+0xfc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <TIM_OC1_SetConfig+0x78>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a27      	ldr	r2, [pc, #156]	; (8003eac <TIM_OC1_SetConfig+0x100>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <TIM_OC1_SetConfig+0x78>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a26      	ldr	r2, [pc, #152]	; (8003eb0 <TIM_OC1_SetConfig+0x104>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_OC1_SetConfig+0x78>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a25      	ldr	r2, [pc, #148]	; (8003eb4 <TIM_OC1_SetConfig+0x108>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10c      	bne.n	8003e3e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f023 0308 	bic.w	r3, r3, #8
 8003e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <TIM_OC1_SetConfig+0xfc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00b      	beq.n	8003e5e <TIM_OC1_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a18      	ldr	r2, [pc, #96]	; (8003eac <TIM_OC1_SetConfig+0x100>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <TIM_OC1_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <TIM_OC1_SetConfig+0x104>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_OC1_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a16      	ldr	r2, [pc, #88]	; (8003eb4 <TIM_OC1_SetConfig+0x108>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d111      	bne.n	8003e82 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	621a      	str	r2, [r3, #32]
}
 8003e9c:	bf00      	nop
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40014400 	.word	0x40014400
 8003eb4:	40014800 	.word	0x40014800

08003eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f023 0210 	bic.w	r2, r3, #16
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0320 	bic.w	r3, r3, #32
 8003f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <TIM_OC2_SetConfig+0xf0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d10d      	bne.n	8003f38 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <TIM_OC2_SetConfig+0xf0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_OC2_SetConfig+0xa0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a1a      	ldr	r2, [pc, #104]	; (8003fac <TIM_OC2_SetConfig+0xf4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_OC2_SetConfig+0xa0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <TIM_OC2_SetConfig+0xf8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_OC2_SetConfig+0xa0>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <TIM_OC2_SetConfig+0xfc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d113      	bne.n	8003f80 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f5e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f66:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800

08003fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a23      	ldr	r2, [pc, #140]	; (80040a4 <TIM_OC3_SetConfig+0xec>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10d      	bne.n	8004036 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004034:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a1a      	ldr	r2, [pc, #104]	; (80040a4 <TIM_OC3_SetConfig+0xec>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00b      	beq.n	8004056 <TIM_OC3_SetConfig+0x9e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <TIM_OC3_SetConfig+0xf0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <TIM_OC3_SetConfig+0x9e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <TIM_OC3_SetConfig+0xf4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_OC3_SetConfig+0x9e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <TIM_OC3_SetConfig+0xf8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d113      	bne.n	800407e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800405c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40014000 	.word	0x40014000
 80040ac:	40014400 	.word	0x40014400
 80040b0:	40014800 	.word	0x40014800

080040b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	031b      	lsls	r3, r3, #12
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a16      	ldr	r2, [pc, #88]	; (800416c <TIM_OC4_SetConfig+0xb8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00b      	beq.n	8004130 <TIM_OC4_SetConfig+0x7c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a15      	ldr	r2, [pc, #84]	; (8004170 <TIM_OC4_SetConfig+0xbc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d007      	beq.n	8004130 <TIM_OC4_SetConfig+0x7c>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a14      	ldr	r2, [pc, #80]	; (8004174 <TIM_OC4_SetConfig+0xc0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_OC4_SetConfig+0x7c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a13      	ldr	r2, [pc, #76]	; (8004178 <TIM_OC4_SetConfig+0xc4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d109      	bne.n	8004144 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	019b      	lsls	r3, r3, #6
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40014000 	.word	0x40014000
 8004174:	40014400 	.word	0x40014400
 8004178:	40014800 	.word	0x40014800

0800417c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	041b      	lsls	r3, r3, #16
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a15      	ldr	r2, [pc, #84]	; (8004228 <TIM_OC5_SetConfig+0xac>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00b      	beq.n	80041ee <TIM_OC5_SetConfig+0x72>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a14      	ldr	r2, [pc, #80]	; (800422c <TIM_OC5_SetConfig+0xb0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <TIM_OC5_SetConfig+0x72>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a13      	ldr	r2, [pc, #76]	; (8004230 <TIM_OC5_SetConfig+0xb4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_OC5_SetConfig+0x72>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a12      	ldr	r2, [pc, #72]	; (8004234 <TIM_OC5_SetConfig+0xb8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d109      	bne.n	8004202 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	621a      	str	r2, [r3, #32]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	40012c00 	.word	0x40012c00
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800

08004238 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800427e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	051b      	lsls	r3, r3, #20
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <TIM_OC6_SetConfig+0xb0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00b      	beq.n	80042ac <TIM_OC6_SetConfig+0x74>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a15      	ldr	r2, [pc, #84]	; (80042ec <TIM_OC6_SetConfig+0xb4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <TIM_OC6_SetConfig+0x74>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <TIM_OC6_SetConfig+0xb8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_OC6_SetConfig+0x74>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <TIM_OC6_SetConfig+0xbc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d109      	bne.n	80042c0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	029b      	lsls	r3, r3, #10
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40014400 	.word	0x40014400
 80042f4:	40014800 	.word	0x40014800

080042f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2201      	movs	r2, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1a      	ldr	r2, [r3, #32]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	43db      	mvns	r3, r3
 800431a:	401a      	ands	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004358:	2302      	movs	r3, #2
 800435a:	e054      	b.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a24      	ldr	r2, [pc, #144]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d108      	bne.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800438c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a17      	ldr	r2, [pc, #92]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00e      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c4:	d009      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a13      	ldr	r2, [pc, #76]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a11      	ldr	r2, [pc, #68]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d10c      	bne.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40000400 	.word	0x40000400
 800441c:	40014000 	.word	0x40014000

08004420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004438:	2302      	movs	r3, #2
 800443a:	e060      	b.n	80044fe <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	041b      	lsls	r3, r3, #16
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a14      	ldr	r2, [pc, #80]	; (800450c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d115      	bne.n	80044ec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	051b      	lsls	r3, r3, #20
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40012c00 	.word	0x40012c00

08004510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e040      	b.n	80045e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc ffe4 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	; 0x24
 8004578:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fbb8 	bl	8004d00 <UART_SetConfig>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e022      	b.n	80045e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fce2 	bl	8004f6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fd69 	bl	80050b0 <UART_CheckIdleState>
 80045de:	4603      	mov	r3, r0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	f040 80bf 	bne.w	8004780 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_UART_Receive+0x26>
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e0b7      	b.n	8004782 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_UART_Receive+0x38>
 800461c:	2302      	movs	r3, #2
 800461e:	e0b0      	b.n	8004782 <HAL_UART_Receive+0x19a>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2222      	movs	r2, #34	; 0x22
 8004634:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800463c:	f7fd f876 	bl	800172c <HAL_GetTick>
 8004640:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	88fa      	ldrh	r2, [r7, #6]
 8004646:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	88fa      	ldrh	r2, [r7, #6]
 800464e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	d10e      	bne.n	800467a <HAL_UART_Receive+0x92>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <HAL_UART_Receive+0x88>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f240 12ff 	movw	r2, #511	; 0x1ff
 800466a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800466e:	e02d      	b.n	80046cc <HAL_UART_Receive+0xe4>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	22ff      	movs	r2, #255	; 0xff
 8004674:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004678:	e028      	b.n	80046cc <HAL_UART_Receive+0xe4>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <HAL_UART_Receive+0xb6>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <HAL_UART_Receive+0xac>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	22ff      	movs	r2, #255	; 0xff
 800468e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004692:	e01b      	b.n	80046cc <HAL_UART_Receive+0xe4>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	227f      	movs	r2, #127	; 0x7f
 8004698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800469c:	e016      	b.n	80046cc <HAL_UART_Receive+0xe4>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046a6:	d10d      	bne.n	80046c4 <HAL_UART_Receive+0xdc>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <HAL_UART_Receive+0xd2>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	227f      	movs	r2, #127	; 0x7f
 80046b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b8:	e008      	b.n	80046cc <HAL_UART_Receive+0xe4>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	223f      	movs	r2, #63	; 0x3f
 80046be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046c2:	e003      	b.n	80046cc <HAL_UART_Receive+0xe4>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d108      	bne.n	80046f0 <HAL_UART_Receive+0x108>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d104      	bne.n	80046f0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e003      	b.n	80046f8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004700:	e033      	b.n	800476a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2200      	movs	r2, #0
 800470a:	2120      	movs	r1, #32
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fd18 	bl	8005142 <UART_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e032      	b.n	8004782 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10c      	bne.n	800473c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004728:	b29a      	uxth	r2, r3
 800472a:	8a7b      	ldrh	r3, [r7, #18]
 800472c:	4013      	ands	r3, r2
 800472e:	b29a      	uxth	r2, r3
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	3302      	adds	r3, #2
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e00d      	b.n	8004758 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004742:	b29b      	uxth	r3, r3
 8004744:	b2da      	uxtb	r2, r3
 8004746:	8a7b      	ldrh	r3, [r7, #18]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	4013      	ands	r3, r2
 800474c:	b2da      	uxtb	r2, r3
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3301      	adds	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1c5      	bne.n	8004702 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	e000      	b.n	8004782 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004780:	2302      	movs	r3, #2
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d145      	bne.n	800482e <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_UART_Transmit_IT+0x22>
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e03e      	b.n	8004830 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Transmit_IT+0x34>
 80047bc:	2302      	movs	r3, #2
 80047be:	e037      	b.n	8004830 <HAL_UART_Transmit_IT+0xa4>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	88fa      	ldrh	r2, [r7, #6]
 80047d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	88fa      	ldrh	r2, [r7, #6]
 80047da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2221      	movs	r2, #33	; 0x21
 80047f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fa:	d107      	bne.n	800480c <HAL_UART_Transmit_IT+0x80>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d103      	bne.n	800480c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4a0d      	ldr	r2, [pc, #52]	; (800483c <HAL_UART_Transmit_IT+0xb0>)
 8004808:	669a      	str	r2, [r3, #104]	; 0x68
 800480a:	e002      	b.n	8004812 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4a0c      	ldr	r2, [pc, #48]	; (8004840 <HAL_UART_Transmit_IT+0xb4>)
 8004810:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004828:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	e000      	b.n	8004830 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800482e:	2302      	movs	r3, #2
  }
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	0800544b 	.word	0x0800544b
 8004840:	080053d7 	.word	0x080053d7

08004844 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004856:	2b20      	cmp	r3, #32
 8004858:	d12c      	bne.n	80048b4 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_UART_Receive_IT+0x22>
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e025      	b.n	80048b6 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_UART_Receive_IT+0x34>
 8004874:	2302      	movs	r3, #2
 8004876:	e01e      	b.n	80048b6 <HAL_UART_Receive_IT+0x72>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80048a2:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	461a      	mov	r2, r3
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fcc6 	bl	800523c <UART_Start_Receive_IT>
 80048b0:	4603      	mov	r3, r0
 80048b2:	e000      	b.n	80048b6 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80048b4:	2302      	movs	r3, #2
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80048e6:	4013      	ands	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d113      	bne.n	8004918 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00e      	beq.n	8004918 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d009      	beq.n	8004918 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 81cc 	beq.w	8004ca6 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	4798      	blx	r3
      }
      return;
 8004916:	e1c6      	b.n	8004ca6 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80e3 	beq.w	8004ae6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d105      	bne.n	8004936 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4ba5      	ldr	r3, [pc, #660]	; (8004bc4 <HAL_UART_IRQHandler+0x304>)
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80d8 	beq.w	8004ae6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <HAL_UART_IRQHandler+0xa2>
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00b      	beq.n	8004962 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2201      	movs	r2, #1
 8004950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004958:	f043 0201 	orr.w	r2, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d010      	beq.n	800498e <HAL_UART_IRQHandler+0xce>
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00b      	beq.n	800498e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2202      	movs	r2, #2
 800497c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004984:	f043 0204 	orr.w	r2, r3, #4
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d010      	beq.n	80049ba <HAL_UART_IRQHandler+0xfa>
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2204      	movs	r2, #4
 80049a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049b0:	f043 0202 	orr.w	r2, r3, #2
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d015      	beq.n	80049f0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d104      	bne.n	80049d8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00b      	beq.n	80049f0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2208      	movs	r2, #8
 80049de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049e6:	f043 0208 	orr.w	r2, r3, #8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d011      	beq.n	8004a1e <HAL_UART_IRQHandler+0x15e>
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00c      	beq.n	8004a1e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8140 	beq.w	8004caa <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00c      	beq.n	8004a4e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a54:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d004      	beq.n	8004a6e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d031      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fc6c 	bl	800534c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d123      	bne.n	8004aca <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a90:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d013      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4a4a      	ldr	r2, [pc, #296]	; (8004bc8 <HAL_UART_IRQHandler+0x308>)
 8004aa0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fd f801 	bl	8001aae <HAL_DMA_Abort_IT>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d017      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004abc:	4610      	mov	r0, r2
 8004abe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac0:	e00f      	b.n	8004ae2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f906 	bl	8004cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac8:	e00b      	b.n	8004ae2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f902 	bl	8004cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad0:	e007      	b.n	8004ae2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f8fe 	bl	8004cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004ae0:	e0e3      	b.n	8004caa <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae2:	bf00      	nop
    return;
 8004ae4:	e0e1      	b.n	8004caa <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	f040 80a7 	bne.w	8004c3e <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 80a1 	beq.w	8004c3e <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 809b 	beq.w	8004c3e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b40      	cmp	r3, #64	; 0x40
 8004b1c:	d156      	bne.n	8004bcc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004b28:	893b      	ldrh	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80bf 	beq.w	8004cae <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b36:	893a      	ldrh	r2, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	f080 80b8 	bcs.w	8004cae <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	893a      	ldrh	r2, [r7, #8]
 8004b42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d02a      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b5e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0210 	bic.w	r2, r2, #16
 8004b9a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fc ff4b 	bl	8001a3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	4619      	mov	r1, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f894 	bl	8004ce8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004bc0:	e075      	b.n	8004cae <HAL_UART_IRQHandler+0x3ee>
 8004bc2:	bf00      	nop
 8004bc4:	04000120 	.word	0x04000120
 8004bc8:	080053ab 	.word	0x080053ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d063      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8004bea:	897b      	ldrh	r3, [r7, #10]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d060      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bfe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0210 	bic.w	r2, r2, #16
 8004c30:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c32:	897b      	ldrh	r3, [r7, #10]
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f856 	bl	8004ce8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004c3c:	e039      	b.n	8004cb2 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00d      	beq.n	8004c64 <HAL_UART_IRQHandler+0x3a4>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fd1f 	bl	80056a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c62:	e029      	b.n	8004cb8 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00d      	beq.n	8004c8a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01a      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
    }
    return;
 8004c88:	e015      	b.n	8004cb6 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d011      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x3f8>
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fc11 	bl	80054c6 <UART_EndTransmit_IT>
    return;
 8004ca4:	e008      	b.n	8004cb8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004ca6:	bf00      	nop
 8004ca8:	e006      	b.n	8004cb8 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004caa:	bf00      	nop
 8004cac:	e004      	b.n	8004cb8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004cae:	bf00      	nop
 8004cb0:	e002      	b.n	8004cb8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004cb6:	bf00      	nop
  }

}
 8004cb8:	3720      	adds	r7, #32
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop

08004cc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b8a      	ldr	r3, [pc, #552]	; (8004f54 <UART_SetConfig+0x254>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6812      	ldr	r2, [r2, #0]
 8004d32:	6979      	ldr	r1, [r7, #20]
 8004d34:	430b      	orrs	r3, r1
 8004d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a78      	ldr	r2, [pc, #480]	; (8004f58 <UART_SetConfig+0x258>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d120      	bne.n	8004dbe <UART_SetConfig+0xbe>
 8004d7c:	4b77      	ldr	r3, [pc, #476]	; (8004f5c <UART_SetConfig+0x25c>)
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d817      	bhi.n	8004db8 <UART_SetConfig+0xb8>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <UART_SetConfig+0x90>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004da1 	.word	0x08004da1
 8004d94:	08004dad 	.word	0x08004dad
 8004d98:	08004db3 	.word	0x08004db3
 8004d9c:	08004da7 	.word	0x08004da7
 8004da0:	2300      	movs	r3, #0
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e01d      	b.n	8004de2 <UART_SetConfig+0xe2>
 8004da6:	2302      	movs	r3, #2
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e01a      	b.n	8004de2 <UART_SetConfig+0xe2>
 8004dac:	2304      	movs	r3, #4
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e017      	b.n	8004de2 <UART_SetConfig+0xe2>
 8004db2:	2308      	movs	r3, #8
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	e014      	b.n	8004de2 <UART_SetConfig+0xe2>
 8004db8:	2310      	movs	r3, #16
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e011      	b.n	8004de2 <UART_SetConfig+0xe2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a67      	ldr	r2, [pc, #412]	; (8004f60 <UART_SetConfig+0x260>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d102      	bne.n	8004dce <UART_SetConfig+0xce>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e009      	b.n	8004de2 <UART_SetConfig+0xe2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a64      	ldr	r2, [pc, #400]	; (8004f64 <UART_SetConfig+0x264>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d102      	bne.n	8004dde <UART_SetConfig+0xde>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e001      	b.n	8004de2 <UART_SetConfig+0xe2>
 8004dde:	2310      	movs	r3, #16
 8004de0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dea:	d15b      	bne.n	8004ea4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004dec:	7ffb      	ldrb	r3, [r7, #31]
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d827      	bhi.n	8004e42 <UART_SetConfig+0x142>
 8004df2:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <UART_SetConfig+0xf8>)
 8004df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df8:	08004e1d 	.word	0x08004e1d
 8004dfc:	08004e25 	.word	0x08004e25
 8004e00:	08004e2d 	.word	0x08004e2d
 8004e04:	08004e43 	.word	0x08004e43
 8004e08:	08004e33 	.word	0x08004e33
 8004e0c:	08004e43 	.word	0x08004e43
 8004e10:	08004e43 	.word	0x08004e43
 8004e14:	08004e43 	.word	0x08004e43
 8004e18:	08004e3b 	.word	0x08004e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e1c:	f7fe f9e4 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8004e20:	61b8      	str	r0, [r7, #24]
        break;
 8004e22:	e013      	b.n	8004e4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e24:	f7fe fa02 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8004e28:	61b8      	str	r0, [r7, #24]
        break;
 8004e2a:	e00f      	b.n	8004e4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e2c:	4b4e      	ldr	r3, [pc, #312]	; (8004f68 <UART_SetConfig+0x268>)
 8004e2e:	61bb      	str	r3, [r7, #24]
        break;
 8004e30:	e00c      	b.n	8004e4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e32:	f7fe f963 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 8004e36:	61b8      	str	r0, [r7, #24]
        break;
 8004e38:	e008      	b.n	8004e4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e3e:	61bb      	str	r3, [r7, #24]
        break;
 8004e40:	e004      	b.n	8004e4c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	77bb      	strb	r3, [r7, #30]
        break;
 8004e4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d074      	beq.n	8004f3c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	005a      	lsls	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	441a      	add	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b0f      	cmp	r3, #15
 8004e6e:	d916      	bls.n	8004e9e <UART_SetConfig+0x19e>
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e76:	d212      	bcs.n	8004e9e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f023 030f 	bic.w	r3, r3, #15
 8004e80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	89fb      	ldrh	r3, [r7, #14]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	89fa      	ldrh	r2, [r7, #14]
 8004e9a:	60da      	str	r2, [r3, #12]
 8004e9c:	e04e      	b.n	8004f3c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	77bb      	strb	r3, [r7, #30]
 8004ea2:	e04b      	b.n	8004f3c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ea4:	7ffb      	ldrb	r3, [r7, #31]
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d827      	bhi.n	8004efa <UART_SetConfig+0x1fa>
 8004eaa:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <UART_SetConfig+0x1b0>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004edd 	.word	0x08004edd
 8004eb8:	08004ee5 	.word	0x08004ee5
 8004ebc:	08004efb 	.word	0x08004efb
 8004ec0:	08004eeb 	.word	0x08004eeb
 8004ec4:	08004efb 	.word	0x08004efb
 8004ec8:	08004efb 	.word	0x08004efb
 8004ecc:	08004efb 	.word	0x08004efb
 8004ed0:	08004ef3 	.word	0x08004ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7fe f988 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	61b8      	str	r0, [r7, #24]
        break;
 8004eda:	e013      	b.n	8004f04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7fe f9a6 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8004ee0:	61b8      	str	r0, [r7, #24]
        break;
 8004ee2:	e00f      	b.n	8004f04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee4:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <UART_SetConfig+0x268>)
 8004ee6:	61bb      	str	r3, [r7, #24]
        break;
 8004ee8:	e00c      	b.n	8004f04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eea:	f7fe f907 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 8004eee:	61b8      	str	r0, [r7, #24]
        break;
 8004ef0:	e008      	b.n	8004f04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef6:	61bb      	str	r3, [r7, #24]
        break;
 8004ef8:	e004      	b.n	8004f04 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	77bb      	strb	r3, [r7, #30]
        break;
 8004f02:	bf00      	nop
    }

    if (pclk != 0U)
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d018      	beq.n	8004f3c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	085a      	lsrs	r2, r3, #1
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	441a      	add	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b0f      	cmp	r3, #15
 8004f24:	d908      	bls.n	8004f38 <UART_SetConfig+0x238>
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f2c:	d204      	bcs.n	8004f38 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	60da      	str	r2, [r3, #12]
 8004f36:	e001      	b.n	8004f3c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f48:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	efff69f3 	.word	0xefff69f3
 8004f58:	40013800 	.word	0x40013800
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	40004400 	.word	0x40004400
 8004f64:	40004800 	.word	0x40004800
 8004f68:	007a1200 	.word	0x007a1200

08004f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01a      	beq.n	8005082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800506a:	d10a      	bne.n	8005082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	605a      	str	r2, [r3, #4]
  }
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050c0:	f7fc fb34 	bl	800172c <HAL_GetTick>
 80050c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d10e      	bne.n	80050f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f82d 	bl	8005142 <UART_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e023      	b.n	800513a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d10e      	bne.n	800511e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f817 	bl	8005142 <UART_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e00d      	b.n	800513a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	4613      	mov	r3, r2
 8005150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005152:	e05e      	b.n	8005212 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800515a:	d05a      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800515c:	f7fc fae6 	bl	800172c <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	429a      	cmp	r2, r3
 800516a:	d302      	bcc.n	8005172 <UART_WaitOnFlagUntilTimeout+0x30>
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11b      	bne.n	80051aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005180:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0201 	bic.w	r2, r2, #1
 8005190:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e043      	b.n	8005232 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d02c      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c6:	d124      	bne.n	8005212 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0201 	bic.w	r2, r2, #1
 80051f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e00f      	b.n	8005232 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4013      	ands	r3, r2
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	429a      	cmp	r2, r3
 8005220:	bf0c      	ite	eq
 8005222:	2301      	moveq	r3, #1
 8005224:	2300      	movne	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	461a      	mov	r2, r3
 800522a:	79fb      	ldrb	r3, [r7, #7]
 800522c:	429a      	cmp	r2, r3
 800522e:	d091      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	88fa      	ldrh	r2, [r7, #6]
 800525c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526e:	d10e      	bne.n	800528e <UART_Start_Receive_IT+0x52>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <UART_Start_Receive_IT+0x48>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800527e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005282:	e02d      	b.n	80052e0 <UART_Start_Receive_IT+0xa4>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	22ff      	movs	r2, #255	; 0xff
 8005288:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800528c:	e028      	b.n	80052e0 <UART_Start_Receive_IT+0xa4>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10d      	bne.n	80052b2 <UART_Start_Receive_IT+0x76>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d104      	bne.n	80052a8 <UART_Start_Receive_IT+0x6c>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	22ff      	movs	r2, #255	; 0xff
 80052a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052a6:	e01b      	b.n	80052e0 <UART_Start_Receive_IT+0xa4>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	227f      	movs	r2, #127	; 0x7f
 80052ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052b0:	e016      	b.n	80052e0 <UART_Start_Receive_IT+0xa4>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052ba:	d10d      	bne.n	80052d8 <UART_Start_Receive_IT+0x9c>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <UART_Start_Receive_IT+0x92>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	227f      	movs	r2, #127	; 0x7f
 80052c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052cc:	e008      	b.n	80052e0 <UART_Start_Receive_IT+0xa4>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	223f      	movs	r2, #63	; 0x3f
 80052d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052d6:	e003      	b.n	80052e0 <UART_Start_Receive_IT+0xa4>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2222      	movs	r2, #34	; 0x22
 80052ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005306:	d107      	bne.n	8005318 <UART_Start_Receive_IT+0xdc>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d103      	bne.n	8005318 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <UART_Start_Receive_IT+0x108>)
 8005314:	665a      	str	r2, [r3, #100]	; 0x64
 8005316:	e002      	b.n	800531e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4a0b      	ldr	r2, [pc, #44]	; (8005348 <UART_Start_Receive_IT+0x10c>)
 800531c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005334:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	080055cd 	.word	0x080055cd
 8005348:	080054f9 	.word	0x080054f9

0800534c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005362:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0201 	bic.w	r2, r2, #1
 8005372:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005378:	2b01      	cmp	r3, #1
 800537a:	d107      	bne.n	800538c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0210 	bic.w	r2, r2, #16
 800538a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2220      	movs	r2, #32
 8005390:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7ff fc83 	bl	8004cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ce:	bf00      	nop
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e2:	2b21      	cmp	r3, #33	; 0x21
 80053e4:	d12b      	bne.n	800543e <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d110      	bne.n	8005414 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005400:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005410:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005412:	e014      	b.n	800543e <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005418:	781a      	ldrb	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	b292      	uxth	r2, r2
 8005420:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005456:	2b21      	cmp	r3, #33	; 0x21
 8005458:	d12f      	bne.n	80054ba <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d110      	bne.n	8005488 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005474:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005484:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005486:	e018      	b.n	80054ba <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	881a      	ldrh	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800549a:	b292      	uxth	r2, r2
 800549c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a2:	1c9a      	adds	r2, r3, #2
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054dc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7ff fbe8 	bl	8004cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005506:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550c:	2b22      	cmp	r3, #34	; 0x22
 800550e:	d151      	bne.n	80055b4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005516:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005518:	89bb      	ldrh	r3, [r7, #12]
 800551a:	b2d9      	uxtb	r1, r3
 800551c:	89fb      	ldrh	r3, [r7, #14]
 800551e:	b2da      	uxtb	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	400a      	ands	r2, r1
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d138      	bne.n	80055c4 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005560:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0201 	bic.w	r2, r2, #1
 8005570:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005582:	2b01      	cmp	r3, #1
 8005584:	d10f      	bne.n	80055a6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0210 	bic.w	r2, r2, #16
 8005594:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fba2 	bl	8004ce8 <HAL_UARTEx_RxEventCallback>
 80055a4:	e002      	b.n	80055ac <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fb f8aa 	bl	8000700 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055b2:	e007      	b.n	80055c4 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0208 	orr.w	r2, r2, #8
 80055c2:	619a      	str	r2, [r3, #24]
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055da:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e0:	2b22      	cmp	r3, #34	; 0x22
 80055e2:	d151      	bne.n	8005688 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055ea:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80055f2:	89ba      	ldrh	r2, [r7, #12]
 80055f4:	89fb      	ldrh	r3, [r7, #14]
 80055f6:	4013      	ands	r3, r2
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	1c9a      	adds	r2, r3, #2
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d138      	bne.n	8005698 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005634:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005656:	2b01      	cmp	r3, #1
 8005658:	d10f      	bne.n	800567a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0210 	bic.w	r2, r2, #16
 8005668:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fb38 	bl	8004ce8 <HAL_UARTEx_RxEventCallback>
 8005678:	e002      	b.n	8005680 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fb f840 	bl	8000700 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005686:	e007      	b.n	8005698 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0208 	orr.w	r2, r2, #8
 8005696:	619a      	str	r2, [r3, #24]
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <__errno>:
 80056b4:	4b01      	ldr	r3, [pc, #4]	; (80056bc <__errno+0x8>)
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	2000000c 	.word	0x2000000c

080056c0 <__libc_init_array>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	4d0d      	ldr	r5, [pc, #52]	; (80056f8 <__libc_init_array+0x38>)
 80056c4:	4c0d      	ldr	r4, [pc, #52]	; (80056fc <__libc_init_array+0x3c>)
 80056c6:	1b64      	subs	r4, r4, r5
 80056c8:	10a4      	asrs	r4, r4, #2
 80056ca:	2600      	movs	r6, #0
 80056cc:	42a6      	cmp	r6, r4
 80056ce:	d109      	bne.n	80056e4 <__libc_init_array+0x24>
 80056d0:	4d0b      	ldr	r5, [pc, #44]	; (8005700 <__libc_init_array+0x40>)
 80056d2:	4c0c      	ldr	r4, [pc, #48]	; (8005704 <__libc_init_array+0x44>)
 80056d4:	f000 fffa 	bl	80066cc <_init>
 80056d8:	1b64      	subs	r4, r4, r5
 80056da:	10a4      	asrs	r4, r4, #2
 80056dc:	2600      	movs	r6, #0
 80056de:	42a6      	cmp	r6, r4
 80056e0:	d105      	bne.n	80056ee <__libc_init_array+0x2e>
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e8:	4798      	blx	r3
 80056ea:	3601      	adds	r6, #1
 80056ec:	e7ee      	b.n	80056cc <__libc_init_array+0xc>
 80056ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f2:	4798      	blx	r3
 80056f4:	3601      	adds	r6, #1
 80056f6:	e7f2      	b.n	80056de <__libc_init_array+0x1e>
 80056f8:	08006848 	.word	0x08006848
 80056fc:	08006848 	.word	0x08006848
 8005700:	08006848 	.word	0x08006848
 8005704:	0800684c 	.word	0x0800684c

08005708 <memcpy>:
 8005708:	440a      	add	r2, r1
 800570a:	4291      	cmp	r1, r2
 800570c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005710:	d100      	bne.n	8005714 <memcpy+0xc>
 8005712:	4770      	bx	lr
 8005714:	b510      	push	{r4, lr}
 8005716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800571a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800571e:	4291      	cmp	r1, r2
 8005720:	d1f9      	bne.n	8005716 <memcpy+0xe>
 8005722:	bd10      	pop	{r4, pc}

08005724 <memset>:
 8005724:	4402      	add	r2, r0
 8005726:	4603      	mov	r3, r0
 8005728:	4293      	cmp	r3, r2
 800572a:	d100      	bne.n	800572e <memset+0xa>
 800572c:	4770      	bx	lr
 800572e:	f803 1b01 	strb.w	r1, [r3], #1
 8005732:	e7f9      	b.n	8005728 <memset+0x4>

08005734 <iprintf>:
 8005734:	b40f      	push	{r0, r1, r2, r3}
 8005736:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <iprintf+0x2c>)
 8005738:	b513      	push	{r0, r1, r4, lr}
 800573a:	681c      	ldr	r4, [r3, #0]
 800573c:	b124      	cbz	r4, 8005748 <iprintf+0x14>
 800573e:	69a3      	ldr	r3, [r4, #24]
 8005740:	b913      	cbnz	r3, 8005748 <iprintf+0x14>
 8005742:	4620      	mov	r0, r4
 8005744:	f000 fa5e 	bl	8005c04 <__sinit>
 8005748:	ab05      	add	r3, sp, #20
 800574a:	9a04      	ldr	r2, [sp, #16]
 800574c:	68a1      	ldr	r1, [r4, #8]
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	4620      	mov	r0, r4
 8005752:	f000 fc2f 	bl	8005fb4 <_vfiprintf_r>
 8005756:	b002      	add	sp, #8
 8005758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800575c:	b004      	add	sp, #16
 800575e:	4770      	bx	lr
 8005760:	2000000c 	.word	0x2000000c

08005764 <_puts_r>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	460e      	mov	r6, r1
 8005768:	4605      	mov	r5, r0
 800576a:	b118      	cbz	r0, 8005774 <_puts_r+0x10>
 800576c:	6983      	ldr	r3, [r0, #24]
 800576e:	b90b      	cbnz	r3, 8005774 <_puts_r+0x10>
 8005770:	f000 fa48 	bl	8005c04 <__sinit>
 8005774:	69ab      	ldr	r3, [r5, #24]
 8005776:	68ac      	ldr	r4, [r5, #8]
 8005778:	b913      	cbnz	r3, 8005780 <_puts_r+0x1c>
 800577a:	4628      	mov	r0, r5
 800577c:	f000 fa42 	bl	8005c04 <__sinit>
 8005780:	4b2c      	ldr	r3, [pc, #176]	; (8005834 <_puts_r+0xd0>)
 8005782:	429c      	cmp	r4, r3
 8005784:	d120      	bne.n	80057c8 <_puts_r+0x64>
 8005786:	686c      	ldr	r4, [r5, #4]
 8005788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800578a:	07db      	lsls	r3, r3, #31
 800578c:	d405      	bmi.n	800579a <_puts_r+0x36>
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	0598      	lsls	r0, r3, #22
 8005792:	d402      	bmi.n	800579a <_puts_r+0x36>
 8005794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005796:	f000 fad3 	bl	8005d40 <__retarget_lock_acquire_recursive>
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	0719      	lsls	r1, r3, #28
 800579e:	d51d      	bpl.n	80057dc <_puts_r+0x78>
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	b1db      	cbz	r3, 80057dc <_puts_r+0x78>
 80057a4:	3e01      	subs	r6, #1
 80057a6:	68a3      	ldr	r3, [r4, #8]
 80057a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057ac:	3b01      	subs	r3, #1
 80057ae:	60a3      	str	r3, [r4, #8]
 80057b0:	bb39      	cbnz	r1, 8005802 <_puts_r+0x9e>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	da38      	bge.n	8005828 <_puts_r+0xc4>
 80057b6:	4622      	mov	r2, r4
 80057b8:	210a      	movs	r1, #10
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 f848 	bl	8005850 <__swbuf_r>
 80057c0:	3001      	adds	r0, #1
 80057c2:	d011      	beq.n	80057e8 <_puts_r+0x84>
 80057c4:	250a      	movs	r5, #10
 80057c6:	e011      	b.n	80057ec <_puts_r+0x88>
 80057c8:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <_puts_r+0xd4>)
 80057ca:	429c      	cmp	r4, r3
 80057cc:	d101      	bne.n	80057d2 <_puts_r+0x6e>
 80057ce:	68ac      	ldr	r4, [r5, #8]
 80057d0:	e7da      	b.n	8005788 <_puts_r+0x24>
 80057d2:	4b1a      	ldr	r3, [pc, #104]	; (800583c <_puts_r+0xd8>)
 80057d4:	429c      	cmp	r4, r3
 80057d6:	bf08      	it	eq
 80057d8:	68ec      	ldreq	r4, [r5, #12]
 80057da:	e7d5      	b.n	8005788 <_puts_r+0x24>
 80057dc:	4621      	mov	r1, r4
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 f888 	bl	80058f4 <__swsetup_r>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d0dd      	beq.n	80057a4 <_puts_r+0x40>
 80057e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80057ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057ee:	07da      	lsls	r2, r3, #31
 80057f0:	d405      	bmi.n	80057fe <_puts_r+0x9a>
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	059b      	lsls	r3, r3, #22
 80057f6:	d402      	bmi.n	80057fe <_puts_r+0x9a>
 80057f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057fa:	f000 faa2 	bl	8005d42 <__retarget_lock_release_recursive>
 80057fe:	4628      	mov	r0, r5
 8005800:	bd70      	pop	{r4, r5, r6, pc}
 8005802:	2b00      	cmp	r3, #0
 8005804:	da04      	bge.n	8005810 <_puts_r+0xac>
 8005806:	69a2      	ldr	r2, [r4, #24]
 8005808:	429a      	cmp	r2, r3
 800580a:	dc06      	bgt.n	800581a <_puts_r+0xb6>
 800580c:	290a      	cmp	r1, #10
 800580e:	d004      	beq.n	800581a <_puts_r+0xb6>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	6022      	str	r2, [r4, #0]
 8005816:	7019      	strb	r1, [r3, #0]
 8005818:	e7c5      	b.n	80057a6 <_puts_r+0x42>
 800581a:	4622      	mov	r2, r4
 800581c:	4628      	mov	r0, r5
 800581e:	f000 f817 	bl	8005850 <__swbuf_r>
 8005822:	3001      	adds	r0, #1
 8005824:	d1bf      	bne.n	80057a6 <_puts_r+0x42>
 8005826:	e7df      	b.n	80057e8 <_puts_r+0x84>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	250a      	movs	r5, #10
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	6022      	str	r2, [r4, #0]
 8005830:	701d      	strb	r5, [r3, #0]
 8005832:	e7db      	b.n	80057ec <_puts_r+0x88>
 8005834:	080067d4 	.word	0x080067d4
 8005838:	080067f4 	.word	0x080067f4
 800583c:	080067b4 	.word	0x080067b4

08005840 <puts>:
 8005840:	4b02      	ldr	r3, [pc, #8]	; (800584c <puts+0xc>)
 8005842:	4601      	mov	r1, r0
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	f7ff bf8d 	b.w	8005764 <_puts_r>
 800584a:	bf00      	nop
 800584c:	2000000c 	.word	0x2000000c

08005850 <__swbuf_r>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	460e      	mov	r6, r1
 8005854:	4614      	mov	r4, r2
 8005856:	4605      	mov	r5, r0
 8005858:	b118      	cbz	r0, 8005862 <__swbuf_r+0x12>
 800585a:	6983      	ldr	r3, [r0, #24]
 800585c:	b90b      	cbnz	r3, 8005862 <__swbuf_r+0x12>
 800585e:	f000 f9d1 	bl	8005c04 <__sinit>
 8005862:	4b21      	ldr	r3, [pc, #132]	; (80058e8 <__swbuf_r+0x98>)
 8005864:	429c      	cmp	r4, r3
 8005866:	d12b      	bne.n	80058c0 <__swbuf_r+0x70>
 8005868:	686c      	ldr	r4, [r5, #4]
 800586a:	69a3      	ldr	r3, [r4, #24]
 800586c:	60a3      	str	r3, [r4, #8]
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	071a      	lsls	r2, r3, #28
 8005872:	d52f      	bpl.n	80058d4 <__swbuf_r+0x84>
 8005874:	6923      	ldr	r3, [r4, #16]
 8005876:	b36b      	cbz	r3, 80058d4 <__swbuf_r+0x84>
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	6820      	ldr	r0, [r4, #0]
 800587c:	1ac0      	subs	r0, r0, r3
 800587e:	6963      	ldr	r3, [r4, #20]
 8005880:	b2f6      	uxtb	r6, r6
 8005882:	4283      	cmp	r3, r0
 8005884:	4637      	mov	r7, r6
 8005886:	dc04      	bgt.n	8005892 <__swbuf_r+0x42>
 8005888:	4621      	mov	r1, r4
 800588a:	4628      	mov	r0, r5
 800588c:	f000 f926 	bl	8005adc <_fflush_r>
 8005890:	bb30      	cbnz	r0, 80058e0 <__swbuf_r+0x90>
 8005892:	68a3      	ldr	r3, [r4, #8]
 8005894:	3b01      	subs	r3, #1
 8005896:	60a3      	str	r3, [r4, #8]
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	6022      	str	r2, [r4, #0]
 800589e:	701e      	strb	r6, [r3, #0]
 80058a0:	6963      	ldr	r3, [r4, #20]
 80058a2:	3001      	adds	r0, #1
 80058a4:	4283      	cmp	r3, r0
 80058a6:	d004      	beq.n	80058b2 <__swbuf_r+0x62>
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	07db      	lsls	r3, r3, #31
 80058ac:	d506      	bpl.n	80058bc <__swbuf_r+0x6c>
 80058ae:	2e0a      	cmp	r6, #10
 80058b0:	d104      	bne.n	80058bc <__swbuf_r+0x6c>
 80058b2:	4621      	mov	r1, r4
 80058b4:	4628      	mov	r0, r5
 80058b6:	f000 f911 	bl	8005adc <_fflush_r>
 80058ba:	b988      	cbnz	r0, 80058e0 <__swbuf_r+0x90>
 80058bc:	4638      	mov	r0, r7
 80058be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <__swbuf_r+0x9c>)
 80058c2:	429c      	cmp	r4, r3
 80058c4:	d101      	bne.n	80058ca <__swbuf_r+0x7a>
 80058c6:	68ac      	ldr	r4, [r5, #8]
 80058c8:	e7cf      	b.n	800586a <__swbuf_r+0x1a>
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <__swbuf_r+0xa0>)
 80058cc:	429c      	cmp	r4, r3
 80058ce:	bf08      	it	eq
 80058d0:	68ec      	ldreq	r4, [r5, #12]
 80058d2:	e7ca      	b.n	800586a <__swbuf_r+0x1a>
 80058d4:	4621      	mov	r1, r4
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 f80c 	bl	80058f4 <__swsetup_r>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d0cb      	beq.n	8005878 <__swbuf_r+0x28>
 80058e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80058e4:	e7ea      	b.n	80058bc <__swbuf_r+0x6c>
 80058e6:	bf00      	nop
 80058e8:	080067d4 	.word	0x080067d4
 80058ec:	080067f4 	.word	0x080067f4
 80058f0:	080067b4 	.word	0x080067b4

080058f4 <__swsetup_r>:
 80058f4:	4b32      	ldr	r3, [pc, #200]	; (80059c0 <__swsetup_r+0xcc>)
 80058f6:	b570      	push	{r4, r5, r6, lr}
 80058f8:	681d      	ldr	r5, [r3, #0]
 80058fa:	4606      	mov	r6, r0
 80058fc:	460c      	mov	r4, r1
 80058fe:	b125      	cbz	r5, 800590a <__swsetup_r+0x16>
 8005900:	69ab      	ldr	r3, [r5, #24]
 8005902:	b913      	cbnz	r3, 800590a <__swsetup_r+0x16>
 8005904:	4628      	mov	r0, r5
 8005906:	f000 f97d 	bl	8005c04 <__sinit>
 800590a:	4b2e      	ldr	r3, [pc, #184]	; (80059c4 <__swsetup_r+0xd0>)
 800590c:	429c      	cmp	r4, r3
 800590e:	d10f      	bne.n	8005930 <__swsetup_r+0x3c>
 8005910:	686c      	ldr	r4, [r5, #4]
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005918:	0719      	lsls	r1, r3, #28
 800591a:	d42c      	bmi.n	8005976 <__swsetup_r+0x82>
 800591c:	06dd      	lsls	r5, r3, #27
 800591e:	d411      	bmi.n	8005944 <__swsetup_r+0x50>
 8005920:	2309      	movs	r3, #9
 8005922:	6033      	str	r3, [r6, #0]
 8005924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005928:	81a3      	strh	r3, [r4, #12]
 800592a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800592e:	e03e      	b.n	80059ae <__swsetup_r+0xba>
 8005930:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <__swsetup_r+0xd4>)
 8005932:	429c      	cmp	r4, r3
 8005934:	d101      	bne.n	800593a <__swsetup_r+0x46>
 8005936:	68ac      	ldr	r4, [r5, #8]
 8005938:	e7eb      	b.n	8005912 <__swsetup_r+0x1e>
 800593a:	4b24      	ldr	r3, [pc, #144]	; (80059cc <__swsetup_r+0xd8>)
 800593c:	429c      	cmp	r4, r3
 800593e:	bf08      	it	eq
 8005940:	68ec      	ldreq	r4, [r5, #12]
 8005942:	e7e6      	b.n	8005912 <__swsetup_r+0x1e>
 8005944:	0758      	lsls	r0, r3, #29
 8005946:	d512      	bpl.n	800596e <__swsetup_r+0x7a>
 8005948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800594a:	b141      	cbz	r1, 800595e <__swsetup_r+0x6a>
 800594c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005950:	4299      	cmp	r1, r3
 8005952:	d002      	beq.n	800595a <__swsetup_r+0x66>
 8005954:	4630      	mov	r0, r6
 8005956:	f000 fa59 	bl	8005e0c <_free_r>
 800595a:	2300      	movs	r3, #0
 800595c:	6363      	str	r3, [r4, #52]	; 0x34
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005964:	81a3      	strh	r3, [r4, #12]
 8005966:	2300      	movs	r3, #0
 8005968:	6063      	str	r3, [r4, #4]
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	f043 0308 	orr.w	r3, r3, #8
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	b94b      	cbnz	r3, 800598e <__swsetup_r+0x9a>
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005984:	d003      	beq.n	800598e <__swsetup_r+0x9a>
 8005986:	4621      	mov	r1, r4
 8005988:	4630      	mov	r0, r6
 800598a:	f000 f9ff 	bl	8005d8c <__smakebuf_r>
 800598e:	89a0      	ldrh	r0, [r4, #12]
 8005990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005994:	f010 0301 	ands.w	r3, r0, #1
 8005998:	d00a      	beq.n	80059b0 <__swsetup_r+0xbc>
 800599a:	2300      	movs	r3, #0
 800599c:	60a3      	str	r3, [r4, #8]
 800599e:	6963      	ldr	r3, [r4, #20]
 80059a0:	425b      	negs	r3, r3
 80059a2:	61a3      	str	r3, [r4, #24]
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	b943      	cbnz	r3, 80059ba <__swsetup_r+0xc6>
 80059a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059ac:	d1ba      	bne.n	8005924 <__swsetup_r+0x30>
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	0781      	lsls	r1, r0, #30
 80059b2:	bf58      	it	pl
 80059b4:	6963      	ldrpl	r3, [r4, #20]
 80059b6:	60a3      	str	r3, [r4, #8]
 80059b8:	e7f4      	b.n	80059a4 <__swsetup_r+0xb0>
 80059ba:	2000      	movs	r0, #0
 80059bc:	e7f7      	b.n	80059ae <__swsetup_r+0xba>
 80059be:	bf00      	nop
 80059c0:	2000000c 	.word	0x2000000c
 80059c4:	080067d4 	.word	0x080067d4
 80059c8:	080067f4 	.word	0x080067f4
 80059cc:	080067b4 	.word	0x080067b4

080059d0 <__sflush_r>:
 80059d0:	898a      	ldrh	r2, [r1, #12]
 80059d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d6:	4605      	mov	r5, r0
 80059d8:	0710      	lsls	r0, r2, #28
 80059da:	460c      	mov	r4, r1
 80059dc:	d458      	bmi.n	8005a90 <__sflush_r+0xc0>
 80059de:	684b      	ldr	r3, [r1, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	dc05      	bgt.n	80059f0 <__sflush_r+0x20>
 80059e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dc02      	bgt.n	80059f0 <__sflush_r+0x20>
 80059ea:	2000      	movs	r0, #0
 80059ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059f2:	2e00      	cmp	r6, #0
 80059f4:	d0f9      	beq.n	80059ea <__sflush_r+0x1a>
 80059f6:	2300      	movs	r3, #0
 80059f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059fc:	682f      	ldr	r7, [r5, #0]
 80059fe:	602b      	str	r3, [r5, #0]
 8005a00:	d032      	beq.n	8005a68 <__sflush_r+0x98>
 8005a02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	075a      	lsls	r2, r3, #29
 8005a08:	d505      	bpl.n	8005a16 <__sflush_r+0x46>
 8005a0a:	6863      	ldr	r3, [r4, #4]
 8005a0c:	1ac0      	subs	r0, r0, r3
 8005a0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a10:	b10b      	cbz	r3, 8005a16 <__sflush_r+0x46>
 8005a12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a14:	1ac0      	subs	r0, r0, r3
 8005a16:	2300      	movs	r3, #0
 8005a18:	4602      	mov	r2, r0
 8005a1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a1c:	6a21      	ldr	r1, [r4, #32]
 8005a1e:	4628      	mov	r0, r5
 8005a20:	47b0      	blx	r6
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	d106      	bne.n	8005a36 <__sflush_r+0x66>
 8005a28:	6829      	ldr	r1, [r5, #0]
 8005a2a:	291d      	cmp	r1, #29
 8005a2c:	d82c      	bhi.n	8005a88 <__sflush_r+0xb8>
 8005a2e:	4a2a      	ldr	r2, [pc, #168]	; (8005ad8 <__sflush_r+0x108>)
 8005a30:	40ca      	lsrs	r2, r1
 8005a32:	07d6      	lsls	r6, r2, #31
 8005a34:	d528      	bpl.n	8005a88 <__sflush_r+0xb8>
 8005a36:	2200      	movs	r2, #0
 8005a38:	6062      	str	r2, [r4, #4]
 8005a3a:	04d9      	lsls	r1, r3, #19
 8005a3c:	6922      	ldr	r2, [r4, #16]
 8005a3e:	6022      	str	r2, [r4, #0]
 8005a40:	d504      	bpl.n	8005a4c <__sflush_r+0x7c>
 8005a42:	1c42      	adds	r2, r0, #1
 8005a44:	d101      	bne.n	8005a4a <__sflush_r+0x7a>
 8005a46:	682b      	ldr	r3, [r5, #0]
 8005a48:	b903      	cbnz	r3, 8005a4c <__sflush_r+0x7c>
 8005a4a:	6560      	str	r0, [r4, #84]	; 0x54
 8005a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a4e:	602f      	str	r7, [r5, #0]
 8005a50:	2900      	cmp	r1, #0
 8005a52:	d0ca      	beq.n	80059ea <__sflush_r+0x1a>
 8005a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a58:	4299      	cmp	r1, r3
 8005a5a:	d002      	beq.n	8005a62 <__sflush_r+0x92>
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f000 f9d5 	bl	8005e0c <_free_r>
 8005a62:	2000      	movs	r0, #0
 8005a64:	6360      	str	r0, [r4, #52]	; 0x34
 8005a66:	e7c1      	b.n	80059ec <__sflush_r+0x1c>
 8005a68:	6a21      	ldr	r1, [r4, #32]
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	47b0      	blx	r6
 8005a70:	1c41      	adds	r1, r0, #1
 8005a72:	d1c7      	bne.n	8005a04 <__sflush_r+0x34>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0c4      	beq.n	8005a04 <__sflush_r+0x34>
 8005a7a:	2b1d      	cmp	r3, #29
 8005a7c:	d001      	beq.n	8005a82 <__sflush_r+0xb2>
 8005a7e:	2b16      	cmp	r3, #22
 8005a80:	d101      	bne.n	8005a86 <__sflush_r+0xb6>
 8005a82:	602f      	str	r7, [r5, #0]
 8005a84:	e7b1      	b.n	80059ea <__sflush_r+0x1a>
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a8c:	81a3      	strh	r3, [r4, #12]
 8005a8e:	e7ad      	b.n	80059ec <__sflush_r+0x1c>
 8005a90:	690f      	ldr	r7, [r1, #16]
 8005a92:	2f00      	cmp	r7, #0
 8005a94:	d0a9      	beq.n	80059ea <__sflush_r+0x1a>
 8005a96:	0793      	lsls	r3, r2, #30
 8005a98:	680e      	ldr	r6, [r1, #0]
 8005a9a:	bf08      	it	eq
 8005a9c:	694b      	ldreq	r3, [r1, #20]
 8005a9e:	600f      	str	r7, [r1, #0]
 8005aa0:	bf18      	it	ne
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	eba6 0807 	sub.w	r8, r6, r7
 8005aa8:	608b      	str	r3, [r1, #8]
 8005aaa:	f1b8 0f00 	cmp.w	r8, #0
 8005aae:	dd9c      	ble.n	80059ea <__sflush_r+0x1a>
 8005ab0:	6a21      	ldr	r1, [r4, #32]
 8005ab2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ab4:	4643      	mov	r3, r8
 8005ab6:	463a      	mov	r2, r7
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b0      	blx	r6
 8005abc:	2800      	cmp	r0, #0
 8005abe:	dc06      	bgt.n	8005ace <__sflush_r+0xfe>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac6:	81a3      	strh	r3, [r4, #12]
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005acc:	e78e      	b.n	80059ec <__sflush_r+0x1c>
 8005ace:	4407      	add	r7, r0
 8005ad0:	eba8 0800 	sub.w	r8, r8, r0
 8005ad4:	e7e9      	b.n	8005aaa <__sflush_r+0xda>
 8005ad6:	bf00      	nop
 8005ad8:	20400001 	.word	0x20400001

08005adc <_fflush_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	690b      	ldr	r3, [r1, #16]
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	b913      	cbnz	r3, 8005aec <_fflush_r+0x10>
 8005ae6:	2500      	movs	r5, #0
 8005ae8:	4628      	mov	r0, r5
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	b118      	cbz	r0, 8005af6 <_fflush_r+0x1a>
 8005aee:	6983      	ldr	r3, [r0, #24]
 8005af0:	b90b      	cbnz	r3, 8005af6 <_fflush_r+0x1a>
 8005af2:	f000 f887 	bl	8005c04 <__sinit>
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <_fflush_r+0x6c>)
 8005af8:	429c      	cmp	r4, r3
 8005afa:	d11b      	bne.n	8005b34 <_fflush_r+0x58>
 8005afc:	686c      	ldr	r4, [r5, #4]
 8005afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0ef      	beq.n	8005ae6 <_fflush_r+0xa>
 8005b06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b08:	07d0      	lsls	r0, r2, #31
 8005b0a:	d404      	bmi.n	8005b16 <_fflush_r+0x3a>
 8005b0c:	0599      	lsls	r1, r3, #22
 8005b0e:	d402      	bmi.n	8005b16 <_fflush_r+0x3a>
 8005b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b12:	f000 f915 	bl	8005d40 <__retarget_lock_acquire_recursive>
 8005b16:	4628      	mov	r0, r5
 8005b18:	4621      	mov	r1, r4
 8005b1a:	f7ff ff59 	bl	80059d0 <__sflush_r>
 8005b1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b20:	07da      	lsls	r2, r3, #31
 8005b22:	4605      	mov	r5, r0
 8005b24:	d4e0      	bmi.n	8005ae8 <_fflush_r+0xc>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	059b      	lsls	r3, r3, #22
 8005b2a:	d4dd      	bmi.n	8005ae8 <_fflush_r+0xc>
 8005b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b2e:	f000 f908 	bl	8005d42 <__retarget_lock_release_recursive>
 8005b32:	e7d9      	b.n	8005ae8 <_fflush_r+0xc>
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <_fflush_r+0x70>)
 8005b36:	429c      	cmp	r4, r3
 8005b38:	d101      	bne.n	8005b3e <_fflush_r+0x62>
 8005b3a:	68ac      	ldr	r4, [r5, #8]
 8005b3c:	e7df      	b.n	8005afe <_fflush_r+0x22>
 8005b3e:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <_fflush_r+0x74>)
 8005b40:	429c      	cmp	r4, r3
 8005b42:	bf08      	it	eq
 8005b44:	68ec      	ldreq	r4, [r5, #12]
 8005b46:	e7da      	b.n	8005afe <_fflush_r+0x22>
 8005b48:	080067d4 	.word	0x080067d4
 8005b4c:	080067f4 	.word	0x080067f4
 8005b50:	080067b4 	.word	0x080067b4

08005b54 <std>:
 8005b54:	2300      	movs	r3, #0
 8005b56:	b510      	push	{r4, lr}
 8005b58:	4604      	mov	r4, r0
 8005b5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b62:	6083      	str	r3, [r0, #8]
 8005b64:	8181      	strh	r1, [r0, #12]
 8005b66:	6643      	str	r3, [r0, #100]	; 0x64
 8005b68:	81c2      	strh	r2, [r0, #14]
 8005b6a:	6183      	str	r3, [r0, #24]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	2208      	movs	r2, #8
 8005b70:	305c      	adds	r0, #92	; 0x5c
 8005b72:	f7ff fdd7 	bl	8005724 <memset>
 8005b76:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <std+0x38>)
 8005b78:	6263      	str	r3, [r4, #36]	; 0x24
 8005b7a:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <std+0x3c>)
 8005b7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <std+0x40>)
 8005b80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b82:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <std+0x44>)
 8005b84:	6224      	str	r4, [r4, #32]
 8005b86:	6323      	str	r3, [r4, #48]	; 0x30
 8005b88:	bd10      	pop	{r4, pc}
 8005b8a:	bf00      	nop
 8005b8c:	0800655d 	.word	0x0800655d
 8005b90:	0800657f 	.word	0x0800657f
 8005b94:	080065b7 	.word	0x080065b7
 8005b98:	080065db 	.word	0x080065db

08005b9c <_cleanup_r>:
 8005b9c:	4901      	ldr	r1, [pc, #4]	; (8005ba4 <_cleanup_r+0x8>)
 8005b9e:	f000 b8af 	b.w	8005d00 <_fwalk_reent>
 8005ba2:	bf00      	nop
 8005ba4:	08005add 	.word	0x08005add

08005ba8 <__sfmoreglue>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	1e4a      	subs	r2, r1, #1
 8005bac:	2568      	movs	r5, #104	; 0x68
 8005bae:	4355      	muls	r5, r2
 8005bb0:	460e      	mov	r6, r1
 8005bb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bb6:	f000 f979 	bl	8005eac <_malloc_r>
 8005bba:	4604      	mov	r4, r0
 8005bbc:	b140      	cbz	r0, 8005bd0 <__sfmoreglue+0x28>
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	e9c0 1600 	strd	r1, r6, [r0]
 8005bc4:	300c      	adds	r0, #12
 8005bc6:	60a0      	str	r0, [r4, #8]
 8005bc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bcc:	f7ff fdaa 	bl	8005724 <memset>
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}

08005bd4 <__sfp_lock_acquire>:
 8005bd4:	4801      	ldr	r0, [pc, #4]	; (8005bdc <__sfp_lock_acquire+0x8>)
 8005bd6:	f000 b8b3 	b.w	8005d40 <__retarget_lock_acquire_recursive>
 8005bda:	bf00      	nop
 8005bdc:	20000350 	.word	0x20000350

08005be0 <__sfp_lock_release>:
 8005be0:	4801      	ldr	r0, [pc, #4]	; (8005be8 <__sfp_lock_release+0x8>)
 8005be2:	f000 b8ae 	b.w	8005d42 <__retarget_lock_release_recursive>
 8005be6:	bf00      	nop
 8005be8:	20000350 	.word	0x20000350

08005bec <__sinit_lock_acquire>:
 8005bec:	4801      	ldr	r0, [pc, #4]	; (8005bf4 <__sinit_lock_acquire+0x8>)
 8005bee:	f000 b8a7 	b.w	8005d40 <__retarget_lock_acquire_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	2000034b 	.word	0x2000034b

08005bf8 <__sinit_lock_release>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	; (8005c00 <__sinit_lock_release+0x8>)
 8005bfa:	f000 b8a2 	b.w	8005d42 <__retarget_lock_release_recursive>
 8005bfe:	bf00      	nop
 8005c00:	2000034b 	.word	0x2000034b

08005c04 <__sinit>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4604      	mov	r4, r0
 8005c08:	f7ff fff0 	bl	8005bec <__sinit_lock_acquire>
 8005c0c:	69a3      	ldr	r3, [r4, #24]
 8005c0e:	b11b      	cbz	r3, 8005c18 <__sinit+0x14>
 8005c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c14:	f7ff bff0 	b.w	8005bf8 <__sinit_lock_release>
 8005c18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c1c:	6523      	str	r3, [r4, #80]	; 0x50
 8005c1e:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <__sinit+0x68>)
 8005c20:	4a13      	ldr	r2, [pc, #76]	; (8005c70 <__sinit+0x6c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c26:	42a3      	cmp	r3, r4
 8005c28:	bf04      	itt	eq
 8005c2a:	2301      	moveq	r3, #1
 8005c2c:	61a3      	streq	r3, [r4, #24]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f000 f820 	bl	8005c74 <__sfp>
 8005c34:	6060      	str	r0, [r4, #4]
 8005c36:	4620      	mov	r0, r4
 8005c38:	f000 f81c 	bl	8005c74 <__sfp>
 8005c3c:	60a0      	str	r0, [r4, #8]
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f000 f818 	bl	8005c74 <__sfp>
 8005c44:	2200      	movs	r2, #0
 8005c46:	60e0      	str	r0, [r4, #12]
 8005c48:	2104      	movs	r1, #4
 8005c4a:	6860      	ldr	r0, [r4, #4]
 8005c4c:	f7ff ff82 	bl	8005b54 <std>
 8005c50:	68a0      	ldr	r0, [r4, #8]
 8005c52:	2201      	movs	r2, #1
 8005c54:	2109      	movs	r1, #9
 8005c56:	f7ff ff7d 	bl	8005b54 <std>
 8005c5a:	68e0      	ldr	r0, [r4, #12]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	2112      	movs	r1, #18
 8005c60:	f7ff ff78 	bl	8005b54 <std>
 8005c64:	2301      	movs	r3, #1
 8005c66:	61a3      	str	r3, [r4, #24]
 8005c68:	e7d2      	b.n	8005c10 <__sinit+0xc>
 8005c6a:	bf00      	nop
 8005c6c:	080067b0 	.word	0x080067b0
 8005c70:	08005b9d 	.word	0x08005b9d

08005c74 <__sfp>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	4607      	mov	r7, r0
 8005c78:	f7ff ffac 	bl	8005bd4 <__sfp_lock_acquire>
 8005c7c:	4b1e      	ldr	r3, [pc, #120]	; (8005cf8 <__sfp+0x84>)
 8005c7e:	681e      	ldr	r6, [r3, #0]
 8005c80:	69b3      	ldr	r3, [r6, #24]
 8005c82:	b913      	cbnz	r3, 8005c8a <__sfp+0x16>
 8005c84:	4630      	mov	r0, r6
 8005c86:	f7ff ffbd 	bl	8005c04 <__sinit>
 8005c8a:	3648      	adds	r6, #72	; 0x48
 8005c8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	d503      	bpl.n	8005c9c <__sfp+0x28>
 8005c94:	6833      	ldr	r3, [r6, #0]
 8005c96:	b30b      	cbz	r3, 8005cdc <__sfp+0x68>
 8005c98:	6836      	ldr	r6, [r6, #0]
 8005c9a:	e7f7      	b.n	8005c8c <__sfp+0x18>
 8005c9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ca0:	b9d5      	cbnz	r5, 8005cd8 <__sfp+0x64>
 8005ca2:	4b16      	ldr	r3, [pc, #88]	; (8005cfc <__sfp+0x88>)
 8005ca4:	60e3      	str	r3, [r4, #12]
 8005ca6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005caa:	6665      	str	r5, [r4, #100]	; 0x64
 8005cac:	f000 f847 	bl	8005d3e <__retarget_lock_init_recursive>
 8005cb0:	f7ff ff96 	bl	8005be0 <__sfp_lock_release>
 8005cb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cbc:	6025      	str	r5, [r4, #0]
 8005cbe:	61a5      	str	r5, [r4, #24]
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cc8:	f7ff fd2c 	bl	8005724 <memset>
 8005ccc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cd8:	3468      	adds	r4, #104	; 0x68
 8005cda:	e7d9      	b.n	8005c90 <__sfp+0x1c>
 8005cdc:	2104      	movs	r1, #4
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f7ff ff62 	bl	8005ba8 <__sfmoreglue>
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	6030      	str	r0, [r6, #0]
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d1d5      	bne.n	8005c98 <__sfp+0x24>
 8005cec:	f7ff ff78 	bl	8005be0 <__sfp_lock_release>
 8005cf0:	230c      	movs	r3, #12
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	e7ee      	b.n	8005cd4 <__sfp+0x60>
 8005cf6:	bf00      	nop
 8005cf8:	080067b0 	.word	0x080067b0
 8005cfc:	ffff0001 	.word	0xffff0001

08005d00 <_fwalk_reent>:
 8005d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d04:	4606      	mov	r6, r0
 8005d06:	4688      	mov	r8, r1
 8005d08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d0c:	2700      	movs	r7, #0
 8005d0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d12:	f1b9 0901 	subs.w	r9, r9, #1
 8005d16:	d505      	bpl.n	8005d24 <_fwalk_reent+0x24>
 8005d18:	6824      	ldr	r4, [r4, #0]
 8005d1a:	2c00      	cmp	r4, #0
 8005d1c:	d1f7      	bne.n	8005d0e <_fwalk_reent+0xe>
 8005d1e:	4638      	mov	r0, r7
 8005d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d24:	89ab      	ldrh	r3, [r5, #12]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d907      	bls.n	8005d3a <_fwalk_reent+0x3a>
 8005d2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	d003      	beq.n	8005d3a <_fwalk_reent+0x3a>
 8005d32:	4629      	mov	r1, r5
 8005d34:	4630      	mov	r0, r6
 8005d36:	47c0      	blx	r8
 8005d38:	4307      	orrs	r7, r0
 8005d3a:	3568      	adds	r5, #104	; 0x68
 8005d3c:	e7e9      	b.n	8005d12 <_fwalk_reent+0x12>

08005d3e <__retarget_lock_init_recursive>:
 8005d3e:	4770      	bx	lr

08005d40 <__retarget_lock_acquire_recursive>:
 8005d40:	4770      	bx	lr

08005d42 <__retarget_lock_release_recursive>:
 8005d42:	4770      	bx	lr

08005d44 <__swhatbuf_r>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	460e      	mov	r6, r1
 8005d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	b096      	sub	sp, #88	; 0x58
 8005d50:	4614      	mov	r4, r2
 8005d52:	461d      	mov	r5, r3
 8005d54:	da07      	bge.n	8005d66 <__swhatbuf_r+0x22>
 8005d56:	2300      	movs	r3, #0
 8005d58:	602b      	str	r3, [r5, #0]
 8005d5a:	89b3      	ldrh	r3, [r6, #12]
 8005d5c:	061a      	lsls	r2, r3, #24
 8005d5e:	d410      	bmi.n	8005d82 <__swhatbuf_r+0x3e>
 8005d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d64:	e00e      	b.n	8005d84 <__swhatbuf_r+0x40>
 8005d66:	466a      	mov	r2, sp
 8005d68:	f000 fc5e 	bl	8006628 <_fstat_r>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	dbf2      	blt.n	8005d56 <__swhatbuf_r+0x12>
 8005d70:	9a01      	ldr	r2, [sp, #4]
 8005d72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d7a:	425a      	negs	r2, r3
 8005d7c:	415a      	adcs	r2, r3
 8005d7e:	602a      	str	r2, [r5, #0]
 8005d80:	e7ee      	b.n	8005d60 <__swhatbuf_r+0x1c>
 8005d82:	2340      	movs	r3, #64	; 0x40
 8005d84:	2000      	movs	r0, #0
 8005d86:	6023      	str	r3, [r4, #0]
 8005d88:	b016      	add	sp, #88	; 0x58
 8005d8a:	bd70      	pop	{r4, r5, r6, pc}

08005d8c <__smakebuf_r>:
 8005d8c:	898b      	ldrh	r3, [r1, #12]
 8005d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d90:	079d      	lsls	r5, r3, #30
 8005d92:	4606      	mov	r6, r0
 8005d94:	460c      	mov	r4, r1
 8005d96:	d507      	bpl.n	8005da8 <__smakebuf_r+0x1c>
 8005d98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	6123      	str	r3, [r4, #16]
 8005da0:	2301      	movs	r3, #1
 8005da2:	6163      	str	r3, [r4, #20]
 8005da4:	b002      	add	sp, #8
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	ab01      	add	r3, sp, #4
 8005daa:	466a      	mov	r2, sp
 8005dac:	f7ff ffca 	bl	8005d44 <__swhatbuf_r>
 8005db0:	9900      	ldr	r1, [sp, #0]
 8005db2:	4605      	mov	r5, r0
 8005db4:	4630      	mov	r0, r6
 8005db6:	f000 f879 	bl	8005eac <_malloc_r>
 8005dba:	b948      	cbnz	r0, 8005dd0 <__smakebuf_r+0x44>
 8005dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dc0:	059a      	lsls	r2, r3, #22
 8005dc2:	d4ef      	bmi.n	8005da4 <__smakebuf_r+0x18>
 8005dc4:	f023 0303 	bic.w	r3, r3, #3
 8005dc8:	f043 0302 	orr.w	r3, r3, #2
 8005dcc:	81a3      	strh	r3, [r4, #12]
 8005dce:	e7e3      	b.n	8005d98 <__smakebuf_r+0xc>
 8005dd0:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <__smakebuf_r+0x7c>)
 8005dd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	6020      	str	r0, [r4, #0]
 8005dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ddc:	81a3      	strh	r3, [r4, #12]
 8005dde:	9b00      	ldr	r3, [sp, #0]
 8005de0:	6163      	str	r3, [r4, #20]
 8005de2:	9b01      	ldr	r3, [sp, #4]
 8005de4:	6120      	str	r0, [r4, #16]
 8005de6:	b15b      	cbz	r3, 8005e00 <__smakebuf_r+0x74>
 8005de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dec:	4630      	mov	r0, r6
 8005dee:	f000 fc2d 	bl	800664c <_isatty_r>
 8005df2:	b128      	cbz	r0, 8005e00 <__smakebuf_r+0x74>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	f023 0303 	bic.w	r3, r3, #3
 8005dfa:	f043 0301 	orr.w	r3, r3, #1
 8005dfe:	81a3      	strh	r3, [r4, #12]
 8005e00:	89a0      	ldrh	r0, [r4, #12]
 8005e02:	4305      	orrs	r5, r0
 8005e04:	81a5      	strh	r5, [r4, #12]
 8005e06:	e7cd      	b.n	8005da4 <__smakebuf_r+0x18>
 8005e08:	08005b9d 	.word	0x08005b9d

08005e0c <_free_r>:
 8005e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e0e:	2900      	cmp	r1, #0
 8005e10:	d048      	beq.n	8005ea4 <_free_r+0x98>
 8005e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e16:	9001      	str	r0, [sp, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8005e1e:	bfb8      	it	lt
 8005e20:	18e4      	addlt	r4, r4, r3
 8005e22:	f000 fc35 	bl	8006690 <__malloc_lock>
 8005e26:	4a20      	ldr	r2, [pc, #128]	; (8005ea8 <_free_r+0x9c>)
 8005e28:	9801      	ldr	r0, [sp, #4]
 8005e2a:	6813      	ldr	r3, [r2, #0]
 8005e2c:	4615      	mov	r5, r2
 8005e2e:	b933      	cbnz	r3, 8005e3e <_free_r+0x32>
 8005e30:	6063      	str	r3, [r4, #4]
 8005e32:	6014      	str	r4, [r2, #0]
 8005e34:	b003      	add	sp, #12
 8005e36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e3a:	f000 bc2f 	b.w	800669c <__malloc_unlock>
 8005e3e:	42a3      	cmp	r3, r4
 8005e40:	d90b      	bls.n	8005e5a <_free_r+0x4e>
 8005e42:	6821      	ldr	r1, [r4, #0]
 8005e44:	1862      	adds	r2, r4, r1
 8005e46:	4293      	cmp	r3, r2
 8005e48:	bf04      	itt	eq
 8005e4a:	681a      	ldreq	r2, [r3, #0]
 8005e4c:	685b      	ldreq	r3, [r3, #4]
 8005e4e:	6063      	str	r3, [r4, #4]
 8005e50:	bf04      	itt	eq
 8005e52:	1852      	addeq	r2, r2, r1
 8005e54:	6022      	streq	r2, [r4, #0]
 8005e56:	602c      	str	r4, [r5, #0]
 8005e58:	e7ec      	b.n	8005e34 <_free_r+0x28>
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	b10b      	cbz	r3, 8005e64 <_free_r+0x58>
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	d9fa      	bls.n	8005e5a <_free_r+0x4e>
 8005e64:	6811      	ldr	r1, [r2, #0]
 8005e66:	1855      	adds	r5, r2, r1
 8005e68:	42a5      	cmp	r5, r4
 8005e6a:	d10b      	bne.n	8005e84 <_free_r+0x78>
 8005e6c:	6824      	ldr	r4, [r4, #0]
 8005e6e:	4421      	add	r1, r4
 8005e70:	1854      	adds	r4, r2, r1
 8005e72:	42a3      	cmp	r3, r4
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	d1dd      	bne.n	8005e34 <_free_r+0x28>
 8005e78:	681c      	ldr	r4, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	6053      	str	r3, [r2, #4]
 8005e7e:	4421      	add	r1, r4
 8005e80:	6011      	str	r1, [r2, #0]
 8005e82:	e7d7      	b.n	8005e34 <_free_r+0x28>
 8005e84:	d902      	bls.n	8005e8c <_free_r+0x80>
 8005e86:	230c      	movs	r3, #12
 8005e88:	6003      	str	r3, [r0, #0]
 8005e8a:	e7d3      	b.n	8005e34 <_free_r+0x28>
 8005e8c:	6825      	ldr	r5, [r4, #0]
 8005e8e:	1961      	adds	r1, r4, r5
 8005e90:	428b      	cmp	r3, r1
 8005e92:	bf04      	itt	eq
 8005e94:	6819      	ldreq	r1, [r3, #0]
 8005e96:	685b      	ldreq	r3, [r3, #4]
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	bf04      	itt	eq
 8005e9c:	1949      	addeq	r1, r1, r5
 8005e9e:	6021      	streq	r1, [r4, #0]
 8005ea0:	6054      	str	r4, [r2, #4]
 8005ea2:	e7c7      	b.n	8005e34 <_free_r+0x28>
 8005ea4:	b003      	add	sp, #12
 8005ea6:	bd30      	pop	{r4, r5, pc}
 8005ea8:	2000009c 	.word	0x2000009c

08005eac <_malloc_r>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	1ccd      	adds	r5, r1, #3
 8005eb0:	f025 0503 	bic.w	r5, r5, #3
 8005eb4:	3508      	adds	r5, #8
 8005eb6:	2d0c      	cmp	r5, #12
 8005eb8:	bf38      	it	cc
 8005eba:	250c      	movcc	r5, #12
 8005ebc:	2d00      	cmp	r5, #0
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	db01      	blt.n	8005ec6 <_malloc_r+0x1a>
 8005ec2:	42a9      	cmp	r1, r5
 8005ec4:	d903      	bls.n	8005ece <_malloc_r+0x22>
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	6033      	str	r3, [r6, #0]
 8005eca:	2000      	movs	r0, #0
 8005ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ece:	f000 fbdf 	bl	8006690 <__malloc_lock>
 8005ed2:	4921      	ldr	r1, [pc, #132]	; (8005f58 <_malloc_r+0xac>)
 8005ed4:	680a      	ldr	r2, [r1, #0]
 8005ed6:	4614      	mov	r4, r2
 8005ed8:	b99c      	cbnz	r4, 8005f02 <_malloc_r+0x56>
 8005eda:	4f20      	ldr	r7, [pc, #128]	; (8005f5c <_malloc_r+0xb0>)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	b923      	cbnz	r3, 8005eea <_malloc_r+0x3e>
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f000 fb2a 	bl	800653c <_sbrk_r>
 8005ee8:	6038      	str	r0, [r7, #0]
 8005eea:	4629      	mov	r1, r5
 8005eec:	4630      	mov	r0, r6
 8005eee:	f000 fb25 	bl	800653c <_sbrk_r>
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	d123      	bne.n	8005f3e <_malloc_r+0x92>
 8005ef6:	230c      	movs	r3, #12
 8005ef8:	6033      	str	r3, [r6, #0]
 8005efa:	4630      	mov	r0, r6
 8005efc:	f000 fbce 	bl	800669c <__malloc_unlock>
 8005f00:	e7e3      	b.n	8005eca <_malloc_r+0x1e>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	1b5b      	subs	r3, r3, r5
 8005f06:	d417      	bmi.n	8005f38 <_malloc_r+0x8c>
 8005f08:	2b0b      	cmp	r3, #11
 8005f0a:	d903      	bls.n	8005f14 <_malloc_r+0x68>
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	441c      	add	r4, r3
 8005f10:	6025      	str	r5, [r4, #0]
 8005f12:	e004      	b.n	8005f1e <_malloc_r+0x72>
 8005f14:	6863      	ldr	r3, [r4, #4]
 8005f16:	42a2      	cmp	r2, r4
 8005f18:	bf0c      	ite	eq
 8005f1a:	600b      	streq	r3, [r1, #0]
 8005f1c:	6053      	strne	r3, [r2, #4]
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f000 fbbc 	bl	800669c <__malloc_unlock>
 8005f24:	f104 000b 	add.w	r0, r4, #11
 8005f28:	1d23      	adds	r3, r4, #4
 8005f2a:	f020 0007 	bic.w	r0, r0, #7
 8005f2e:	1ac2      	subs	r2, r0, r3
 8005f30:	d0cc      	beq.n	8005ecc <_malloc_r+0x20>
 8005f32:	1a1b      	subs	r3, r3, r0
 8005f34:	50a3      	str	r3, [r4, r2]
 8005f36:	e7c9      	b.n	8005ecc <_malloc_r+0x20>
 8005f38:	4622      	mov	r2, r4
 8005f3a:	6864      	ldr	r4, [r4, #4]
 8005f3c:	e7cc      	b.n	8005ed8 <_malloc_r+0x2c>
 8005f3e:	1cc4      	adds	r4, r0, #3
 8005f40:	f024 0403 	bic.w	r4, r4, #3
 8005f44:	42a0      	cmp	r0, r4
 8005f46:	d0e3      	beq.n	8005f10 <_malloc_r+0x64>
 8005f48:	1a21      	subs	r1, r4, r0
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	f000 faf6 	bl	800653c <_sbrk_r>
 8005f50:	3001      	adds	r0, #1
 8005f52:	d1dd      	bne.n	8005f10 <_malloc_r+0x64>
 8005f54:	e7cf      	b.n	8005ef6 <_malloc_r+0x4a>
 8005f56:	bf00      	nop
 8005f58:	2000009c 	.word	0x2000009c
 8005f5c:	200000a0 	.word	0x200000a0

08005f60 <__sfputc_r>:
 8005f60:	6893      	ldr	r3, [r2, #8]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	b410      	push	{r4}
 8005f68:	6093      	str	r3, [r2, #8]
 8005f6a:	da08      	bge.n	8005f7e <__sfputc_r+0x1e>
 8005f6c:	6994      	ldr	r4, [r2, #24]
 8005f6e:	42a3      	cmp	r3, r4
 8005f70:	db01      	blt.n	8005f76 <__sfputc_r+0x16>
 8005f72:	290a      	cmp	r1, #10
 8005f74:	d103      	bne.n	8005f7e <__sfputc_r+0x1e>
 8005f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f7a:	f7ff bc69 	b.w	8005850 <__swbuf_r>
 8005f7e:	6813      	ldr	r3, [r2, #0]
 8005f80:	1c58      	adds	r0, r3, #1
 8005f82:	6010      	str	r0, [r2, #0]
 8005f84:	7019      	strb	r1, [r3, #0]
 8005f86:	4608      	mov	r0, r1
 8005f88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <__sfputs_r>:
 8005f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f90:	4606      	mov	r6, r0
 8005f92:	460f      	mov	r7, r1
 8005f94:	4614      	mov	r4, r2
 8005f96:	18d5      	adds	r5, r2, r3
 8005f98:	42ac      	cmp	r4, r5
 8005f9a:	d101      	bne.n	8005fa0 <__sfputs_r+0x12>
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	e007      	b.n	8005fb0 <__sfputs_r+0x22>
 8005fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fa4:	463a      	mov	r2, r7
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f7ff ffda 	bl	8005f60 <__sfputc_r>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d1f3      	bne.n	8005f98 <__sfputs_r+0xa>
 8005fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fb4 <_vfiprintf_r>:
 8005fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb8:	460d      	mov	r5, r1
 8005fba:	b09d      	sub	sp, #116	; 0x74
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	4698      	mov	r8, r3
 8005fc0:	4606      	mov	r6, r0
 8005fc2:	b118      	cbz	r0, 8005fcc <_vfiprintf_r+0x18>
 8005fc4:	6983      	ldr	r3, [r0, #24]
 8005fc6:	b90b      	cbnz	r3, 8005fcc <_vfiprintf_r+0x18>
 8005fc8:	f7ff fe1c 	bl	8005c04 <__sinit>
 8005fcc:	4b89      	ldr	r3, [pc, #548]	; (80061f4 <_vfiprintf_r+0x240>)
 8005fce:	429d      	cmp	r5, r3
 8005fd0:	d11b      	bne.n	800600a <_vfiprintf_r+0x56>
 8005fd2:	6875      	ldr	r5, [r6, #4]
 8005fd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fd6:	07d9      	lsls	r1, r3, #31
 8005fd8:	d405      	bmi.n	8005fe6 <_vfiprintf_r+0x32>
 8005fda:	89ab      	ldrh	r3, [r5, #12]
 8005fdc:	059a      	lsls	r2, r3, #22
 8005fde:	d402      	bmi.n	8005fe6 <_vfiprintf_r+0x32>
 8005fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fe2:	f7ff fead 	bl	8005d40 <__retarget_lock_acquire_recursive>
 8005fe6:	89ab      	ldrh	r3, [r5, #12]
 8005fe8:	071b      	lsls	r3, r3, #28
 8005fea:	d501      	bpl.n	8005ff0 <_vfiprintf_r+0x3c>
 8005fec:	692b      	ldr	r3, [r5, #16]
 8005fee:	b9eb      	cbnz	r3, 800602c <_vfiprintf_r+0x78>
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	f7ff fc7e 	bl	80058f4 <__swsetup_r>
 8005ff8:	b1c0      	cbz	r0, 800602c <_vfiprintf_r+0x78>
 8005ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ffc:	07dc      	lsls	r4, r3, #31
 8005ffe:	d50e      	bpl.n	800601e <_vfiprintf_r+0x6a>
 8006000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006004:	b01d      	add	sp, #116	; 0x74
 8006006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600a:	4b7b      	ldr	r3, [pc, #492]	; (80061f8 <_vfiprintf_r+0x244>)
 800600c:	429d      	cmp	r5, r3
 800600e:	d101      	bne.n	8006014 <_vfiprintf_r+0x60>
 8006010:	68b5      	ldr	r5, [r6, #8]
 8006012:	e7df      	b.n	8005fd4 <_vfiprintf_r+0x20>
 8006014:	4b79      	ldr	r3, [pc, #484]	; (80061fc <_vfiprintf_r+0x248>)
 8006016:	429d      	cmp	r5, r3
 8006018:	bf08      	it	eq
 800601a:	68f5      	ldreq	r5, [r6, #12]
 800601c:	e7da      	b.n	8005fd4 <_vfiprintf_r+0x20>
 800601e:	89ab      	ldrh	r3, [r5, #12]
 8006020:	0598      	lsls	r0, r3, #22
 8006022:	d4ed      	bmi.n	8006000 <_vfiprintf_r+0x4c>
 8006024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006026:	f7ff fe8c 	bl	8005d42 <__retarget_lock_release_recursive>
 800602a:	e7e9      	b.n	8006000 <_vfiprintf_r+0x4c>
 800602c:	2300      	movs	r3, #0
 800602e:	9309      	str	r3, [sp, #36]	; 0x24
 8006030:	2320      	movs	r3, #32
 8006032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006036:	f8cd 800c 	str.w	r8, [sp, #12]
 800603a:	2330      	movs	r3, #48	; 0x30
 800603c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006200 <_vfiprintf_r+0x24c>
 8006040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006044:	f04f 0901 	mov.w	r9, #1
 8006048:	4623      	mov	r3, r4
 800604a:	469a      	mov	sl, r3
 800604c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006050:	b10a      	cbz	r2, 8006056 <_vfiprintf_r+0xa2>
 8006052:	2a25      	cmp	r2, #37	; 0x25
 8006054:	d1f9      	bne.n	800604a <_vfiprintf_r+0x96>
 8006056:	ebba 0b04 	subs.w	fp, sl, r4
 800605a:	d00b      	beq.n	8006074 <_vfiprintf_r+0xc0>
 800605c:	465b      	mov	r3, fp
 800605e:	4622      	mov	r2, r4
 8006060:	4629      	mov	r1, r5
 8006062:	4630      	mov	r0, r6
 8006064:	f7ff ff93 	bl	8005f8e <__sfputs_r>
 8006068:	3001      	adds	r0, #1
 800606a:	f000 80aa 	beq.w	80061c2 <_vfiprintf_r+0x20e>
 800606e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006070:	445a      	add	r2, fp
 8006072:	9209      	str	r2, [sp, #36]	; 0x24
 8006074:	f89a 3000 	ldrb.w	r3, [sl]
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 80a2 	beq.w	80061c2 <_vfiprintf_r+0x20e>
 800607e:	2300      	movs	r3, #0
 8006080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006088:	f10a 0a01 	add.w	sl, sl, #1
 800608c:	9304      	str	r3, [sp, #16]
 800608e:	9307      	str	r3, [sp, #28]
 8006090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006094:	931a      	str	r3, [sp, #104]	; 0x68
 8006096:	4654      	mov	r4, sl
 8006098:	2205      	movs	r2, #5
 800609a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609e:	4858      	ldr	r0, [pc, #352]	; (8006200 <_vfiprintf_r+0x24c>)
 80060a0:	f7fa f896 	bl	80001d0 <memchr>
 80060a4:	9a04      	ldr	r2, [sp, #16]
 80060a6:	b9d8      	cbnz	r0, 80060e0 <_vfiprintf_r+0x12c>
 80060a8:	06d1      	lsls	r1, r2, #27
 80060aa:	bf44      	itt	mi
 80060ac:	2320      	movmi	r3, #32
 80060ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060b2:	0713      	lsls	r3, r2, #28
 80060b4:	bf44      	itt	mi
 80060b6:	232b      	movmi	r3, #43	; 0x2b
 80060b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060bc:	f89a 3000 	ldrb.w	r3, [sl]
 80060c0:	2b2a      	cmp	r3, #42	; 0x2a
 80060c2:	d015      	beq.n	80060f0 <_vfiprintf_r+0x13c>
 80060c4:	9a07      	ldr	r2, [sp, #28]
 80060c6:	4654      	mov	r4, sl
 80060c8:	2000      	movs	r0, #0
 80060ca:	f04f 0c0a 	mov.w	ip, #10
 80060ce:	4621      	mov	r1, r4
 80060d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060d4:	3b30      	subs	r3, #48	; 0x30
 80060d6:	2b09      	cmp	r3, #9
 80060d8:	d94e      	bls.n	8006178 <_vfiprintf_r+0x1c4>
 80060da:	b1b0      	cbz	r0, 800610a <_vfiprintf_r+0x156>
 80060dc:	9207      	str	r2, [sp, #28]
 80060de:	e014      	b.n	800610a <_vfiprintf_r+0x156>
 80060e0:	eba0 0308 	sub.w	r3, r0, r8
 80060e4:	fa09 f303 	lsl.w	r3, r9, r3
 80060e8:	4313      	orrs	r3, r2
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	46a2      	mov	sl, r4
 80060ee:	e7d2      	b.n	8006096 <_vfiprintf_r+0xe2>
 80060f0:	9b03      	ldr	r3, [sp, #12]
 80060f2:	1d19      	adds	r1, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	9103      	str	r1, [sp, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bfbb      	ittet	lt
 80060fc:	425b      	neglt	r3, r3
 80060fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006102:	9307      	strge	r3, [sp, #28]
 8006104:	9307      	strlt	r3, [sp, #28]
 8006106:	bfb8      	it	lt
 8006108:	9204      	strlt	r2, [sp, #16]
 800610a:	7823      	ldrb	r3, [r4, #0]
 800610c:	2b2e      	cmp	r3, #46	; 0x2e
 800610e:	d10c      	bne.n	800612a <_vfiprintf_r+0x176>
 8006110:	7863      	ldrb	r3, [r4, #1]
 8006112:	2b2a      	cmp	r3, #42	; 0x2a
 8006114:	d135      	bne.n	8006182 <_vfiprintf_r+0x1ce>
 8006116:	9b03      	ldr	r3, [sp, #12]
 8006118:	1d1a      	adds	r2, r3, #4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	9203      	str	r2, [sp, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	bfb8      	it	lt
 8006122:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006126:	3402      	adds	r4, #2
 8006128:	9305      	str	r3, [sp, #20]
 800612a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006210 <_vfiprintf_r+0x25c>
 800612e:	7821      	ldrb	r1, [r4, #0]
 8006130:	2203      	movs	r2, #3
 8006132:	4650      	mov	r0, sl
 8006134:	f7fa f84c 	bl	80001d0 <memchr>
 8006138:	b140      	cbz	r0, 800614c <_vfiprintf_r+0x198>
 800613a:	2340      	movs	r3, #64	; 0x40
 800613c:	eba0 000a 	sub.w	r0, r0, sl
 8006140:	fa03 f000 	lsl.w	r0, r3, r0
 8006144:	9b04      	ldr	r3, [sp, #16]
 8006146:	4303      	orrs	r3, r0
 8006148:	3401      	adds	r4, #1
 800614a:	9304      	str	r3, [sp, #16]
 800614c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006150:	482c      	ldr	r0, [pc, #176]	; (8006204 <_vfiprintf_r+0x250>)
 8006152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006156:	2206      	movs	r2, #6
 8006158:	f7fa f83a 	bl	80001d0 <memchr>
 800615c:	2800      	cmp	r0, #0
 800615e:	d03f      	beq.n	80061e0 <_vfiprintf_r+0x22c>
 8006160:	4b29      	ldr	r3, [pc, #164]	; (8006208 <_vfiprintf_r+0x254>)
 8006162:	bb1b      	cbnz	r3, 80061ac <_vfiprintf_r+0x1f8>
 8006164:	9b03      	ldr	r3, [sp, #12]
 8006166:	3307      	adds	r3, #7
 8006168:	f023 0307 	bic.w	r3, r3, #7
 800616c:	3308      	adds	r3, #8
 800616e:	9303      	str	r3, [sp, #12]
 8006170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006172:	443b      	add	r3, r7
 8006174:	9309      	str	r3, [sp, #36]	; 0x24
 8006176:	e767      	b.n	8006048 <_vfiprintf_r+0x94>
 8006178:	fb0c 3202 	mla	r2, ip, r2, r3
 800617c:	460c      	mov	r4, r1
 800617e:	2001      	movs	r0, #1
 8006180:	e7a5      	b.n	80060ce <_vfiprintf_r+0x11a>
 8006182:	2300      	movs	r3, #0
 8006184:	3401      	adds	r4, #1
 8006186:	9305      	str	r3, [sp, #20]
 8006188:	4619      	mov	r1, r3
 800618a:	f04f 0c0a 	mov.w	ip, #10
 800618e:	4620      	mov	r0, r4
 8006190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006194:	3a30      	subs	r2, #48	; 0x30
 8006196:	2a09      	cmp	r2, #9
 8006198:	d903      	bls.n	80061a2 <_vfiprintf_r+0x1ee>
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0c5      	beq.n	800612a <_vfiprintf_r+0x176>
 800619e:	9105      	str	r1, [sp, #20]
 80061a0:	e7c3      	b.n	800612a <_vfiprintf_r+0x176>
 80061a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80061a6:	4604      	mov	r4, r0
 80061a8:	2301      	movs	r3, #1
 80061aa:	e7f0      	b.n	800618e <_vfiprintf_r+0x1da>
 80061ac:	ab03      	add	r3, sp, #12
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	462a      	mov	r2, r5
 80061b2:	4b16      	ldr	r3, [pc, #88]	; (800620c <_vfiprintf_r+0x258>)
 80061b4:	a904      	add	r1, sp, #16
 80061b6:	4630      	mov	r0, r6
 80061b8:	f3af 8000 	nop.w
 80061bc:	4607      	mov	r7, r0
 80061be:	1c78      	adds	r0, r7, #1
 80061c0:	d1d6      	bne.n	8006170 <_vfiprintf_r+0x1bc>
 80061c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061c4:	07d9      	lsls	r1, r3, #31
 80061c6:	d405      	bmi.n	80061d4 <_vfiprintf_r+0x220>
 80061c8:	89ab      	ldrh	r3, [r5, #12]
 80061ca:	059a      	lsls	r2, r3, #22
 80061cc:	d402      	bmi.n	80061d4 <_vfiprintf_r+0x220>
 80061ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061d0:	f7ff fdb7 	bl	8005d42 <__retarget_lock_release_recursive>
 80061d4:	89ab      	ldrh	r3, [r5, #12]
 80061d6:	065b      	lsls	r3, r3, #25
 80061d8:	f53f af12 	bmi.w	8006000 <_vfiprintf_r+0x4c>
 80061dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061de:	e711      	b.n	8006004 <_vfiprintf_r+0x50>
 80061e0:	ab03      	add	r3, sp, #12
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	462a      	mov	r2, r5
 80061e6:	4b09      	ldr	r3, [pc, #36]	; (800620c <_vfiprintf_r+0x258>)
 80061e8:	a904      	add	r1, sp, #16
 80061ea:	4630      	mov	r0, r6
 80061ec:	f000 f880 	bl	80062f0 <_printf_i>
 80061f0:	e7e4      	b.n	80061bc <_vfiprintf_r+0x208>
 80061f2:	bf00      	nop
 80061f4:	080067d4 	.word	0x080067d4
 80061f8:	080067f4 	.word	0x080067f4
 80061fc:	080067b4 	.word	0x080067b4
 8006200:	08006814 	.word	0x08006814
 8006204:	0800681e 	.word	0x0800681e
 8006208:	00000000 	.word	0x00000000
 800620c:	08005f8f 	.word	0x08005f8f
 8006210:	0800681a 	.word	0x0800681a

08006214 <_printf_common>:
 8006214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006218:	4616      	mov	r6, r2
 800621a:	4699      	mov	r9, r3
 800621c:	688a      	ldr	r2, [r1, #8]
 800621e:	690b      	ldr	r3, [r1, #16]
 8006220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006224:	4293      	cmp	r3, r2
 8006226:	bfb8      	it	lt
 8006228:	4613      	movlt	r3, r2
 800622a:	6033      	str	r3, [r6, #0]
 800622c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006230:	4607      	mov	r7, r0
 8006232:	460c      	mov	r4, r1
 8006234:	b10a      	cbz	r2, 800623a <_printf_common+0x26>
 8006236:	3301      	adds	r3, #1
 8006238:	6033      	str	r3, [r6, #0]
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	0699      	lsls	r1, r3, #26
 800623e:	bf42      	ittt	mi
 8006240:	6833      	ldrmi	r3, [r6, #0]
 8006242:	3302      	addmi	r3, #2
 8006244:	6033      	strmi	r3, [r6, #0]
 8006246:	6825      	ldr	r5, [r4, #0]
 8006248:	f015 0506 	ands.w	r5, r5, #6
 800624c:	d106      	bne.n	800625c <_printf_common+0x48>
 800624e:	f104 0a19 	add.w	sl, r4, #25
 8006252:	68e3      	ldr	r3, [r4, #12]
 8006254:	6832      	ldr	r2, [r6, #0]
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	42ab      	cmp	r3, r5
 800625a:	dc26      	bgt.n	80062aa <_printf_common+0x96>
 800625c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006260:	1e13      	subs	r3, r2, #0
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	bf18      	it	ne
 8006266:	2301      	movne	r3, #1
 8006268:	0692      	lsls	r2, r2, #26
 800626a:	d42b      	bmi.n	80062c4 <_printf_common+0xb0>
 800626c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006270:	4649      	mov	r1, r9
 8006272:	4638      	mov	r0, r7
 8006274:	47c0      	blx	r8
 8006276:	3001      	adds	r0, #1
 8006278:	d01e      	beq.n	80062b8 <_printf_common+0xa4>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	68e5      	ldr	r5, [r4, #12]
 800627e:	6832      	ldr	r2, [r6, #0]
 8006280:	f003 0306 	and.w	r3, r3, #6
 8006284:	2b04      	cmp	r3, #4
 8006286:	bf08      	it	eq
 8006288:	1aad      	subeq	r5, r5, r2
 800628a:	68a3      	ldr	r3, [r4, #8]
 800628c:	6922      	ldr	r2, [r4, #16]
 800628e:	bf0c      	ite	eq
 8006290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006294:	2500      	movne	r5, #0
 8006296:	4293      	cmp	r3, r2
 8006298:	bfc4      	itt	gt
 800629a:	1a9b      	subgt	r3, r3, r2
 800629c:	18ed      	addgt	r5, r5, r3
 800629e:	2600      	movs	r6, #0
 80062a0:	341a      	adds	r4, #26
 80062a2:	42b5      	cmp	r5, r6
 80062a4:	d11a      	bne.n	80062dc <_printf_common+0xc8>
 80062a6:	2000      	movs	r0, #0
 80062a8:	e008      	b.n	80062bc <_printf_common+0xa8>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4652      	mov	r2, sl
 80062ae:	4649      	mov	r1, r9
 80062b0:	4638      	mov	r0, r7
 80062b2:	47c0      	blx	r8
 80062b4:	3001      	adds	r0, #1
 80062b6:	d103      	bne.n	80062c0 <_printf_common+0xac>
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c0:	3501      	adds	r5, #1
 80062c2:	e7c6      	b.n	8006252 <_printf_common+0x3e>
 80062c4:	18e1      	adds	r1, r4, r3
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	2030      	movs	r0, #48	; 0x30
 80062ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062ce:	4422      	add	r2, r4
 80062d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062d8:	3302      	adds	r3, #2
 80062da:	e7c7      	b.n	800626c <_printf_common+0x58>
 80062dc:	2301      	movs	r3, #1
 80062de:	4622      	mov	r2, r4
 80062e0:	4649      	mov	r1, r9
 80062e2:	4638      	mov	r0, r7
 80062e4:	47c0      	blx	r8
 80062e6:	3001      	adds	r0, #1
 80062e8:	d0e6      	beq.n	80062b8 <_printf_common+0xa4>
 80062ea:	3601      	adds	r6, #1
 80062ec:	e7d9      	b.n	80062a2 <_printf_common+0x8e>
	...

080062f0 <_printf_i>:
 80062f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062f4:	460c      	mov	r4, r1
 80062f6:	4691      	mov	r9, r2
 80062f8:	7e27      	ldrb	r7, [r4, #24]
 80062fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062fc:	2f78      	cmp	r7, #120	; 0x78
 80062fe:	4680      	mov	r8, r0
 8006300:	469a      	mov	sl, r3
 8006302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006306:	d807      	bhi.n	8006318 <_printf_i+0x28>
 8006308:	2f62      	cmp	r7, #98	; 0x62
 800630a:	d80a      	bhi.n	8006322 <_printf_i+0x32>
 800630c:	2f00      	cmp	r7, #0
 800630e:	f000 80d8 	beq.w	80064c2 <_printf_i+0x1d2>
 8006312:	2f58      	cmp	r7, #88	; 0x58
 8006314:	f000 80a3 	beq.w	800645e <_printf_i+0x16e>
 8006318:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800631c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006320:	e03a      	b.n	8006398 <_printf_i+0xa8>
 8006322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006326:	2b15      	cmp	r3, #21
 8006328:	d8f6      	bhi.n	8006318 <_printf_i+0x28>
 800632a:	a001      	add	r0, pc, #4	; (adr r0, 8006330 <_printf_i+0x40>)
 800632c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006330:	08006389 	.word	0x08006389
 8006334:	0800639d 	.word	0x0800639d
 8006338:	08006319 	.word	0x08006319
 800633c:	08006319 	.word	0x08006319
 8006340:	08006319 	.word	0x08006319
 8006344:	08006319 	.word	0x08006319
 8006348:	0800639d 	.word	0x0800639d
 800634c:	08006319 	.word	0x08006319
 8006350:	08006319 	.word	0x08006319
 8006354:	08006319 	.word	0x08006319
 8006358:	08006319 	.word	0x08006319
 800635c:	080064a9 	.word	0x080064a9
 8006360:	080063cd 	.word	0x080063cd
 8006364:	0800648b 	.word	0x0800648b
 8006368:	08006319 	.word	0x08006319
 800636c:	08006319 	.word	0x08006319
 8006370:	080064cb 	.word	0x080064cb
 8006374:	08006319 	.word	0x08006319
 8006378:	080063cd 	.word	0x080063cd
 800637c:	08006319 	.word	0x08006319
 8006380:	08006319 	.word	0x08006319
 8006384:	08006493 	.word	0x08006493
 8006388:	680b      	ldr	r3, [r1, #0]
 800638a:	1d1a      	adds	r2, r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	600a      	str	r2, [r1, #0]
 8006390:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006398:	2301      	movs	r3, #1
 800639a:	e0a3      	b.n	80064e4 <_printf_i+0x1f4>
 800639c:	6825      	ldr	r5, [r4, #0]
 800639e:	6808      	ldr	r0, [r1, #0]
 80063a0:	062e      	lsls	r6, r5, #24
 80063a2:	f100 0304 	add.w	r3, r0, #4
 80063a6:	d50a      	bpl.n	80063be <_printf_i+0xce>
 80063a8:	6805      	ldr	r5, [r0, #0]
 80063aa:	600b      	str	r3, [r1, #0]
 80063ac:	2d00      	cmp	r5, #0
 80063ae:	da03      	bge.n	80063b8 <_printf_i+0xc8>
 80063b0:	232d      	movs	r3, #45	; 0x2d
 80063b2:	426d      	negs	r5, r5
 80063b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b8:	485e      	ldr	r0, [pc, #376]	; (8006534 <_printf_i+0x244>)
 80063ba:	230a      	movs	r3, #10
 80063bc:	e019      	b.n	80063f2 <_printf_i+0x102>
 80063be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80063c2:	6805      	ldr	r5, [r0, #0]
 80063c4:	600b      	str	r3, [r1, #0]
 80063c6:	bf18      	it	ne
 80063c8:	b22d      	sxthne	r5, r5
 80063ca:	e7ef      	b.n	80063ac <_printf_i+0xbc>
 80063cc:	680b      	ldr	r3, [r1, #0]
 80063ce:	6825      	ldr	r5, [r4, #0]
 80063d0:	1d18      	adds	r0, r3, #4
 80063d2:	6008      	str	r0, [r1, #0]
 80063d4:	0628      	lsls	r0, r5, #24
 80063d6:	d501      	bpl.n	80063dc <_printf_i+0xec>
 80063d8:	681d      	ldr	r5, [r3, #0]
 80063da:	e002      	b.n	80063e2 <_printf_i+0xf2>
 80063dc:	0669      	lsls	r1, r5, #25
 80063de:	d5fb      	bpl.n	80063d8 <_printf_i+0xe8>
 80063e0:	881d      	ldrh	r5, [r3, #0]
 80063e2:	4854      	ldr	r0, [pc, #336]	; (8006534 <_printf_i+0x244>)
 80063e4:	2f6f      	cmp	r7, #111	; 0x6f
 80063e6:	bf0c      	ite	eq
 80063e8:	2308      	moveq	r3, #8
 80063ea:	230a      	movne	r3, #10
 80063ec:	2100      	movs	r1, #0
 80063ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063f2:	6866      	ldr	r6, [r4, #4]
 80063f4:	60a6      	str	r6, [r4, #8]
 80063f6:	2e00      	cmp	r6, #0
 80063f8:	bfa2      	ittt	ge
 80063fa:	6821      	ldrge	r1, [r4, #0]
 80063fc:	f021 0104 	bicge.w	r1, r1, #4
 8006400:	6021      	strge	r1, [r4, #0]
 8006402:	b90d      	cbnz	r5, 8006408 <_printf_i+0x118>
 8006404:	2e00      	cmp	r6, #0
 8006406:	d04d      	beq.n	80064a4 <_printf_i+0x1b4>
 8006408:	4616      	mov	r6, r2
 800640a:	fbb5 f1f3 	udiv	r1, r5, r3
 800640e:	fb03 5711 	mls	r7, r3, r1, r5
 8006412:	5dc7      	ldrb	r7, [r0, r7]
 8006414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006418:	462f      	mov	r7, r5
 800641a:	42bb      	cmp	r3, r7
 800641c:	460d      	mov	r5, r1
 800641e:	d9f4      	bls.n	800640a <_printf_i+0x11a>
 8006420:	2b08      	cmp	r3, #8
 8006422:	d10b      	bne.n	800643c <_printf_i+0x14c>
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	07df      	lsls	r7, r3, #31
 8006428:	d508      	bpl.n	800643c <_printf_i+0x14c>
 800642a:	6923      	ldr	r3, [r4, #16]
 800642c:	6861      	ldr	r1, [r4, #4]
 800642e:	4299      	cmp	r1, r3
 8006430:	bfde      	ittt	le
 8006432:	2330      	movle	r3, #48	; 0x30
 8006434:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006438:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800643c:	1b92      	subs	r2, r2, r6
 800643e:	6122      	str	r2, [r4, #16]
 8006440:	f8cd a000 	str.w	sl, [sp]
 8006444:	464b      	mov	r3, r9
 8006446:	aa03      	add	r2, sp, #12
 8006448:	4621      	mov	r1, r4
 800644a:	4640      	mov	r0, r8
 800644c:	f7ff fee2 	bl	8006214 <_printf_common>
 8006450:	3001      	adds	r0, #1
 8006452:	d14c      	bne.n	80064ee <_printf_i+0x1fe>
 8006454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006458:	b004      	add	sp, #16
 800645a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645e:	4835      	ldr	r0, [pc, #212]	; (8006534 <_printf_i+0x244>)
 8006460:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	680e      	ldr	r6, [r1, #0]
 8006468:	061f      	lsls	r7, r3, #24
 800646a:	f856 5b04 	ldr.w	r5, [r6], #4
 800646e:	600e      	str	r6, [r1, #0]
 8006470:	d514      	bpl.n	800649c <_printf_i+0x1ac>
 8006472:	07d9      	lsls	r1, r3, #31
 8006474:	bf44      	itt	mi
 8006476:	f043 0320 	orrmi.w	r3, r3, #32
 800647a:	6023      	strmi	r3, [r4, #0]
 800647c:	b91d      	cbnz	r5, 8006486 <_printf_i+0x196>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	f023 0320 	bic.w	r3, r3, #32
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	2310      	movs	r3, #16
 8006488:	e7b0      	b.n	80063ec <_printf_i+0xfc>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	f043 0320 	orr.w	r3, r3, #32
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	2378      	movs	r3, #120	; 0x78
 8006494:	4828      	ldr	r0, [pc, #160]	; (8006538 <_printf_i+0x248>)
 8006496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800649a:	e7e3      	b.n	8006464 <_printf_i+0x174>
 800649c:	065e      	lsls	r6, r3, #25
 800649e:	bf48      	it	mi
 80064a0:	b2ad      	uxthmi	r5, r5
 80064a2:	e7e6      	b.n	8006472 <_printf_i+0x182>
 80064a4:	4616      	mov	r6, r2
 80064a6:	e7bb      	b.n	8006420 <_printf_i+0x130>
 80064a8:	680b      	ldr	r3, [r1, #0]
 80064aa:	6826      	ldr	r6, [r4, #0]
 80064ac:	6960      	ldr	r0, [r4, #20]
 80064ae:	1d1d      	adds	r5, r3, #4
 80064b0:	600d      	str	r5, [r1, #0]
 80064b2:	0635      	lsls	r5, r6, #24
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	d501      	bpl.n	80064bc <_printf_i+0x1cc>
 80064b8:	6018      	str	r0, [r3, #0]
 80064ba:	e002      	b.n	80064c2 <_printf_i+0x1d2>
 80064bc:	0671      	lsls	r1, r6, #25
 80064be:	d5fb      	bpl.n	80064b8 <_printf_i+0x1c8>
 80064c0:	8018      	strh	r0, [r3, #0]
 80064c2:	2300      	movs	r3, #0
 80064c4:	6123      	str	r3, [r4, #16]
 80064c6:	4616      	mov	r6, r2
 80064c8:	e7ba      	b.n	8006440 <_printf_i+0x150>
 80064ca:	680b      	ldr	r3, [r1, #0]
 80064cc:	1d1a      	adds	r2, r3, #4
 80064ce:	600a      	str	r2, [r1, #0]
 80064d0:	681e      	ldr	r6, [r3, #0]
 80064d2:	6862      	ldr	r2, [r4, #4]
 80064d4:	2100      	movs	r1, #0
 80064d6:	4630      	mov	r0, r6
 80064d8:	f7f9 fe7a 	bl	80001d0 <memchr>
 80064dc:	b108      	cbz	r0, 80064e2 <_printf_i+0x1f2>
 80064de:	1b80      	subs	r0, r0, r6
 80064e0:	6060      	str	r0, [r4, #4]
 80064e2:	6863      	ldr	r3, [r4, #4]
 80064e4:	6123      	str	r3, [r4, #16]
 80064e6:	2300      	movs	r3, #0
 80064e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ec:	e7a8      	b.n	8006440 <_printf_i+0x150>
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	4632      	mov	r2, r6
 80064f2:	4649      	mov	r1, r9
 80064f4:	4640      	mov	r0, r8
 80064f6:	47d0      	blx	sl
 80064f8:	3001      	adds	r0, #1
 80064fa:	d0ab      	beq.n	8006454 <_printf_i+0x164>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	079b      	lsls	r3, r3, #30
 8006500:	d413      	bmi.n	800652a <_printf_i+0x23a>
 8006502:	68e0      	ldr	r0, [r4, #12]
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	4298      	cmp	r0, r3
 8006508:	bfb8      	it	lt
 800650a:	4618      	movlt	r0, r3
 800650c:	e7a4      	b.n	8006458 <_printf_i+0x168>
 800650e:	2301      	movs	r3, #1
 8006510:	4632      	mov	r2, r6
 8006512:	4649      	mov	r1, r9
 8006514:	4640      	mov	r0, r8
 8006516:	47d0      	blx	sl
 8006518:	3001      	adds	r0, #1
 800651a:	d09b      	beq.n	8006454 <_printf_i+0x164>
 800651c:	3501      	adds	r5, #1
 800651e:	68e3      	ldr	r3, [r4, #12]
 8006520:	9903      	ldr	r1, [sp, #12]
 8006522:	1a5b      	subs	r3, r3, r1
 8006524:	42ab      	cmp	r3, r5
 8006526:	dcf2      	bgt.n	800650e <_printf_i+0x21e>
 8006528:	e7eb      	b.n	8006502 <_printf_i+0x212>
 800652a:	2500      	movs	r5, #0
 800652c:	f104 0619 	add.w	r6, r4, #25
 8006530:	e7f5      	b.n	800651e <_printf_i+0x22e>
 8006532:	bf00      	nop
 8006534:	08006825 	.word	0x08006825
 8006538:	08006836 	.word	0x08006836

0800653c <_sbrk_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4d06      	ldr	r5, [pc, #24]	; (8006558 <_sbrk_r+0x1c>)
 8006540:	2300      	movs	r3, #0
 8006542:	4604      	mov	r4, r0
 8006544:	4608      	mov	r0, r1
 8006546:	602b      	str	r3, [r5, #0]
 8006548:	f7fa fbb6 	bl	8000cb8 <_sbrk>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_sbrk_r+0x1a>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_sbrk_r+0x1a>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	20000354 	.word	0x20000354

0800655c <__sread>:
 800655c:	b510      	push	{r4, lr}
 800655e:	460c      	mov	r4, r1
 8006560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006564:	f000 f8a0 	bl	80066a8 <_read_r>
 8006568:	2800      	cmp	r0, #0
 800656a:	bfab      	itete	ge
 800656c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800656e:	89a3      	ldrhlt	r3, [r4, #12]
 8006570:	181b      	addge	r3, r3, r0
 8006572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006576:	bfac      	ite	ge
 8006578:	6563      	strge	r3, [r4, #84]	; 0x54
 800657a:	81a3      	strhlt	r3, [r4, #12]
 800657c:	bd10      	pop	{r4, pc}

0800657e <__swrite>:
 800657e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006582:	461f      	mov	r7, r3
 8006584:	898b      	ldrh	r3, [r1, #12]
 8006586:	05db      	lsls	r3, r3, #23
 8006588:	4605      	mov	r5, r0
 800658a:	460c      	mov	r4, r1
 800658c:	4616      	mov	r6, r2
 800658e:	d505      	bpl.n	800659c <__swrite+0x1e>
 8006590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006594:	2302      	movs	r3, #2
 8006596:	2200      	movs	r2, #0
 8006598:	f000 f868 	bl	800666c <_lseek_r>
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	4632      	mov	r2, r6
 80065aa:	463b      	mov	r3, r7
 80065ac:	4628      	mov	r0, r5
 80065ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065b2:	f000 b817 	b.w	80065e4 <_write_r>

080065b6 <__sseek>:
 80065b6:	b510      	push	{r4, lr}
 80065b8:	460c      	mov	r4, r1
 80065ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065be:	f000 f855 	bl	800666c <_lseek_r>
 80065c2:	1c43      	adds	r3, r0, #1
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	bf15      	itete	ne
 80065c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80065ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065d2:	81a3      	strheq	r3, [r4, #12]
 80065d4:	bf18      	it	ne
 80065d6:	81a3      	strhne	r3, [r4, #12]
 80065d8:	bd10      	pop	{r4, pc}

080065da <__sclose>:
 80065da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065de:	f000 b813 	b.w	8006608 <_close_r>
	...

080065e4 <_write_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4d07      	ldr	r5, [pc, #28]	; (8006604 <_write_r+0x20>)
 80065e8:	4604      	mov	r4, r0
 80065ea:	4608      	mov	r0, r1
 80065ec:	4611      	mov	r1, r2
 80065ee:	2200      	movs	r2, #0
 80065f0:	602a      	str	r2, [r5, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	f7f9 fefa 	bl	80003ec <_write>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <_write_r+0x1e>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	b103      	cbz	r3, 8006602 <_write_r+0x1e>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	20000354 	.word	0x20000354

08006608 <_close_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4d06      	ldr	r5, [pc, #24]	; (8006624 <_close_r+0x1c>)
 800660c:	2300      	movs	r3, #0
 800660e:	4604      	mov	r4, r0
 8006610:	4608      	mov	r0, r1
 8006612:	602b      	str	r3, [r5, #0]
 8006614:	f7fa fb1b 	bl	8000c4e <_close>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_close_r+0x1a>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_close_r+0x1a>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	20000354 	.word	0x20000354

08006628 <_fstat_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4d07      	ldr	r5, [pc, #28]	; (8006648 <_fstat_r+0x20>)
 800662c:	2300      	movs	r3, #0
 800662e:	4604      	mov	r4, r0
 8006630:	4608      	mov	r0, r1
 8006632:	4611      	mov	r1, r2
 8006634:	602b      	str	r3, [r5, #0]
 8006636:	f7fa fb16 	bl	8000c66 <_fstat>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d102      	bne.n	8006644 <_fstat_r+0x1c>
 800663e:	682b      	ldr	r3, [r5, #0]
 8006640:	b103      	cbz	r3, 8006644 <_fstat_r+0x1c>
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	bd38      	pop	{r3, r4, r5, pc}
 8006646:	bf00      	nop
 8006648:	20000354 	.word	0x20000354

0800664c <_isatty_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d06      	ldr	r5, [pc, #24]	; (8006668 <_isatty_r+0x1c>)
 8006650:	2300      	movs	r3, #0
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	602b      	str	r3, [r5, #0]
 8006658:	f7fa fb15 	bl	8000c86 <_isatty>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d102      	bne.n	8006666 <_isatty_r+0x1a>
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	b103      	cbz	r3, 8006666 <_isatty_r+0x1a>
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	20000354 	.word	0x20000354

0800666c <_lseek_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4d07      	ldr	r5, [pc, #28]	; (800668c <_lseek_r+0x20>)
 8006670:	4604      	mov	r4, r0
 8006672:	4608      	mov	r0, r1
 8006674:	4611      	mov	r1, r2
 8006676:	2200      	movs	r2, #0
 8006678:	602a      	str	r2, [r5, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	f7fa fb0e 	bl	8000c9c <_lseek>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_lseek_r+0x1e>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_lseek_r+0x1e>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	20000354 	.word	0x20000354

08006690 <__malloc_lock>:
 8006690:	4801      	ldr	r0, [pc, #4]	; (8006698 <__malloc_lock+0x8>)
 8006692:	f7ff bb55 	b.w	8005d40 <__retarget_lock_acquire_recursive>
 8006696:	bf00      	nop
 8006698:	2000034c 	.word	0x2000034c

0800669c <__malloc_unlock>:
 800669c:	4801      	ldr	r0, [pc, #4]	; (80066a4 <__malloc_unlock+0x8>)
 800669e:	f7ff bb50 	b.w	8005d42 <__retarget_lock_release_recursive>
 80066a2:	bf00      	nop
 80066a4:	2000034c 	.word	0x2000034c

080066a8 <_read_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d07      	ldr	r5, [pc, #28]	; (80066c8 <_read_r+0x20>)
 80066ac:	4604      	mov	r4, r0
 80066ae:	4608      	mov	r0, r1
 80066b0:	4611      	mov	r1, r2
 80066b2:	2200      	movs	r2, #0
 80066b4:	602a      	str	r2, [r5, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	f7fa faac 	bl	8000c14 <_read>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d102      	bne.n	80066c6 <_read_r+0x1e>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	b103      	cbz	r3, 80066c6 <_read_r+0x1e>
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	20000354 	.word	0x20000354

080066cc <_init>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	bf00      	nop
 80066d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d2:	bc08      	pop	{r3}
 80066d4:	469e      	mov	lr, r3
 80066d6:	4770      	bx	lr

080066d8 <_fini>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr
