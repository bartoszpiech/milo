
milo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08009968  08009968  00019968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d20  08009d20  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009d20  08009d20  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d20  08009d20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d20  08009d20  00019d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000078  08009d9c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08009d9c  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b4f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dde  00000000  00000000  00033bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  000369d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00037900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223d7  00000000  00000000  000386f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c6f  00000000  00000000  0005aac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c40bd  00000000  00000000  0006d736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001317f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b34  00000000  00000000  00131848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800994c 	.word	0x0800994c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800994c 	.word	0x0800994c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_DMA_Init+0x38>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <MX_DMA_Init+0x38>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6153      	str	r3, [r2, #20]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_DMA_Init+0x38>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2010      	movs	r0, #16
 8000bbc:	f002 fbef 	bl	800339e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bc0:	2010      	movs	r0, #16
 8000bc2:	f002 fc08 	bl	80033d6 <HAL_NVIC_EnableIRQ>

}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <MX_GPIO_Init+0xec>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a34      	ldr	r2, [pc, #208]	; (8000cc0 <MX_GPIO_Init+0xec>)
 8000bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b32      	ldr	r3, [pc, #200]	; (8000cc0 <MX_GPIO_Init+0xec>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c02:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <MX_GPIO_Init+0xec>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a2e      	ldr	r2, [pc, #184]	; (8000cc0 <MX_GPIO_Init+0xec>)
 8000c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <MX_GPIO_Init+0xec>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <MX_GPIO_Init+0xec>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a28      	ldr	r2, [pc, #160]	; (8000cc0 <MX_GPIO_Init+0xec>)
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	6153      	str	r3, [r2, #20]
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_GPIO_Init+0xec>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <MX_GPIO_Init+0xec>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a22      	ldr	r2, [pc, #136]	; (8000cc0 <MX_GPIO_Init+0xec>)
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3c:	6153      	str	r3, [r2, #20]
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <MX_GPIO_Init+0xec>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c52:	f002 fecd 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_GPIO_Init+0xf0>)
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4817      	ldr	r0, [pc, #92]	; (8000cc8 <MX_GPIO_Init+0xf4>)
 8000c6c:	f002 fd4e 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 8000c70:	2310      	movs	r3, #16
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <MX_GPIO_Init+0xf0>)
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c86:	f002 fd41 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c8a:	2320      	movs	r3, #32
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f002 fd32 	bl	800370c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	200a      	movs	r0, #10
 8000cae:	f002 fb76 	bl	800339e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cb2:	200a      	movs	r0, #10
 8000cb4:	f002 fb8f 	bl	80033d6 <HAL_NVIC_EnableIRQ>

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	10210000 	.word	0x10210000
 8000cc8:	48000800 	.word	0x48000800

08000ccc <string_to_int>:

#define IS_NUMERIC_STRING(d) (*(char*)d >= 48) && (*(char*)d<= 57)
#define CONVERSION(d,k)  ((d<<3) +(d<<1))+(*(char*)k-48);

uint32_t
string_to_int(uint8_t *pszBuffer) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    uint32_t u32Number=0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
    while( IS_NUMERIC_STRING(pszBuffer)) {
 8000cd8:	e00c      	b.n	8000cf4 <string_to_int+0x28>
        u32Number=CONVERSION(u32Number,pszBuffer);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	00da      	lsls	r2, r3, #3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	7812      	ldrb	r2, [r2, #0]
 8000ce8:	4413      	add	r3, r2
 8000cea:	3b30      	subs	r3, #48	; 0x30
 8000cec:	60fb      	str	r3, [r7, #12]
        pszBuffer++;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
    while( IS_NUMERIC_STRING(pszBuffer)) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b2f      	cmp	r3, #47	; 0x2f
 8000cfa:	d903      	bls.n	8000d04 <string_to_int+0x38>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b39      	cmp	r3, #57	; 0x39
 8000d02:	d9ea      	bls.n	8000cda <string_to_int+0xe>
    }
    return u32Number;
 8000d04:	68fb      	ldr	r3, [r7, #12]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int
_write(int file, uint8_t *ptr, int len) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, ptr, len);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <_write+0x24>)
 8000d2a:	f005 fa5d 	bl	80061e8 <HAL_UART_Transmit_IT>
	return len;
 8000d2e:	687b      	ldr	r3, [r7, #4]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000280 	.word	0x20000280

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d40:	f002 f9c8 	bl	80030d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d44:	f000 f846 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d48:	f7ff ff44 	bl	8000bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d4c:	f7ff ff24 	bl	8000b98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d50:	f001 fea4 	bl	8002a9c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d54:	f001 fad8 	bl	8002308 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000d58:	f001 fbbc 	bl	80024d4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000d5c:	f001 fc40 	bl	80025e0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000d60:	f001 fcb8 	bl	80026d4 <MX_TIM17_Init>
  MX_TIM3_Init();
 8000d64:	f001 fb24 	bl	80023b0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000d68:	f001 fb7c 	bl	8002464 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim6); // debug
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4811      	ldr	r0, [pc, #68]	; (8000db4 <main+0x78>)
 8000d70:	f004 f85a 	bl	8004e28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000d74:	2100      	movs	r1, #0
 8000d76:	4810      	ldr	r0, [pc, #64]	; (8000db8 <main+0x7c>)
 8000d78:	f004 f856 	bl	8004e28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	480f      	ldr	r0, [pc, #60]	; (8000dbc <main+0x80>)
 8000d80:	f004 f852 	bl	8004e28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000d84:	2100      	movs	r1, #0
 8000d86:	480e      	ldr	r0, [pc, #56]	; (8000dc0 <main+0x84>)
 8000d88:	f004 f84e 	bl	8004e28 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <main+0x88>)
 8000d90:	f004 f9dc 	bl	800514c <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_IT(&huart2, &message, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <main+0x8c>)
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <main+0x90>)
 8000d9a:	f005 fa81 	bl	80062a0 <HAL_UART_Receive_IT>

  manipulator_init(&milo);
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <main+0x94>)
 8000da0:	f000 fa36 	bl	8001210 <manipulator_init>
	 servo_set(&ft[0], servo_angle[0] * 10, 0);
	 servo_set(&ft[1], servo_angle[1] * 10, 0);
	 servo_set(&ft[2], servo_angle[2] * 10, 0);
	 */
	 //printf("servo[0]: %d; servo[1]: %d; servo[2]: %d; Przycisk: %d\r\n", servo_angle[0], servo_angle[1], servo_angle[2], button);
	 manipulator_update(&milo);
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <main+0x94>)
 8000da6:	f000 ffff 	bl	8001da8 <manipulator_update>
	 //rintf("q1 = %d, q2 = %d, q3 = %d, x = %d, y = %d, z = %d\r\n", (int)(milo.q[0] * 180 / M_PI), (int)(milo.q[1] * 180 / M_PI), (int)(milo.q[2] * 180 / M_PI), (int)milo.effector.x, (int)milo.effector.y, (int)milo.effector.z);
	 HAL_Delay(10);
 8000daa:	200a      	movs	r0, #10
 8000dac:	f002 f9f8 	bl	80031a0 <HAL_Delay>
	 manipulator_update(&milo);
 8000db0:	e7f8      	b.n	8000da4 <main+0x68>
 8000db2:	bf00      	nop
 8000db4:	200003a8 	.word	0x200003a8
 8000db8:	20000310 	.word	0x20000310
 8000dbc:	2000048c 	.word	0x2000048c
 8000dc0:	2000035c 	.word	0x2000035c
 8000dc4:	20000440 	.word	0x20000440
 8000dc8:	2000027c 	.word	0x2000027c
 8000dcc:	20000280 	.word	0x20000280
 8000dd0:	20000098 	.word	0x20000098

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b090      	sub	sp, #64	; 0x40
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0318 	add.w	r3, r7, #24
 8000dde:	2228      	movs	r2, #40	; 0x28
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f006 f9cc 	bl	8007180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dfa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 fe17 	bl	8003a50 <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e28:	f000 f9ea 	bl	8001200 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2102      	movs	r1, #2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f003 fd0a 	bl	8004860 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e52:	f000 f9d5 	bl	8001200 <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3740      	adds	r7, #64	; 0x40
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENCODER_BUTTON_Pin) {
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	2b10      	cmp	r3, #16
 8000e6e:	d118      	bne.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x42>
		button++;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000e78:	6013      	str	r3, [r2, #0]
		button = button % 3;
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000e7c:	6819      	ldr	r1, [r3, #0]
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x54>)
 8000e80:	fba3 2301 	umull	r2, r3, r3, r1
 8000e84:	085a      	lsrs	r2, r3, #1
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	1aca      	subs	r2, r1, r3
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, servo_angle[button]);
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000e98:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x5c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
	}

}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000094 	.word	0x20000094
 8000eb4:	aaaaaaab 	.word	0xaaaaaaab
 8000eb8:	20000268 	.word	0x20000268
 8000ebc:	20000440 	.word	0x20000440

08000ec0 <HAL_UART_RxCpltCallback>:

void
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4aa9      	ldr	r2, [pc, #676]	; (8001174 <HAL_UART_RxCpltCallback+0x2b4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	f040 814b 	bne.w	800116a <HAL_UART_RxCpltCallback+0x2aa>
		if (message == 'b') {
 8000ed4:	4ba8      	ldr	r3, [pc, #672]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b62      	cmp	r3, #98	; 0x62
 8000eda:	d106      	bne.n	8000eea <HAL_UART_RxCpltCallback+0x2a>
			printf("b %ld;\r\n", button);
 8000edc:	4ba7      	ldr	r3, [pc, #668]	; (800117c <HAL_UART_RxCpltCallback+0x2bc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	48a7      	ldr	r0, [pc, #668]	; (8001180 <HAL_UART_RxCpltCallback+0x2c0>)
 8000ee4:	f006 f954 	bl	8007190 <iprintf>
 8000ee8:	e13a      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else if (message == 'c') {
 8000eea:	4ba3      	ldr	r3, [pc, #652]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b63      	cmp	r3, #99	; 0x63
 8000ef0:	d112      	bne.n	8000f18 <HAL_UART_RxCpltCallback+0x58>
			uint8_t button_number;
			HAL_UART_Receive(huart, &button_number, 1, 10);
 8000ef2:	f107 0115 	add.w	r1, r7, #21
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	2201      	movs	r2, #1
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f005 f8a2 	bl	8006044 <HAL_UART_Receive>
			button = button_number - '0';
 8000f00:	7d7b      	ldrb	r3, [r7, #21]
 8000f02:	3b30      	subs	r3, #48	; 0x30
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b9d      	ldr	r3, [pc, #628]	; (800117c <HAL_UART_RxCpltCallback+0x2bc>)
 8000f08:	601a      	str	r2, [r3, #0]
			printf("c %ld;\r\n", button);
 8000f0a:	4b9c      	ldr	r3, [pc, #624]	; (800117c <HAL_UART_RxCpltCallback+0x2bc>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	489c      	ldr	r0, [pc, #624]	; (8001184 <HAL_UART_RxCpltCallback+0x2c4>)
 8000f12:	f006 f93d 	bl	8007190 <iprintf>
 8000f16:	e123      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else if (message == 'e') {
 8000f18:	4b97      	ldr	r3, [pc, #604]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b65      	cmp	r3, #101	; 0x65
 8000f1e:	d107      	bne.n	8000f30 <HAL_UART_RxCpltCallback+0x70>
			printf("e %ld;\r\n", __HAL_TIM_GET_COUNTER(&htim2));
 8000f20:	4b99      	ldr	r3, [pc, #612]	; (8001188 <HAL_UART_RxCpltCallback+0x2c8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	4619      	mov	r1, r3
 8000f28:	4898      	ldr	r0, [pc, #608]	; (800118c <HAL_UART_RxCpltCallback+0x2cc>)
 8000f2a:	f006 f931 	bl	8007190 <iprintf>
 8000f2e:	e117      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else if (message == 'a') {
 8000f30:	4b91      	ldr	r3, [pc, #580]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b61      	cmp	r3, #97	; 0x61
 8000f36:	d119      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0xac>
			uint8_t servo_number, semicolon;
			HAL_UART_Receive(huart, &servo_number, 1, 10);
 8000f38:	f107 0114 	add.w	r1, r7, #20
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	2201      	movs	r2, #1
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f005 f87f 	bl	8006044 <HAL_UART_Receive>
			HAL_UART_Receive(huart, &semicolon, 1, 10);	// semicolon
 8000f46:	f107 0113 	add.w	r1, r7, #19
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f005 f878 	bl	8006044 <HAL_UART_Receive>
			printf("a%c %d;\r\n", servo_number, servo_angle[servo_number - '0']);
 8000f54:	7d3b      	ldrb	r3, [r7, #20]
 8000f56:	4619      	mov	r1, r3
 8000f58:	7d3b      	ldrb	r3, [r7, #20]
 8000f5a:	3b30      	subs	r3, #48	; 0x30
 8000f5c:	4a8c      	ldr	r2, [pc, #560]	; (8001190 <HAL_UART_RxCpltCallback+0x2d0>)
 8000f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f62:	461a      	mov	r2, r3
 8000f64:	488b      	ldr	r0, [pc, #556]	; (8001194 <HAL_UART_RxCpltCallback+0x2d4>)
 8000f66:	f006 f913 	bl	8007190 <iprintf>
 8000f6a:	e0f9      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else if (message == 'd') {
 8000f6c:	4b82      	ldr	r3, [pc, #520]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b64      	cmp	r3, #100	; 0x64
 8000f72:	d112      	bne.n	8000f9a <HAL_UART_RxCpltCallback+0xda>
			uint8_t semicolon;
			HAL_UART_Receive(huart, &semicolon, 1, 10);	// semicolon
 8000f74:	f107 0112 	add.w	r1, r7, #18
 8000f78:	230a      	movs	r3, #10
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f005 f861 	bl	8006044 <HAL_UART_Receive>
			printf("d;%d;%d;%d;\r\n", servo_angle[0], servo_angle[1], servo_angle[2]);
 8000f82:	4b83      	ldr	r3, [pc, #524]	; (8001190 <HAL_UART_RxCpltCallback+0x2d0>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	4619      	mov	r1, r3
 8000f88:	4b81      	ldr	r3, [pc, #516]	; (8001190 <HAL_UART_RxCpltCallback+0x2d0>)
 8000f8a:	885b      	ldrh	r3, [r3, #2]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b80      	ldr	r3, [pc, #512]	; (8001190 <HAL_UART_RxCpltCallback+0x2d0>)
 8000f90:	889b      	ldrh	r3, [r3, #4]
 8000f92:	4881      	ldr	r0, [pc, #516]	; (8001198 <HAL_UART_RxCpltCallback+0x2d8>)
 8000f94:	f006 f8fc 	bl	8007190 <iprintf>
 8000f98:	e0e2      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else if (message == 's') {
 8000f9a:	4b77      	ldr	r3, [pc, #476]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b73      	cmp	r3, #115	; 0x73
 8000fa0:	d157      	bne.n	8001052 <HAL_UART_RxCpltCallback+0x192>
			uint8_t set_servo_number, tmp, set_servo_angle_str[4];
			uint8_t set_servo_angle_int;
			HAL_UART_Receive(huart, &set_servo_number, 1, 10);
 8000fa2:	f107 0111 	add.w	r1, r7, #17
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f005 f84a 	bl	8006044 <HAL_UART_Receive>
			HAL_UART_Receive(huart, &tmp, 1, 10); // space
 8000fb0:	f107 0110 	add.w	r1, r7, #16
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f005 f843 	bl	8006044 <HAL_UART_Receive>
			for (uint8_t i = 0; i < 4; i++) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	75bb      	strb	r3, [r7, #22]
 8000fc2:	e01b      	b.n	8000ffc <HAL_UART_RxCpltCallback+0x13c>
			HAL_UART_Receive(huart, &tmp, 1, 10);
 8000fc4:	f107 0110 	add.w	r1, r7, #16
 8000fc8:	230a      	movs	r3, #10
 8000fca:	2201      	movs	r2, #1
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f005 f839 	bl	8006044 <HAL_UART_Receive>
				if (tmp == ';') {
 8000fd2:	7c3b      	ldrb	r3, [r7, #16]
 8000fd4:	2b3b      	cmp	r3, #59	; 0x3b
 8000fd6:	d107      	bne.n	8000fe8 <HAL_UART_RxCpltCallback+0x128>
					set_servo_angle_str[i] = 0;
 8000fd8:	7dbb      	ldrb	r3, [r7, #22]
 8000fda:	f107 0218 	add.w	r2, r7, #24
 8000fde:	4413      	add	r3, r2
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f803 2c0c 	strb.w	r2, [r3, #-12]
					break;
 8000fe6:	e00c      	b.n	8001002 <HAL_UART_RxCpltCallback+0x142>
				}
				set_servo_angle_str[i] = tmp;
 8000fe8:	7dbb      	ldrb	r3, [r7, #22]
 8000fea:	7c3a      	ldrb	r2, [r7, #16]
 8000fec:	f107 0118 	add.w	r1, r7, #24
 8000ff0:	440b      	add	r3, r1
 8000ff2:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (uint8_t i = 0; i < 4; i++) {
 8000ff6:	7dbb      	ldrb	r3, [r7, #22]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	75bb      	strb	r3, [r7, #22]
 8000ffc:	7dbb      	ldrb	r3, [r7, #22]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d9e0      	bls.n	8000fc4 <HAL_UART_RxCpltCallback+0x104>
			}
			set_servo_angle_int = string_to_int(set_servo_angle_str);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fe60 	bl	8000ccc <string_to_int>
 800100c:	4603      	mov	r3, r0
 800100e:	75fb      	strb	r3, [r7, #23]
			if (set_servo_angle_int > 180) {
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2bb4      	cmp	r3, #180	; 0xb4
 8001014:	d904      	bls.n	8001020 <HAL_UART_RxCpltCallback+0x160>
				set_servo_angle_int = 180;
 8001016:	23b4      	movs	r3, #180	; 0xb4
 8001018:	75fb      	strb	r3, [r7, #23]
				printf("zbyt duzy kat\r\n");
 800101a:	4860      	ldr	r0, [pc, #384]	; (800119c <HAL_UART_RxCpltCallback+0x2dc>)
 800101c:	f006 f93e 	bl	800729c <puts>
			} else if (set_servo_angle_int < 0) {
				set_servo_angle_int = 0;
				printf("zbyt maly kat\r\n");
			}
			servo_angle[set_servo_number - '0'] = set_servo_angle_int;
 8001020:	7c7b      	ldrb	r3, [r7, #17]
 8001022:	3b30      	subs	r3, #48	; 0x30
 8001024:	7dfa      	ldrb	r2, [r7, #23]
 8001026:	b291      	uxth	r1, r2
 8001028:	4a59      	ldr	r2, [pc, #356]	; (8001190 <HAL_UART_RxCpltCallback+0x2d0>)
 800102a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (set_servo_number - '0' == button) {
 800102e:	7c7b      	ldrb	r3, [r7, #17]
 8001030:	3b30      	subs	r3, #48	; 0x30
 8001032:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_UART_RxCpltCallback+0x2bc>)
 8001034:	6812      	ldr	r2, [r2, #0]
 8001036:	4293      	cmp	r3, r2
 8001038:	d103      	bne.n	8001042 <HAL_UART_RxCpltCallback+0x182>
				__HAL_TIM_SET_COUNTER(&htim2, set_servo_angle_int);
 800103a:	4b53      	ldr	r3, [pc, #332]	; (8001188 <HAL_UART_RxCpltCallback+0x2c8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	7dfa      	ldrb	r2, [r7, #23]
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
			}
			printf("s%c %d;\r\n", set_servo_number, set_servo_angle_int);
 8001042:	7c7b      	ldrb	r3, [r7, #17]
 8001044:	4619      	mov	r1, r3
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	461a      	mov	r2, r3
 800104a:	4855      	ldr	r0, [pc, #340]	; (80011a0 <HAL_UART_RxCpltCallback+0x2e0>)
 800104c:	f006 f8a0 	bl	8007190 <iprintf>
 8001050:	e086      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else if (message == 'h') {
 8001052:	4b49      	ldr	r3, [pc, #292]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b68      	cmp	r3, #104	; 0x68
 8001058:	d10d      	bne.n	8001076 <HAL_UART_RxCpltCallback+0x1b6>
			milo.effector.x--;
 800105a:	4b52      	ldr	r3, [pc, #328]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 800105c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b50      	ldr	r3, [pc, #320]	; (80011a8 <HAL_UART_RxCpltCallback+0x2e8>)
 8001066:	f7ff f907 	bl	8000278 <__aeabi_dsub>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	494d      	ldr	r1, [pc, #308]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 8001070:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001074:	e074      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else if (message == 'y') {
 8001076:	4b40      	ldr	r3, [pc, #256]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b79      	cmp	r3, #121	; 0x79
 800107c:	d10d      	bne.n	800109a <HAL_UART_RxCpltCallback+0x1da>
			milo.effector.x++;
 800107e:	4b49      	ldr	r3, [pc, #292]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 8001080:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <HAL_UART_RxCpltCallback+0x2e8>)
 800108a:	f7ff f8f7 	bl	800027c <__adddf3>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4944      	ldr	r1, [pc, #272]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 8001094:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001098:	e062      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else if (message == 'j') {
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b6a      	cmp	r3, #106	; 0x6a
 80010a0:	d10d      	bne.n	80010be <HAL_UART_RxCpltCallback+0x1fe>
			milo.effector.y--;
 80010a2:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 80010a4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <HAL_UART_RxCpltCallback+0x2e8>)
 80010ae:	f7ff f8e3 	bl	8000278 <__aeabi_dsub>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	493b      	ldr	r1, [pc, #236]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 80010b8:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80010bc:	e050      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else if (message == 'u') {
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b75      	cmp	r3, #117	; 0x75
 80010c4:	d10d      	bne.n	80010e2 <HAL_UART_RxCpltCallback+0x222>
			milo.effector.y++;
 80010c6:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 80010c8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <HAL_UART_RxCpltCallback+0x2e8>)
 80010d2:	f7ff f8d3 	bl	800027c <__adddf3>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4932      	ldr	r1, [pc, #200]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 80010dc:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80010e0:	e03e      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else if (message == 'k') {
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b6b      	cmp	r3, #107	; 0x6b
 80010e8:	d10d      	bne.n	8001106 <HAL_UART_RxCpltCallback+0x246>
			milo.effector.z--;
 80010ea:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 80010ec:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <HAL_UART_RxCpltCallback+0x2e8>)
 80010f6:	f7ff f8bf 	bl	8000278 <__aeabi_dsub>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4929      	ldr	r1, [pc, #164]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 8001100:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001104:	e02c      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else if (message == 'i') {
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b69      	cmp	r3, #105	; 0x69
 800110c:	d10d      	bne.n	800112a <HAL_UART_RxCpltCallback+0x26a>
			milo.effector.z++;
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 8001110:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_UART_RxCpltCallback+0x2e8>)
 800111a:	f7ff f8af 	bl	800027c <__adddf3>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4920      	ldr	r1, [pc, #128]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 8001124:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001128:	e01a      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else if (message == 'o') {
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b6f      	cmp	r3, #111	; 0x6f
 8001130:	d113      	bne.n	800115a <HAL_UART_RxCpltCallback+0x29a>
			milo.effector.x = 49.0;
 8001132:	491c      	ldr	r1, [pc, #112]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_UART_RxCpltCallback+0x2ec>)
 800113a:	e9c1 2306 	strd	r2, r3, [r1, #24]
			milo.effector.y = 29.0;
 800113e:	4919      	ldr	r1, [pc, #100]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_UART_RxCpltCallback+0x2f0>)
 8001146:	e9c1 2308 	strd	r2, r3, [r1, #32]
			milo.effector.z = 0.0;
 800114a:	4916      	ldr	r1, [pc, #88]	; (80011a4 <HAL_UART_RxCpltCallback+0x2e4>)
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001158:	e002      	b.n	8001160 <HAL_UART_RxCpltCallback+0x2a0>
		} else {
			printf("Niepoprawne dane\r\n");
 800115a:	4816      	ldr	r0, [pc, #88]	; (80011b4 <HAL_UART_RxCpltCallback+0x2f4>)
 800115c:	f006 f89e 	bl	800729c <puts>
		}
		HAL_UART_Receive_IT(huart, &message, 1);
 8001160:	2201      	movs	r2, #1
 8001162:	4905      	ldr	r1, [pc, #20]	; (8001178 <HAL_UART_RxCpltCallback+0x2b8>)
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f005 f89b 	bl	80062a0 <HAL_UART_Receive_IT>
	}
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40004400 	.word	0x40004400
 8001178:	2000027c 	.word	0x2000027c
 800117c:	20000094 	.word	0x20000094
 8001180:	08009968 	.word	0x08009968
 8001184:	08009974 	.word	0x08009974
 8001188:	20000440 	.word	0x20000440
 800118c:	08009980 	.word	0x08009980
 8001190:	20000268 	.word	0x20000268
 8001194:	0800998c 	.word	0x0800998c
 8001198:	08009998 	.word	0x08009998
 800119c:	080099a8 	.word	0x080099a8
 80011a0:	080099b8 	.word	0x080099b8
 80011a4:	20000098 	.word	0x20000098
 80011a8:	3ff00000 	.word	0x3ff00000
 80011ac:	40488000 	.word	0x40488000
 80011b0:	403d0000 	.word	0x403d0000
 80011b4:	080099c4 	.word	0x080099c4

080011b8 <HAL_TIM_PeriodElapsedCallback>:

void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {	// wyswietlanie aktualnych danych do debugu
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d10f      	bne.n	80011e8 <HAL_TIM_PeriodElapsedCallback+0x30>
		printf("a0: %d; a1: %d; a2: %d; b: %ld\r\n", servo_angle[0], servo_angle[1], servo_angle[2], button);
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80011d0:	885b      	ldrh	r3, [r3, #2]
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80011d6:	889b      	ldrh	r3, [r3, #4]
 80011d8:	4618      	mov	r0, r3
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	4603      	mov	r3, r0
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80011e4:	f005 ffd4 	bl	8007190 <iprintf>
	}
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200003f4 	.word	0x200003f4
 80011f4:	20000268 	.word	0x20000268
 80011f8:	20000094 	.word	0x20000094
 80011fc:	080099d8 	.word	0x080099d8

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <manipulator_init>:
#include "manipulator.h"

void
manipulator_init(manipulator_t *m) {
 8001210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001214:	ed2d 8b04 	vpush	{d8-d9}
 8001218:	b099      	sub	sp, #100	; 0x64
 800121a:	af16      	add	r7, sp, #88	; 0x58
 800121c:	6078      	str	r0, [r7, #4]
	vector_init_d(&m->origin, 0, 0, 0);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	ed9f 2bcf 	vldr	d2, [pc, #828]	; 8001560 <manipulator_init+0x350>
 8001224:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8001560 <manipulator_init+0x350>
 8001228:	ed9f 0bcd 	vldr	d0, [pc, #820]	; 8001560 <manipulator_init+0x350>
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fcd9 	bl	8002be4 <vector_init_d>

	m->q[0] = 0.0 * M_PI / 180;
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	m->q[1] = 45.0 * M_PI / 180;
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	a3cd      	add	r3, pc, #820	; (adr r3, 8001578 <manipulator_init+0x368>)
 8001244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001248:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	m->q[2] = 45.0 * M_PI / 180;
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	a3ca      	add	r3, pc, #808	; (adr r3, 8001578 <manipulator_init+0x368>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

	m->len[0] = 40.0;
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4bc4      	ldr	r3, [pc, #784]	; (8001570 <manipulator_init+0x360>)
 8001260:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	m->len[1] = 30.0;
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4bc2      	ldr	r3, [pc, #776]	; (8001574 <manipulator_init+0x364>)
 800126c:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
	m->total_len = m->len[0] + m->len[1];
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800127c:	f7fe fffe 	bl	800027c <__adddf3>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	m->error = 0.1;
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	a3b6      	add	r3, pc, #728	; (adr r3, 8001568 <manipulator_init+0x358>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0

	vector_init_v(&m->j1[0], m->origin);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	ed93 5b00 	vldr	d5, [r3]
 80012a2:	ed93 6b02 	vldr	d6, [r3, #8]
 80012a6:	ed93 7b04 	vldr	d7, [r3, #16]
 80012aa:	eeb0 0a45 	vmov.f32	s0, s10
 80012ae:	eef0 0a65 	vmov.f32	s1, s11
 80012b2:	eeb0 1a46 	vmov.f32	s2, s12
 80012b6:	eef0 1a66 	vmov.f32	s3, s13
 80012ba:	eeb0 2a47 	vmov.f32	s4, s14
 80012be:	eef0 2a67 	vmov.f32	s5, s15
 80012c2:	4610      	mov	r0, r2
 80012c4:	f001 fcad 	bl	8002c22 <vector_init_v>
	vector_init_d(&m->j1[1],
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f103 0648 	add.w	r6, r3, #72	; 0x48
				m->len[0] * cos(m->q[1]) * cos(m->q[0]),
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80012da:	eeb0 0a47 	vmov.f32	s0, s14
 80012de:	eef0 0a67 	vmov.f32	s1, s15
 80012e2:	f006 ff21 	bl	8008128 <cos>
 80012e6:	ec53 2b10 	vmov	r2, r3, d0
 80012ea:	4620      	mov	r0, r4
 80012ec:	4629      	mov	r1, r5
 80012ee:	f7ff f97b 	bl	80005e8 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4614      	mov	r4, r2
 80012f8:	461d      	mov	r5, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8001300:	eeb0 0a47 	vmov.f32	s0, s14
 8001304:	eef0 0a67 	vmov.f32	s1, s15
 8001308:	f006 ff0e 	bl	8008128 <cos>
 800130c:	ec53 2b10 	vmov	r2, r3, d0
	vector_init_d(&m->j1[1],
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff f968 	bl	80005e8 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	ec43 2b18 	vmov	d8, r2, r3
				m->len[0] * sin(m->q[1]),
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800132c:	eeb0 0a47 	vmov.f32	s0, s14
 8001330:	eef0 0a67 	vmov.f32	s1, s15
 8001334:	f006 ff48 	bl	80081c8 <sin>
 8001338:	ec53 2b10 	vmov	r2, r3, d0
	vector_init_d(&m->j1[1],
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f7ff f952 	bl	80005e8 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	ec43 2b19 	vmov	d9, r2, r3
				m->len[0] * cos(m->q[1]) * sin(m->q[0]));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8001358:	eeb0 0a47 	vmov.f32	s0, s14
 800135c:	eef0 0a67 	vmov.f32	s1, s15
 8001360:	f006 fee2 	bl	8008128 <cos>
 8001364:	ec53 2b10 	vmov	r2, r3, d0
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7ff f93c 	bl	80005e8 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4614      	mov	r4, r2
 8001376:	461d      	mov	r5, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800137e:	eeb0 0a47 	vmov.f32	s0, s14
 8001382:	eef0 0a67 	vmov.f32	s1, s15
 8001386:	f006 ff1f 	bl	80081c8 <sin>
 800138a:	ec53 2b10 	vmov	r2, r3, d0
	vector_init_d(&m->j1[1],
 800138e:	4620      	mov	r0, r4
 8001390:	4629      	mov	r1, r5
 8001392:	f7ff f929 	bl	80005e8 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	ec43 2b17 	vmov	d7, r2, r3
 800139e:	eeb0 2a47 	vmov.f32	s4, s14
 80013a2:	eef0 2a67 	vmov.f32	s5, s15
 80013a6:	eeb0 1a49 	vmov.f32	s2, s18
 80013aa:	eef0 1a69 	vmov.f32	s3, s19
 80013ae:	eeb0 0a48 	vmov.f32	s0, s16
 80013b2:	eef0 0a68 	vmov.f32	s1, s17
 80013b6:	4630      	mov	r0, r6
 80013b8:	f001 fc14 	bl	8002be4 <vector_init_d>
	vector_init_v(&m->j2[0], m->j1[1]);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	ed93 5b12 	vldr	d5, [r3, #72]	; 0x48
 80013c8:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80013cc:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80013d0:	eeb0 0a45 	vmov.f32	s0, s10
 80013d4:	eef0 0a65 	vmov.f32	s1, s11
 80013d8:	eeb0 1a46 	vmov.f32	s2, s12
 80013dc:	eef0 1a66 	vmov.f32	s3, s13
 80013e0:	eeb0 2a47 	vmov.f32	s4, s14
 80013e4:	eef0 2a67 	vmov.f32	s5, s15
 80013e8:	4610      	mov	r0, r2
 80013ea:	f001 fc1a 	bl	8002c22 <vector_init_v>
	vector_init_d(&m->j2[1],
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f103 0678 	add.w	r6, r3, #120	; 0x78
				(m->len[0] * cos(m->q[1]) + m->len[1] * cos(m->q[1] - m->q[2])) * cos(m->q[0]),
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8001400:	eeb0 0a47 	vmov.f32	s0, s14
 8001404:	eef0 0a67 	vmov.f32	s1, s15
 8001408:	f006 fe8e 	bl	8008128 <cos>
 800140c:	ec53 2b10 	vmov	r2, r3, d0
 8001410:	4620      	mov	r0, r4
 8001412:	4629      	mov	r1, r5
 8001414:	f7ff f8e8 	bl	80005e8 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4690      	mov	r8, r2
 800141e:	4699      	mov	r9, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001432:	f7fe ff21 	bl	8000278 <__aeabi_dsub>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	ec43 2b17 	vmov	d7, r2, r3
 800143e:	eeb0 0a47 	vmov.f32	s0, s14
 8001442:	eef0 0a67 	vmov.f32	s1, s15
 8001446:	f006 fe6f 	bl	8008128 <cos>
 800144a:	ec53 2b10 	vmov	r2, r3, d0
 800144e:	4620      	mov	r0, r4
 8001450:	4629      	mov	r1, r5
 8001452:	f7ff f8c9 	bl	80005e8 <__aeabi_dmul>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4640      	mov	r0, r8
 800145c:	4649      	mov	r1, r9
 800145e:	f7fe ff0d 	bl	800027c <__adddf3>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4614      	mov	r4, r2
 8001468:	461d      	mov	r5, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8001470:	eeb0 0a47 	vmov.f32	s0, s14
 8001474:	eef0 0a67 	vmov.f32	s1, s15
 8001478:	f006 fe56 	bl	8008128 <cos>
 800147c:	ec53 2b10 	vmov	r2, r3, d0
	vector_init_d(&m->j2[1],
 8001480:	4620      	mov	r0, r4
 8001482:	4629      	mov	r1, r5
 8001484:	f7ff f8b0 	bl	80005e8 <__aeabi_dmul>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	ec43 2b18 	vmov	d8, r2, r3
				m->len[0] * sin(m->q[1]) + m->len[1] * sin(m->q[1] - m->q[2]),
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800149c:	eeb0 0a47 	vmov.f32	s0, s14
 80014a0:	eef0 0a67 	vmov.f32	s1, s15
 80014a4:	f006 fe90 	bl	80081c8 <sin>
 80014a8:	ec53 2b10 	vmov	r2, r3, d0
 80014ac:	4620      	mov	r0, r4
 80014ae:	4629      	mov	r1, r5
 80014b0:	f7ff f89a 	bl	80005e8 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4690      	mov	r8, r2
 80014ba:	4699      	mov	r9, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80014ce:	f7fe fed3 	bl	8000278 <__aeabi_dsub>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	ec43 2b17 	vmov	d7, r2, r3
 80014da:	eeb0 0a47 	vmov.f32	s0, s14
 80014de:	eef0 0a67 	vmov.f32	s1, s15
 80014e2:	f006 fe71 	bl	80081c8 <sin>
 80014e6:	ec53 2b10 	vmov	r2, r3, d0
 80014ea:	4620      	mov	r0, r4
 80014ec:	4629      	mov	r1, r5
 80014ee:	f7ff f87b 	bl	80005e8 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
	vector_init_d(&m->j2[1],
 80014f6:	4640      	mov	r0, r8
 80014f8:	4649      	mov	r1, r9
 80014fa:	f7fe febf 	bl	800027c <__adddf3>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	ec43 2b19 	vmov	d9, r2, r3
				(m->len[0] * cos(m->q[1]) + m->len[1] * cos(m->q[1] - m->q[2])) * sin(m->q[0]));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8001512:	eeb0 0a47 	vmov.f32	s0, s14
 8001516:	eef0 0a67 	vmov.f32	s1, s15
 800151a:	f006 fe05 	bl	8008128 <cos>
 800151e:	ec53 2b10 	vmov	r2, r3, d0
 8001522:	4620      	mov	r0, r4
 8001524:	4629      	mov	r1, r5
 8001526:	f7ff f85f 	bl	80005e8 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4690      	mov	r8, r2
 8001530:	4699      	mov	r9, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001544:	f7fe fe98 	bl	8000278 <__aeabi_dsub>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	ec43 2b17 	vmov	d7, r2, r3
 8001550:	eeb0 0a47 	vmov.f32	s0, s14
 8001554:	eef0 0a67 	vmov.f32	s1, s15
 8001558:	f006 fde6 	bl	8008128 <cos>
 800155c:	e010      	b.n	8001580 <manipulator_init+0x370>
 800155e:	bf00      	nop
	...
 8001568:	9999999a 	.word	0x9999999a
 800156c:	3fb99999 	.word	0x3fb99999
 8001570:	40440000 	.word	0x40440000
 8001574:	403e0000 	.word	0x403e0000
 8001578:	54442d18 	.word	0x54442d18
 800157c:	3fe921fb 	.word	0x3fe921fb
 8001580:	ec53 2b10 	vmov	r2, r3, d0
 8001584:	4620      	mov	r0, r4
 8001586:	4629      	mov	r1, r5
 8001588:	f7ff f82e 	bl	80005e8 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4640      	mov	r0, r8
 8001592:	4649      	mov	r1, r9
 8001594:	f7fe fe72 	bl	800027c <__adddf3>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4614      	mov	r4, r2
 800159e:	461d      	mov	r5, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80015a6:	eeb0 0a47 	vmov.f32	s0, s14
 80015aa:	eef0 0a67 	vmov.f32	s1, s15
 80015ae:	f006 fe0b 	bl	80081c8 <sin>
 80015b2:	ec53 2b10 	vmov	r2, r3, d0
	vector_init_d(&m->j2[1],
 80015b6:	4620      	mov	r0, r4
 80015b8:	4629      	mov	r1, r5
 80015ba:	f7ff f815 	bl	80005e8 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	ec43 2b17 	vmov	d7, r2, r3
 80015c6:	eeb0 2a47 	vmov.f32	s4, s14
 80015ca:	eef0 2a67 	vmov.f32	s5, s15
 80015ce:	eeb0 1a49 	vmov.f32	s2, s18
 80015d2:	eef0 1a69 	vmov.f32	s3, s19
 80015d6:	eeb0 0a48 	vmov.f32	s0, s16
 80015da:	eef0 0a68 	vmov.f32	s1, s17
 80015de:	4630      	mov	r0, r6
 80015e0:	f001 fb00 	bl	8002be4 <vector_init_d>
	vector_init_v(&m->effector, m->j2[1]);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f103 0218 	add.w	r2, r3, #24
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 80015f0:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 80015f4:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80015f8:	eeb0 0a45 	vmov.f32	s0, s10
 80015fc:	eef0 0a65 	vmov.f32	s1, s11
 8001600:	eeb0 1a46 	vmov.f32	s2, s12
 8001604:	eef0 1a66 	vmov.f32	s3, s13
 8001608:	eeb0 2a47 	vmov.f32	s4, s14
 800160c:	eef0 2a67 	vmov.f32	s5, s15
 8001610:	4610      	mov	r0, r2
 8001612:	f001 fb06 	bl	8002c22 <vector_init_v>

	servo_init(&m->servo[0], htim15, TIM_CHANNEL_1, 0, 0, 1800, 500, 2500);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f103 0cc8 	add.w	ip, r3, #200	; 0xc8
 800161c:	4e4b      	ldr	r6, [pc, #300]	; (800174c <manipulator_init+0x53c>)
 800161e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001622:	9315      	str	r3, [sp, #84]	; 0x54
 8001624:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001628:	9314      	str	r3, [sp, #80]	; 0x50
 800162a:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800162e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001630:	2300      	movs	r3, #0
 8001632:	9312      	str	r3, [sp, #72]	; 0x48
 8001634:	2300      	movs	r3, #0
 8001636:	9311      	str	r3, [sp, #68]	; 0x44
 8001638:	2300      	movs	r3, #0
 800163a:	9310      	str	r3, [sp, #64]	; 0x40
 800163c:	466d      	mov	r5, sp
 800163e:	f106 040c 	add.w	r4, r6, #12
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001652:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001656:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800165a:	4660      	mov	r0, ip
 800165c:	f000 fc4a 	bl	8001ef4 <servo_init>
	servo_init(&m->servo[1], htim16, TIM_CHANNEL_1, 0, 0, 1800, 500, 2500);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f503 7c90 	add.w	ip, r3, #288	; 0x120
 8001666:	4e3a      	ldr	r6, [pc, #232]	; (8001750 <manipulator_init+0x540>)
 8001668:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800166c:	9315      	str	r3, [sp, #84]	; 0x54
 800166e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001672:	9314      	str	r3, [sp, #80]	; 0x50
 8001674:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001678:	9313      	str	r3, [sp, #76]	; 0x4c
 800167a:	2300      	movs	r3, #0
 800167c:	9312      	str	r3, [sp, #72]	; 0x48
 800167e:	2300      	movs	r3, #0
 8001680:	9311      	str	r3, [sp, #68]	; 0x44
 8001682:	2300      	movs	r3, #0
 8001684:	9310      	str	r3, [sp, #64]	; 0x40
 8001686:	466d      	mov	r5, sp
 8001688:	f106 040c 	add.w	r4, r6, #12
 800168c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001698:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800169c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016a0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80016a4:	4660      	mov	r0, ip
 80016a6:	f000 fc25 	bl	8001ef4 <servo_init>
	servo_init(&m->servo[2], htim17, TIM_CHANNEL_1, 0, 0, 1800, 500, 2500);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f503 7cbc 	add.w	ip, r3, #376	; 0x178
 80016b0:	4e28      	ldr	r6, [pc, #160]	; (8001754 <manipulator_init+0x544>)
 80016b2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80016b6:	9315      	str	r3, [sp, #84]	; 0x54
 80016b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016bc:	9314      	str	r3, [sp, #80]	; 0x50
 80016be:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80016c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80016c4:	2300      	movs	r3, #0
 80016c6:	9312      	str	r3, [sp, #72]	; 0x48
 80016c8:	2300      	movs	r3, #0
 80016ca:	9311      	str	r3, [sp, #68]	; 0x44
 80016cc:	2300      	movs	r3, #0
 80016ce:	9310      	str	r3, [sp, #64]	; 0x40
 80016d0:	466d      	mov	r5, sp
 80016d2:	f106 040c 	add.w	r4, r6, #12
 80016d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80016ee:	4660      	mov	r0, ip
 80016f0:	f000 fc00 	bl	8001ef4 <servo_init>
	servo_init(&m->servo[3], htim3, TIM_CHANNEL_1, 0, 0, 1800, 500, 2500);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f503 7ce8 	add.w	ip, r3, #464	; 0x1d0
 80016fa:	4e17      	ldr	r6, [pc, #92]	; (8001758 <manipulator_init+0x548>)
 80016fc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001700:	9315      	str	r3, [sp, #84]	; 0x54
 8001702:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001706:	9314      	str	r3, [sp, #80]	; 0x50
 8001708:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800170c:	9313      	str	r3, [sp, #76]	; 0x4c
 800170e:	2300      	movs	r3, #0
 8001710:	9312      	str	r3, [sp, #72]	; 0x48
 8001712:	2300      	movs	r3, #0
 8001714:	9311      	str	r3, [sp, #68]	; 0x44
 8001716:	2300      	movs	r3, #0
 8001718:	9310      	str	r3, [sp, #64]	; 0x40
 800171a:	466d      	mov	r5, sp
 800171c:	f106 040c 	add.w	r4, r6, #12
 8001720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800172c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001730:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001734:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001738:	4660      	mov	r0, ip
 800173a:	f000 fbdb 	bl	8001ef4 <servo_init>
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	ecbd 8b04 	vpop	{d8-d9}
 8001748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800174c:	20000310 	.word	0x20000310
 8001750:	2000048c 	.word	0x2000048c
 8001754:	2000035c 	.word	0x2000035c
 8001758:	200003a8 	.word	0x200003a8

0800175c <manipulator_backward>:
// function declaration
void
manipulator_forward(manipulator_t *m, int depth, double x, double y, double z);

void
manipulator_backward(manipulator_t *m, int depth, double x, double y, double z) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b08e      	sub	sp, #56	; 0x38
 8001760:	af00      	add	r7, sp, #0
 8001762:	61f8      	str	r0, [r7, #28]
 8001764:	61b9      	str	r1, [r7, #24]
 8001766:	ed87 0b04 	vstr	d0, [r7, #16]
 800176a:	ed87 1b02 	vstr	d1, [r7, #8]
 800176e:	ed87 2b00 	vstr	d2, [r7]
	vector_init_d(&m->j2[1], x, y, z);
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3378      	adds	r3, #120	; 0x78
 8001776:	ed97 2b00 	vldr	d2, [r7]
 800177a:	ed97 1b02 	vldr	d1, [r7, #8]
 800177e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fa2e 	bl	8002be4 <vector_init_d>
	if (vector_mag(m->j2[1]) > m->total_len) {
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800178e:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 8001792:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8001796:	eeb0 0a45 	vmov.f32	s0, s10
 800179a:	eef0 0a65 	vmov.f32	s1, s11
 800179e:	eeb0 1a46 	vmov.f32	s2, s12
 80017a2:	eef0 1a66 	vmov.f32	s3, s13
 80017a6:	eeb0 2a47 	vmov.f32	s4, s14
 80017aa:	eef0 2a67 	vmov.f32	s5, s15
 80017ae:	f001 fa63 	bl	8002c78 <vector_mag>
 80017b2:	ec51 0b10 	vmov	r0, r1, d0
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80017bc:	f7ff f9a4 	bl	8000b08 <__aeabi_dcmpgt>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <manipulator_backward+0x72>
		printf("za daleko\n");
 80017c6:	487a      	ldr	r0, [pc, #488]	; (80019b0 <manipulator_backward+0x254>)
 80017c8:	f005 fd68 	bl	800729c <puts>
 80017cc:	e0ec      	b.n	80019a8 <manipulator_backward+0x24c>
		return;
	}
	vector_t tmp;
	// substract end of the joint from it's beginning
	vector_sub(&tmp, m->j2[0], m->j2[1]);
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 80017d4:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 80017d8:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	ed93 2b18 	vldr	d2, [r3, #96]	; 0x60
 80017e2:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 80017e6:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80017ea:	f107 0320 	add.w	r3, r7, #32
 80017ee:	eeb0 0a42 	vmov.f32	s0, s4
 80017f2:	eef0 0a62 	vmov.f32	s1, s5
 80017f6:	eeb0 1a46 	vmov.f32	s2, s12
 80017fa:	eef0 1a66 	vmov.f32	s3, s13
 80017fe:	eeb0 2a47 	vmov.f32	s4, s14
 8001802:	eef0 2a67 	vmov.f32	s5, s15
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fb8b 	bl	8002f22 <vector_sub>
	vector_normalize(&tmp);
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4618      	mov	r0, r3
 8001812:	f001 fbf1 	bl	8002ff8 <vector_normalize>
	// multiplying * length of a joint
	vector_mult(&tmp, m->len[1]);
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 800181c:	f107 0320 	add.w	r3, r7, #32
 8001820:	eeb0 0a47 	vmov.f32	s0, s14
 8001824:	eef0 0a67 	vmov.f32	s1, s15
 8001828:	4618      	mov	r0, r3
 800182a:	f001 fbb7 	bl	8002f9c <vector_mult>
	// adding end coords
	vector_add(&tmp, tmp, m->j2[1]);
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8001834:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8001838:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 800183c:	ed97 2b08 	vldr	d2, [r7, #32]
 8001840:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001844:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	eeb0 0a42 	vmov.f32	s0, s4
 8001850:	eef0 0a62 	vmov.f32	s1, s5
 8001854:	eeb0 1a46 	vmov.f32	s2, s12
 8001858:	eef0 1a66 	vmov.f32	s3, s13
 800185c:	eeb0 2a47 	vmov.f32	s4, s14
 8001860:	eef0 2a67 	vmov.f32	s5, s15
 8001864:	4618      	mov	r0, r3
 8001866:	f001 fb1f 	bl	8002ea8 <vector_add>
	vector_init_v(&m->j2[0], tmp);
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3360      	adds	r3, #96	; 0x60
 800186e:	ed97 5b08 	vldr	d5, [r7, #32]
 8001872:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001876:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800187a:	eeb0 0a45 	vmov.f32	s0, s10
 800187e:	eef0 0a65 	vmov.f32	s1, s11
 8001882:	eeb0 1a46 	vmov.f32	s2, s12
 8001886:	eef0 1a66 	vmov.f32	s3, s13
 800188a:	eeb0 2a47 	vmov.f32	s4, s14
 800188e:	eef0 2a67 	vmov.f32	s5, s15
 8001892:	4618      	mov	r0, r3
 8001894:	f001 f9c5 	bl	8002c22 <vector_init_v>

	// set end of first joint and repeat the process
	vector_init_v(&m->j1[1], m->j2[0]);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 80018a4:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 80018a8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80018ac:	eeb0 0a45 	vmov.f32	s0, s10
 80018b0:	eef0 0a65 	vmov.f32	s1, s11
 80018b4:	eeb0 1a46 	vmov.f32	s2, s12
 80018b8:	eef0 1a66 	vmov.f32	s3, s13
 80018bc:	eeb0 2a47 	vmov.f32	s4, s14
 80018c0:	eef0 2a67 	vmov.f32	s5, s15
 80018c4:	4610      	mov	r0, r2
 80018c6:	f001 f9ac 	bl	8002c22 <vector_init_v>
	vector_sub(&tmp, m->j1[0], m->j1[1]);
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	ed93 3b12 	vldr	d3, [r3, #72]	; 0x48
 80018d0:	ed93 4b14 	vldr	d4, [r3, #80]	; 0x50
 80018d4:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 80018de:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80018e2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018e6:	f107 0320 	add.w	r3, r7, #32
 80018ea:	eeb0 0a42 	vmov.f32	s0, s4
 80018ee:	eef0 0a62 	vmov.f32	s1, s5
 80018f2:	eeb0 1a46 	vmov.f32	s2, s12
 80018f6:	eef0 1a66 	vmov.f32	s3, s13
 80018fa:	eeb0 2a47 	vmov.f32	s4, s14
 80018fe:	eef0 2a67 	vmov.f32	s5, s15
 8001902:	4618      	mov	r0, r3
 8001904:	f001 fb0d 	bl	8002f22 <vector_sub>
	vector_normalize(&tmp);
 8001908:	f107 0320 	add.w	r3, r7, #32
 800190c:	4618      	mov	r0, r3
 800190e:	f001 fb73 	bl	8002ff8 <vector_normalize>
	vector_mult(&tmp, m->len[0]);
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8001918:	f107 0320 	add.w	r3, r7, #32
 800191c:	eeb0 0a47 	vmov.f32	s0, s14
 8001920:	eef0 0a67 	vmov.f32	s1, s15
 8001924:	4618      	mov	r0, r3
 8001926:	f001 fb39 	bl	8002f9c <vector_mult>
	vector_add(&tmp, tmp, m->j1[1]);
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	ed93 3b12 	vldr	d3, [r3, #72]	; 0x48
 8001930:	ed93 4b14 	vldr	d4, [r3, #80]	; 0x50
 8001934:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 8001938:	ed97 2b08 	vldr	d2, [r7, #32]
 800193c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001940:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001944:	f107 0320 	add.w	r3, r7, #32
 8001948:	eeb0 0a42 	vmov.f32	s0, s4
 800194c:	eef0 0a62 	vmov.f32	s1, s5
 8001950:	eeb0 1a46 	vmov.f32	s2, s12
 8001954:	eef0 1a66 	vmov.f32	s3, s13
 8001958:	eeb0 2a47 	vmov.f32	s4, s14
 800195c:	eef0 2a67 	vmov.f32	s5, s15
 8001960:	4618      	mov	r0, r3
 8001962:	f001 faa1 	bl	8002ea8 <vector_add>
	vector_init_v(&m->j1[0], tmp);
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3330      	adds	r3, #48	; 0x30
 800196a:	ed97 5b08 	vldr	d5, [r7, #32]
 800196e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001972:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001976:	eeb0 0a45 	vmov.f32	s0, s10
 800197a:	eef0 0a65 	vmov.f32	s1, s11
 800197e:	eeb0 1a46 	vmov.f32	s2, s12
 8001982:	eef0 1a66 	vmov.f32	s3, s13
 8001986:	eeb0 2a47 	vmov.f32	s4, s14
 800198a:	eef0 2a67 	vmov.f32	s5, s15
 800198e:	4618      	mov	r0, r3
 8001990:	f001 f947 	bl	8002c22 <vector_init_v>

	manipulator_forward(m, depth, x, y, z);
 8001994:	ed97 2b00 	vldr	d2, [r7]
 8001998:	ed97 1b02 	vldr	d1, [r7, #8]
 800199c:	ed97 0b04 	vldr	d0, [r7, #16]
 80019a0:	69b9      	ldr	r1, [r7, #24]
 80019a2:	69f8      	ldr	r0, [r7, #28]
 80019a4:	f000 f806 	bl	80019b4 <manipulator_forward>
}
 80019a8:	3738      	adds	r7, #56	; 0x38
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	08009a68 	.word	0x08009a68

080019b4 <manipulator_forward>:

void
manipulator_forward(manipulator_t *m, int depth, double x, double y, double z) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08e      	sub	sp, #56	; 0x38
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	61f8      	str	r0, [r7, #28]
 80019bc:	61b9      	str	r1, [r7, #24]
 80019be:	ed87 0b04 	vstr	d0, [r7, #16]
 80019c2:	ed87 1b02 	vstr	d1, [r7, #8]
 80019c6:	ed87 2b00 	vstr	d2, [r7]
	depth--;
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	61bb      	str	r3, [r7, #24]
	//printf("forward\n");
	vector_init_v(&m->j1[0], m->origin);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	ed93 5b00 	vldr	d5, [r3]
 80019dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80019e0:	ed93 7b04 	vldr	d7, [r3, #16]
 80019e4:	eeb0 0a45 	vmov.f32	s0, s10
 80019e8:	eef0 0a65 	vmov.f32	s1, s11
 80019ec:	eeb0 1a46 	vmov.f32	s2, s12
 80019f0:	eef0 1a66 	vmov.f32	s3, s13
 80019f4:	eeb0 2a47 	vmov.f32	s4, s14
 80019f8:	eef0 2a67 	vmov.f32	s5, s15
 80019fc:	4610      	mov	r0, r2
 80019fe:	f001 f910 	bl	8002c22 <vector_init_v>
	vector_t tmp;
	vector_sub(&tmp, m->j1[1], m->j1[0]);
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8001a08:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
 8001a0c:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	ed93 2b12 	vldr	d2, [r3, #72]	; 0x48
 8001a16:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001a1a:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001a1e:	f107 0320 	add.w	r3, r7, #32
 8001a22:	eeb0 0a42 	vmov.f32	s0, s4
 8001a26:	eef0 0a62 	vmov.f32	s1, s5
 8001a2a:	eeb0 1a46 	vmov.f32	s2, s12
 8001a2e:	eef0 1a66 	vmov.f32	s3, s13
 8001a32:	eeb0 2a47 	vmov.f32	s4, s14
 8001a36:	eef0 2a67 	vmov.f32	s5, s15
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 fa71 	bl	8002f22 <vector_sub>
	vector_normalize(&tmp);
 8001a40:	f107 0320 	add.w	r3, r7, #32
 8001a44:	4618      	mov	r0, r3
 8001a46:	f001 fad7 	bl	8002ff8 <vector_normalize>
	vector_mult(&tmp, m->len[0]);
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	eeb0 0a47 	vmov.f32	s0, s14
 8001a58:	eef0 0a67 	vmov.f32	s1, s15
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fa9d 	bl	8002f9c <vector_mult>
	vector_init_v(&m->j1[1], tmp);
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3348      	adds	r3, #72	; 0x48
 8001a66:	ed97 5b08 	vldr	d5, [r7, #32]
 8001a6a:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001a6e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001a72:	eeb0 0a45 	vmov.f32	s0, s10
 8001a76:	eef0 0a65 	vmov.f32	s1, s11
 8001a7a:	eeb0 1a46 	vmov.f32	s2, s12
 8001a7e:	eef0 1a66 	vmov.f32	s3, s13
 8001a82:	eeb0 2a47 	vmov.f32	s4, s14
 8001a86:	eef0 2a67 	vmov.f32	s5, s15
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 f8c9 	bl	8002c22 <vector_init_v>
	vector_init_v(&m->j2[0], m->j1[1]);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	ed93 5b12 	vldr	d5, [r3, #72]	; 0x48
 8001a9c:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001aa0:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001aa4:	eeb0 0a45 	vmov.f32	s0, s10
 8001aa8:	eef0 0a65 	vmov.f32	s1, s11
 8001aac:	eeb0 1a46 	vmov.f32	s2, s12
 8001ab0:	eef0 1a66 	vmov.f32	s3, s13
 8001ab4:	eeb0 2a47 	vmov.f32	s4, s14
 8001ab8:	eef0 2a67 	vmov.f32	s5, s15
 8001abc:	4610      	mov	r0, r2
 8001abe:	f001 f8b0 	bl	8002c22 <vector_init_v>
	//vector_print(m->j1[1]);

	vector_sub(&tmp, m->j2[1], m->j2[0]);
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	ed93 3b18 	vldr	d3, [r3, #96]	; 0x60
 8001ac8:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 8001acc:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	ed93 2b1e 	vldr	d2, [r3, #120]	; 0x78
 8001ad6:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 8001ada:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8001ade:	f107 0320 	add.w	r3, r7, #32
 8001ae2:	eeb0 0a42 	vmov.f32	s0, s4
 8001ae6:	eef0 0a62 	vmov.f32	s1, s5
 8001aea:	eeb0 1a46 	vmov.f32	s2, s12
 8001aee:	eef0 1a66 	vmov.f32	s3, s13
 8001af2:	eeb0 2a47 	vmov.f32	s4, s14
 8001af6:	eef0 2a67 	vmov.f32	s5, s15
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fa11 	bl	8002f22 <vector_sub>
	vector_normalize(&tmp);
 8001b00:	f107 0320 	add.w	r3, r7, #32
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 fa77 	bl	8002ff8 <vector_normalize>
	vector_mult(&tmp, m->len[1]);
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8001b10:	f107 0320 	add.w	r3, r7, #32
 8001b14:	eeb0 0a47 	vmov.f32	s0, s14
 8001b18:	eef0 0a67 	vmov.f32	s1, s15
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fa3d 	bl	8002f9c <vector_mult>
	vector_add(&tmp, tmp, m->j2[0]);
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	ed93 3b18 	vldr	d3, [r3, #96]	; 0x60
 8001b28:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 8001b2c:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8001b30:	ed97 2b08 	vldr	d2, [r7, #32]
 8001b34:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001b38:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001b3c:	f107 0320 	add.w	r3, r7, #32
 8001b40:	eeb0 0a42 	vmov.f32	s0, s4
 8001b44:	eef0 0a62 	vmov.f32	s1, s5
 8001b48:	eeb0 1a46 	vmov.f32	s2, s12
 8001b4c:	eef0 1a66 	vmov.f32	s3, s13
 8001b50:	eeb0 2a47 	vmov.f32	s4, s14
 8001b54:	eef0 2a67 	vmov.f32	s5, s15
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 f9a5 	bl	8002ea8 <vector_add>
	vector_init_v(&m->j2[1], tmp);
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3378      	adds	r3, #120	; 0x78
 8001b62:	ed97 5b08 	vldr	d5, [r7, #32]
 8001b66:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001b6a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001b6e:	eeb0 0a45 	vmov.f32	s0, s10
 8001b72:	eef0 0a65 	vmov.f32	s1, s11
 8001b76:	eeb0 1a46 	vmov.f32	s2, s12
 8001b7a:	eef0 1a66 	vmov.f32	s3, s13
 8001b7e:	eeb0 2a47 	vmov.f32	s4, s14
 8001b82:	eef0 2a67 	vmov.f32	s5, s15
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 f84b 	bl	8002c22 <vector_init_v>
	
	// error check
	vector_init_d(&tmp, x, y, z);
 8001b8c:	f107 0320 	add.w	r3, r7, #32
 8001b90:	ed97 2b00 	vldr	d2, [r7]
 8001b94:	ed97 1b02 	vldr	d1, [r7, #8]
 8001b98:	ed97 0b04 	vldr	d0, [r7, #16]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 f821 	bl	8002be4 <vector_init_d>
	vector_sub(&tmp, tmp, m->j2[1]);
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8001ba8:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8001bac:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 8001bb0:	ed97 2b08 	vldr	d2, [r7, #32]
 8001bb4:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001bb8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001bbc:	f107 0320 	add.w	r3, r7, #32
 8001bc0:	eeb0 0a42 	vmov.f32	s0, s4
 8001bc4:	eef0 0a62 	vmov.f32	s1, s5
 8001bc8:	eeb0 1a46 	vmov.f32	s2, s12
 8001bcc:	eef0 1a66 	vmov.f32	s3, s13
 8001bd0:	eeb0 2a47 	vmov.f32	s4, s14
 8001bd4:	eef0 2a67 	vmov.f32	s5, s15
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 f9a2 	bl	8002f22 <vector_sub>
	//if (fabs(vector_mag(tmp)) > m->error || depth >= 0) {
	if (depth >= 0) {
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db09      	blt.n	8001bf8 <manipulator_forward+0x244>
		manipulator_backward(m, depth, x, y, z);
 8001be4:	ed97 2b00 	vldr	d2, [r7]
 8001be8:	ed97 1b02 	vldr	d1, [r7, #8]
 8001bec:	ed97 0b04 	vldr	d0, [r7, #16]
 8001bf0:	69b9      	ldr	r1, [r7, #24]
 8001bf2:	69f8      	ldr	r0, [r7, #28]
 8001bf4:	f7ff fdb2 	bl	800175c <manipulator_backward>
	}
}
 8001bf8:	bf00      	nop
 8001bfa:	3738      	adds	r7, #56	; 0x38
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <manipulator_calculate_angles>:

void
manipulator_calculate_angles(manipulator_t *m) {
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b094      	sub	sp, #80	; 0x50
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	vector_t x_tmp;
	vector_t y_tmp;
	vector_t x_axis;

	// set temporary vector to j1b on x plane to calculate q1 and q2
	vector_init_d(&x_tmp, m->j1[1].x, 0, m->j1[1].z);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001c14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c18:	eeb0 2a46 	vmov.f32	s4, s12
 8001c1c:	eef0 2a66 	vmov.f32	s5, s13
 8001c20:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8001d98 <manipulator_calculate_angles+0x198>
 8001c24:	eeb0 0a47 	vmov.f32	s0, s14
 8001c28:	eef0 0a67 	vmov.f32	s1, s15
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 ffd9 	bl	8002be4 <vector_init_d>
	// set temporary vector to j2b
	vector_init_v(&y_tmp, m->j2[1]);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8001c38:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 8001c3c:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8001c40:	f107 0320 	add.w	r3, r7, #32
 8001c44:	eeb0 0a45 	vmov.f32	s0, s10
 8001c48:	eef0 0a65 	vmov.f32	s1, s11
 8001c4c:	eeb0 1a46 	vmov.f32	s2, s12
 8001c50:	eef0 1a66 	vmov.f32	s3, s13
 8001c54:	eeb0 2a47 	vmov.f32	s4, s14
 8001c58:	eef0 2a67 	vmov.f32	s5, s15
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 ffe0 	bl	8002c22 <vector_init_v>
	// set x axis vector to compute q1
	vector_init_d(&x_axis, 1, 0, 0);
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	ed9f 2b4c 	vldr	d2, [pc, #304]	; 8001d98 <manipulator_calculate_angles+0x198>
 8001c6a:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8001d98 <manipulator_calculate_angles+0x198>
 8001c6e:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 8001da0 <manipulator_calculate_angles+0x1a0>
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 ffb6 	bl	8002be4 <vector_init_d>
	// move our tmp vector to origin
	vector_sub(&y_tmp, y_tmp, m->j2[0]);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	ed93 3b18 	vldr	d3, [r3, #96]	; 0x60
 8001c7e:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 8001c82:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8001c86:	ed97 2b08 	vldr	d2, [r7, #32]
 8001c8a:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001c8e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001c92:	f107 0320 	add.w	r3, r7, #32
 8001c96:	eeb0 0a42 	vmov.f32	s0, s4
 8001c9a:	eef0 0a62 	vmov.f32	s1, s5
 8001c9e:	eeb0 1a46 	vmov.f32	s2, s12
 8001ca2:	eef0 1a66 	vmov.f32	s3, s13
 8001ca6:	eeb0 2a47 	vmov.f32	s4, s14
 8001caa:	eef0 2a67 	vmov.f32	s5, s15
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 f937 	bl	8002f22 <vector_sub>
	m->q[0] = vector_angle(x_tmp, x_axis);
 8001cb4:	ed97 3b02 	vldr	d3, [r7, #8]
 8001cb8:	ed97 4b04 	vldr	d4, [r7, #16]
 8001cbc:	ed97 5b06 	vldr	d5, [r7, #24]
 8001cc0:	ed97 2b0e 	vldr	d2, [r7, #56]	; 0x38
 8001cc4:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8001cc8:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001ccc:	eeb0 0a42 	vmov.f32	s0, s4
 8001cd0:	eef0 0a62 	vmov.f32	s1, s5
 8001cd4:	eeb0 1a46 	vmov.f32	s2, s12
 8001cd8:	eef0 1a66 	vmov.f32	s3, s13
 8001cdc:	eeb0 2a47 	vmov.f32	s4, s14
 8001ce0:	eef0 2a67 	vmov.f32	s5, s15
 8001ce4:	f001 f860 	bl	8002da8 <vector_angle>
 8001ce8:	eeb0 7a40 	vmov.f32	s14, s0
 8001cec:	eef0 7a60 	vmov.f32	s15, s1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	m->q[1] = vector_angle(x_tmp, m->j1[1]);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	ed93 3b12 	vldr	d3, [r3, #72]	; 0x48
 8001cfc:	ed93 4b14 	vldr	d4, [r3, #80]	; 0x50
 8001d00:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 8001d04:	ed97 2b0e 	vldr	d2, [r7, #56]	; 0x38
 8001d08:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8001d0c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001d10:	eeb0 0a42 	vmov.f32	s0, s4
 8001d14:	eef0 0a62 	vmov.f32	s1, s5
 8001d18:	eeb0 1a46 	vmov.f32	s2, s12
 8001d1c:	eef0 1a66 	vmov.f32	s3, s13
 8001d20:	eeb0 2a47 	vmov.f32	s4, s14
 8001d24:	eef0 2a67 	vmov.f32	s5, s15
 8001d28:	f001 f83e 	bl	8002da8 <vector_angle>
 8001d2c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d30:	eef0 7a60 	vmov.f32	s15, s1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
	m->q[2] = m->q[1] + vector_angle(x_tmp, y_tmp);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8001d40:	ed97 3b08 	vldr	d3, [r7, #32]
 8001d44:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 8001d48:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001d4c:	ed97 2b0e 	vldr	d2, [r7, #56]	; 0x38
 8001d50:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8001d54:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001d58:	eeb0 0a42 	vmov.f32	s0, s4
 8001d5c:	eef0 0a62 	vmov.f32	s1, s5
 8001d60:	eeb0 1a46 	vmov.f32	s2, s12
 8001d64:	eef0 1a66 	vmov.f32	s3, s13
 8001d68:	eeb0 2a47 	vmov.f32	s4, s14
 8001d6c:	eef0 2a67 	vmov.f32	s5, s15
 8001d70:	f001 f81a 	bl	8002da8 <vector_angle>
 8001d74:	ec53 2b10 	vmov	r2, r3, d0
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	f7fe fa7e 	bl	800027c <__adddf3>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	//manipulator_print(*m);
}
 8001d8a:	bf00      	nop
 8001d8c:	3750      	adds	r7, #80	; 0x50
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bdb0      	pop	{r4, r5, r7, pc}
 8001d92:	bf00      	nop
 8001d94:	f3af 8000 	nop.w
	...
 8001da4:	3ff00000 	.word	0x3ff00000

08001da8 <manipulator_update>:

void
manipulator_update(manipulator_t *m) {
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	manipulator_backward(m, 5, m->effector.x, m->effector.y, m->effector.z);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	ed93 7b06 	vldr	d7, [r3, #24]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	ed93 6b08 	vldr	d6, [r3, #32]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8001dc2:	eeb0 2a45 	vmov.f32	s4, s10
 8001dc6:	eef0 2a65 	vmov.f32	s5, s11
 8001dca:	eeb0 1a46 	vmov.f32	s2, s12
 8001dce:	eef0 1a66 	vmov.f32	s3, s13
 8001dd2:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd6:	eef0 0a67 	vmov.f32	s1, s15
 8001dda:	2105      	movs	r1, #5
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fcbd 	bl	800175c <manipulator_backward>
	manipulator_calculate_angles(m);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff0c 	bl	8001c00 <manipulator_calculate_angles>
	servo_set(&m->servo[0], (int)(m->q[0] * 180 / M_PI) * 10, 0);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <manipulator_update+0x148>)
 8001dfa:	f7fe fbf5 	bl	80005e8 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	a338      	add	r3, pc, #224	; (adr r3, 8001ee8 <manipulator_update+0x140>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fd16 	bl	800083c <__aeabi_ddiv>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7fe fe96 	bl	8000b48 <__aeabi_d2iz>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f000 f8b6 	bl	8001fa0 <servo_set>
	servo_set(&m->servo[1], (int)(m->q[1] * 180 / M_PI)* 10, 0);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <manipulator_update+0x148>)
 8001e46:	f7fe fbcf 	bl	80005e8 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	a325      	add	r3, pc, #148	; (adr r3, 8001ee8 <manipulator_update+0x140>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	f7fe fcf0 	bl	800083c <__aeabi_ddiv>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe fe70 	bl	8000b48 <__aeabi_d2iz>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2200      	movs	r2, #0
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f000 f890 	bl	8001fa0 <servo_set>
	servo_set(&m->servo[2], (int)((180 - m->q[2] * 180 / M_PI)) * 10, 1); // TUTAJ 1 A NIE 0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <manipulator_update+0x148>)
 8001e92:	f7fe fba9 	bl	80005e8 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	a312      	add	r3, pc, #72	; (adr r3, 8001ee8 <manipulator_update+0x140>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	f7fe fcca 	bl	800083c <__aeabi_ddiv>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	f04f 0000 	mov.w	r0, #0
 8001eb0:	490f      	ldr	r1, [pc, #60]	; (8001ef0 <manipulator_update+0x148>)
 8001eb2:	f7fe f9e1 	bl	8000278 <__aeabi_dsub>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe fe43 	bl	8000b48 <__aeabi_d2iz>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	0092      	lsls	r2, r2, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f000 f863 	bl	8001fa0 <servo_set>
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	54442d18 	.word	0x54442d18
 8001eec:	400921fb 	.word	0x400921fb
 8001ef0:	40668000 	.word	0x40668000

08001ef4 <servo_init>:
		uint8_t tch,
		uint16_t a,
		uint16_t amin,
		uint16_t amax,
		uint16_t pmin,
		uint16_t pmax) {
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	f107 0014 	add.w	r0, r7, #20
 8001f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	servo->htim = htm;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	224c      	movs	r2, #76	; 0x4c
 8001f10:	4619      	mov	r1, r3
 8001f12:	f005 f927 	bl	8007164 <memcpy>
	servo->tim_channel = tch;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001f1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	servo->angle = a;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001f26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	servo->angle_min = amin;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8001f30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	servo->angle_max = amax;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001f3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	servo->pwm_min = pmin;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8001f44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	servo->pwm_max = pmax;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8001f4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	//servo_set(servo, a, 0);
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f5c:	b004      	add	sp, #16
 8001f5e:	4770      	bx	lr

08001f60 <servo_step>:

uint16_t
servo_step(servo_t servo) {
 8001f60:	b084      	sub	sp, #16
 8001f62:	b490      	push	{r4, r7}
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	f107 0408 	add.w	r4, r7, #8
 8001f6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return ((1000 * (servo.pwm_max - servo.pwm_min)) / (servo.angle_max - servo.angle_min));
 8001f6e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001f72:	461a      	mov	r2, r3
 8001f74:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f7e:	fb02 f203 	mul.w	r2, r2, r3
 8001f82:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001f86:	4619      	mov	r1, r3
 8001f88:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001f8c:	1acb      	subs	r3, r1, r3
 8001f8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f92:	b29b      	uxth	r3, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc90      	pop	{r4, r7}
 8001f9a:	b004      	add	sp, #16
 8001f9c:	4770      	bx	lr
	...

08001fa0 <servo_set>:

void
servo_set(servo_t* servo, uint16_t angle, uint8_t mode) {
 8001fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa2:	b097      	sub	sp, #92	; 0x5c
 8001fa4:	af12      	add	r7, sp, #72	; 0x48
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
	uint16_t val;
	servo->angle = angle;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	if (angle > servo->angle_max) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d904      	bls.n	8001fce <servo_set+0x2e>
		angle = servo->angle_max;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	e009      	b.n	8001fe2 <servo_set+0x42>
	} else if (angle < servo->angle_min) {
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd4:	887a      	ldrh	r2, [r7, #2]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d203      	bcs.n	8001fe2 <servo_set+0x42>
		angle = servo->angle_min;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe0:	807b      	strh	r3, [r7, #2]
	}
	if (mode) {
 8001fe2:	787b      	ldrb	r3, [r7, #1]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <servo_set+0x8a>
		val = servo->pwm_min + ((angle - servo->angle_min) * servo_step(*servo)) / 1000;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8b3 5054 	ldrh.w	r5, [r3, #84]	; 0x54
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8001ff6:	1a9e      	subs	r6, r3, r2
 8001ff8:	687c      	ldr	r4, [r7, #4]
 8001ffa:	4668      	mov	r0, sp
 8001ffc:	f104 0310 	add.w	r3, r4, #16
 8002000:	2248      	movs	r2, #72	; 0x48
 8002002:	4619      	mov	r1, r3
 8002004:	f005 f8ae 	bl	8007164 <memcpy>
 8002008:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800200c:	f7ff ffa8 	bl	8001f60 <servo_step>
 8002010:	4603      	mov	r3, r0
 8002012:	fb03 f306 	mul.w	r3, r3, r6
 8002016:	4a32      	ldr	r2, [pc, #200]	; (80020e0 <servo_set+0x140>)
 8002018:	fb82 1203 	smull	r1, r2, r2, r3
 800201c:	1192      	asrs	r2, r2, #6
 800201e:	17db      	asrs	r3, r3, #31
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	b29b      	uxth	r3, r3
 8002024:	442b      	add	r3, r5
 8002026:	81fb      	strh	r3, [r7, #14]
 8002028:	e01f      	b.n	800206a <servo_set+0xca>
	} else {
		val = servo->pwm_max - ((angle - servo->angle_min) * servo_step(*servo)) / 1000;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f8b3 5056 	ldrh.w	r5, [r3, #86]	; 0x56
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8002038:	1a9e      	subs	r6, r3, r2
 800203a:	687c      	ldr	r4, [r7, #4]
 800203c:	4668      	mov	r0, sp
 800203e:	f104 0310 	add.w	r3, r4, #16
 8002042:	2248      	movs	r2, #72	; 0x48
 8002044:	4619      	mov	r1, r3
 8002046:	f005 f88d 	bl	8007164 <memcpy>
 800204a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800204e:	f7ff ff87 	bl	8001f60 <servo_step>
 8002052:	4603      	mov	r3, r0
 8002054:	fb03 f306 	mul.w	r3, r3, r6
 8002058:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <servo_set+0x140>)
 800205a:	fb82 1203 	smull	r1, r2, r2, r3
 800205e:	1192      	asrs	r2, r2, #6
 8002060:	17db      	asrs	r3, r3, #31
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	442b      	add	r3, r5
 8002068:	81fb      	strh	r3, [r7, #14]
	}
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d104      	bne.n	800207e <servo_set+0xde>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	89fa      	ldrh	r2, [r7, #14]
 800207a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800207c:	e02b      	b.n	80020d6 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002084:	2b04      	cmp	r3, #4
 8002086:	d104      	bne.n	8002092 <servo_set+0xf2>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	89fb      	ldrh	r3, [r7, #14]
 800208e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002090:	e021      	b.n	80020d6 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002098:	2b08      	cmp	r3, #8
 800209a:	d104      	bne.n	80020a6 <servo_set+0x106>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80020a4:	e017      	b.n	80020d6 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80020ac:	2b0c      	cmp	r3, #12
 80020ae:	d104      	bne.n	80020ba <servo_set+0x11a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80020b8:	e00d      	b.n	80020d6 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d104      	bne.n	80020ce <servo_set+0x12e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	89fb      	ldrh	r3, [r7, #14]
 80020ca:	6593      	str	r3, [r2, #88]	; 0x58
}
 80020cc:	e003      	b.n	80020d6 <servo_set+0x136>
	__HAL_TIM_SET_COMPARE(&servo->htim, servo->tim_channel, val);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020de:	bf00      	nop
 80020e0:	10624dd3 	.word	0x10624dd3

080020e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_MspInit+0x44>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_MspInit+0x44>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6193      	str	r3, [r2, #24]
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <HAL_MspInit+0x44>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_MspInit+0x44>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <HAL_MspInit+0x44>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	61d3      	str	r3, [r2, #28]
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_MspInit+0x44>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800211a:	2007      	movs	r0, #7
 800211c:	f001 f934 	bl	8003388 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000

0800212c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <HardFault_Handler+0x4>

08002140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <MemManage_Handler+0x4>

08002146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <BusFault_Handler+0x4>

0800214c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <UsageFault_Handler+0x4>

08002152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002180:	f000 ffee 	bl	8003160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}

08002188 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800218c:	2010      	movs	r0, #16
 800218e:	f001 fc47 	bl	8003a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <DMA1_Channel6_IRQHandler+0x10>)
 800219e:	f001 f9f2 	bl	8003586 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200004d8 	.word	0x200004d8

080021ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <USART2_IRQHandler+0x10>)
 80021b2:	f004 f8b3 	bl	800631c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000280 	.word	0x20000280

080021c0 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <TIM6_DAC1_IRQHandler+0x10>)
 80021c6:	f003 f84f 	bl	8005268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200003f4 	.word	0x200003f4

080021d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	e00a      	b.n	80021fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021e6:	f3af 8000 	nop.w
 80021ea:	4601      	mov	r1, r0
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	60ba      	str	r2, [r7, #8]
 80021f2:	b2ca      	uxtb	r2, r1
 80021f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	dbf0      	blt.n	80021e6 <_read+0x12>
	}

return len;
 8002204:	687b      	ldr	r3, [r7, #4]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_close>:
	}
	return len;
}

int _close(int file)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
	return -1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002236:	605a      	str	r2, [r3, #4]
	return 0;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <_isatty>:

int _isatty(int file)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
	return 1;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
	return 0;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <_sbrk+0x5c>)
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <_sbrk+0x60>)
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <_sbrk+0x64>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <_sbrk+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d207      	bcs.n	80022b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a8:	f004 ff32 	bl	8007110 <__errno>
 80022ac:	4603      	mov	r3, r0
 80022ae:	220c      	movs	r2, #12
 80022b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022b6:	e009      	b.n	80022cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <_sbrk+0x64>)
 80022c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20003000 	.word	0x20003000
 80022d8:	00000400 	.word	0x00000400
 80022dc:	20000270 	.word	0x20000270
 80022e0:	20000530 	.word	0x20000530

080022e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <SystemInit+0x20>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <SystemInit+0x20>)
 80022f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	; 0x30
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	2224      	movs	r2, #36	; 0x24
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f004 ff32 	bl	8007180 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800231c:	463b      	mov	r3, r7
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002326:	4b21      	ldr	r3, [pc, #132]	; (80023ac <MX_TIM2_Init+0xa4>)
 8002328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800232c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800232e:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <MX_TIM2_Init+0xa4>)
 8002330:	2200      	movs	r2, #0
 8002332:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <MX_TIM2_Init+0xa4>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800233a:	4b1c      	ldr	r3, [pc, #112]	; (80023ac <MX_TIM2_Init+0xa4>)
 800233c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002340:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002342:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <MX_TIM2_Init+0xa4>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002348:	4b18      	ldr	r3, [pc, #96]	; (80023ac <MX_TIM2_Init+0xa4>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800234e:	2301      	movs	r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002356:	2301      	movs	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800235e:	230f      	movs	r3, #15
 8002360:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002366:	2301      	movs	r3, #1
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800236a:	2300      	movs	r3, #0
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800236e:	230f      	movs	r3, #15
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	4619      	mov	r1, r3
 8002378:	480c      	ldr	r0, [pc, #48]	; (80023ac <MX_TIM2_Init+0xa4>)
 800237a:	f002 fe41 	bl	8005000 <HAL_TIM_Encoder_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002384:	f7fe ff3c 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002390:	463b      	mov	r3, r7
 8002392:	4619      	mov	r1, r3
 8002394:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_TIM2_Init+0xa4>)
 8002396:	f003 fd03 	bl	8005da0 <HAL_TIMEx_MasterConfigSynchronization>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80023a0:	f7fe ff2e 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023a4:	bf00      	nop
 80023a6:	3730      	adds	r7, #48	; 0x30
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000440 	.word	0x20000440

080023b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023c2:	463b      	mov	r3, r7
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
 80023d0:	615a      	str	r2, [r3, #20]
 80023d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <MX_TIM3_Init+0xac>)
 80023d6:	4a22      	ldr	r2, [pc, #136]	; (8002460 <MX_TIM3_Init+0xb0>)
 80023d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM3_PWM_PRESCALER;
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <MX_TIM3_Init+0xac>)
 80023dc:	2247      	movs	r2, #71	; 0x47
 80023de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <MX_TIM3_Init+0xac>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_PWM_PERIOD;
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <MX_TIM3_Init+0xac>)
 80023e8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80023ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <MX_TIM3_Init+0xac>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <MX_TIM3_Init+0xac>)
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023fa:	4818      	ldr	r0, [pc, #96]	; (800245c <MX_TIM3_Init+0xac>)
 80023fc:	f002 fcbd 	bl	8004d7a <HAL_TIM_PWM_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002406:	f7fe fefb 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	4810      	ldr	r0, [pc, #64]	; (800245c <MX_TIM3_Init+0xac>)
 800241a:	f003 fcc1 	bl	8005da0 <HAL_TIMEx_MasterConfigSynchronization>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002424:	f7fe feec 	bl	8001200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002428:	2360      	movs	r3, #96	; 0x60
 800242a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	2200      	movs	r2, #0
 800243c:	4619      	mov	r1, r3
 800243e:	4807      	ldr	r0, [pc, #28]	; (800245c <MX_TIM3_Init+0xac>)
 8002440:	f003 f832 	bl	80054a8 <HAL_TIM_PWM_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800244a:	f7fe fed9 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800244e:	4803      	ldr	r0, [pc, #12]	; (800245c <MX_TIM3_Init+0xac>)
 8002450:	f000 fa7c 	bl	800294c <HAL_TIM_MspPostInit>

}
 8002454:	bf00      	nop
 8002456:	3728      	adds	r7, #40	; 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200003a8 	.word	0x200003a8
 8002460:	40000400 	.word	0x40000400

08002464 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <MX_TIM6_Init+0x68>)
 8002476:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <MX_TIM6_Init+0x6c>)
 8002478:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PRINT_PRESCALER;
 800247a:	4b14      	ldr	r3, [pc, #80]	; (80024cc <MX_TIM6_Init+0x68>)
 800247c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002480:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <MX_TIM6_Init+0x68>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_PRINT_PERIOD;
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <MX_TIM6_Init+0x68>)
 800248a:	f242 720f 	movw	r2, #9999	; 0x270f
 800248e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_TIM6_Init+0x68>)
 8002492:	2200      	movs	r2, #0
 8002494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002496:	480d      	ldr	r0, [pc, #52]	; (80024cc <MX_TIM6_Init+0x68>)
 8002498:	f002 fc18 	bl	8004ccc <HAL_TIM_Base_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80024a2:	f7fe fead 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	; (80024cc <MX_TIM6_Init+0x68>)
 80024b4:	f003 fc74 	bl	8005da0 <HAL_TIMEx_MasterConfigSynchronization>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80024be:	f7fe fe9f 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200003f4 	.word	0x200003f4
 80024d0:	40001000 	.word	0x40001000

080024d4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b096      	sub	sp, #88	; 0x58
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	611a      	str	r2, [r3, #16]
 80024f6:	615a      	str	r2, [r3, #20]
 80024f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	222c      	movs	r2, #44	; 0x2c
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f004 fe3d 	bl	8007180 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002506:	4b34      	ldr	r3, [pc, #208]	; (80025d8 <MX_TIM15_Init+0x104>)
 8002508:	4a34      	ldr	r2, [pc, #208]	; (80025dc <MX_TIM15_Init+0x108>)
 800250a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = TIM15_PWM_PRESCALER;
 800250c:	4b32      	ldr	r3, [pc, #200]	; (80025d8 <MX_TIM15_Init+0x104>)
 800250e:	2247      	movs	r2, #71	; 0x47
 8002510:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002512:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <MX_TIM15_Init+0x104>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = TIM15_PWM_PERIOD;
 8002518:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <MX_TIM15_Init+0x104>)
 800251a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800251e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <MX_TIM15_Init+0x104>)
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002526:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <MX_TIM15_Init+0x104>)
 8002528:	2200      	movs	r2, #0
 800252a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800252c:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <MX_TIM15_Init+0x104>)
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002532:	4829      	ldr	r0, [pc, #164]	; (80025d8 <MX_TIM15_Init+0x104>)
 8002534:	f002 fc21 	bl	8004d7a <HAL_TIM_PWM_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800253e:	f7fe fe5f 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800254a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800254e:	4619      	mov	r1, r3
 8002550:	4821      	ldr	r0, [pc, #132]	; (80025d8 <MX_TIM15_Init+0x104>)
 8002552:	f003 fc25 	bl	8005da0 <HAL_TIMEx_MasterConfigSynchronization>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800255c:	f7fe fe50 	bl	8001200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002560:	2360      	movs	r3, #96	; 0x60
 8002562:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002568:	2300      	movs	r3, #0
 800256a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800256c:	2300      	movs	r3, #0
 800256e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002578:	2300      	movs	r3, #0
 800257a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800257c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002580:	2200      	movs	r2, #0
 8002582:	4619      	mov	r1, r3
 8002584:	4814      	ldr	r0, [pc, #80]	; (80025d8 <MX_TIM15_Init+0x104>)
 8002586:	f002 ff8f 	bl	80054a8 <HAL_TIM_PWM_ConfigChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002590:	f7fe fe36 	bl	8001200 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4807      	ldr	r0, [pc, #28]	; (80025d8 <MX_TIM15_Init+0x104>)
 80025bc:	f003 fc5e 	bl	8005e7c <HAL_TIMEx_ConfigBreakDeadTime>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80025c6:	f7fe fe1b 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80025ca:	4803      	ldr	r0, [pc, #12]	; (80025d8 <MX_TIM15_Init+0x104>)
 80025cc:	f000 f9be 	bl	800294c <HAL_TIM_MspPostInit>

}
 80025d0:	bf00      	nop
 80025d2:	3758      	adds	r7, #88	; 0x58
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000310 	.word	0x20000310
 80025dc:	40014000 	.word	0x40014000

080025e0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b092      	sub	sp, #72	; 0x48
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]
 80025f4:	611a      	str	r2, [r3, #16]
 80025f6:	615a      	str	r2, [r3, #20]
 80025f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025fa:	463b      	mov	r3, r7
 80025fc:	222c      	movs	r2, #44	; 0x2c
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f004 fdbd 	bl	8007180 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002606:	4b31      	ldr	r3, [pc, #196]	; (80026cc <MX_TIM16_Init+0xec>)
 8002608:	4a31      	ldr	r2, [pc, #196]	; (80026d0 <MX_TIM16_Init+0xf0>)
 800260a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = TIM16_PWM_PRESCALER;
 800260c:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <MX_TIM16_Init+0xec>)
 800260e:	2247      	movs	r2, #71	; 0x47
 8002610:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002612:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <MX_TIM16_Init+0xec>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_PWM_PERIOD;
 8002618:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <MX_TIM16_Init+0xec>)
 800261a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800261e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002620:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <MX_TIM16_Init+0xec>)
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002626:	4b29      	ldr	r3, [pc, #164]	; (80026cc <MX_TIM16_Init+0xec>)
 8002628:	2200      	movs	r2, #0
 800262a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <MX_TIM16_Init+0xec>)
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002632:	4826      	ldr	r0, [pc, #152]	; (80026cc <MX_TIM16_Init+0xec>)
 8002634:	f002 fb4a 	bl	8004ccc <HAL_TIM_Base_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800263e:	f7fe fddf 	bl	8001200 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002642:	4822      	ldr	r0, [pc, #136]	; (80026cc <MX_TIM16_Init+0xec>)
 8002644:	f002 fb99 	bl	8004d7a <HAL_TIM_PWM_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800264e:	f7fe fdd7 	bl	8001200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002652:	2360      	movs	r3, #96	; 0x60
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800265a:	2300      	movs	r3, #0
 800265c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800265e:	2300      	movs	r3, #0
 8002660:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800266e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002672:	2200      	movs	r2, #0
 8002674:	4619      	mov	r1, r3
 8002676:	4815      	ldr	r0, [pc, #84]	; (80026cc <MX_TIM16_Init+0xec>)
 8002678:	f002 ff16 	bl	80054a8 <HAL_TIM_PWM_ConfigChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002682:	f7fe fdbd 	bl	8001200 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800269a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80026a8:	463b      	mov	r3, r7
 80026aa:	4619      	mov	r1, r3
 80026ac:	4807      	ldr	r0, [pc, #28]	; (80026cc <MX_TIM16_Init+0xec>)
 80026ae:	f003 fbe5 	bl	8005e7c <HAL_TIMEx_ConfigBreakDeadTime>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80026b8:	f7fe fda2 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80026bc:	4803      	ldr	r0, [pc, #12]	; (80026cc <MX_TIM16_Init+0xec>)
 80026be:	f000 f945 	bl	800294c <HAL_TIM_MspPostInit>

}
 80026c2:	bf00      	nop
 80026c4:	3748      	adds	r7, #72	; 0x48
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000048c 	.word	0x2000048c
 80026d0:	40014400 	.word	0x40014400

080026d4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b092      	sub	sp, #72	; 0x48
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	615a      	str	r2, [r3, #20]
 80026ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026ee:	463b      	mov	r3, r7
 80026f0:	222c      	movs	r2, #44	; 0x2c
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f004 fd43 	bl	8007180 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <MX_TIM17_Init+0xec>)
 80026fc:	4a31      	ldr	r2, [pc, #196]	; (80027c4 <MX_TIM17_Init+0xf0>)
 80026fe:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = TIM17_PWM_PRESCALER;
 8002700:	4b2f      	ldr	r3, [pc, #188]	; (80027c0 <MX_TIM17_Init+0xec>)
 8002702:	2247      	movs	r2, #71	; 0x47
 8002704:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002706:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <MX_TIM17_Init+0xec>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = TIM17_PWM_PERIOD;
 800270c:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <MX_TIM17_Init+0xec>)
 800270e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002712:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <MX_TIM17_Init+0xec>)
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800271a:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <MX_TIM17_Init+0xec>)
 800271c:	2200      	movs	r2, #0
 800271e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <MX_TIM17_Init+0xec>)
 8002722:	2280      	movs	r2, #128	; 0x80
 8002724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002726:	4826      	ldr	r0, [pc, #152]	; (80027c0 <MX_TIM17_Init+0xec>)
 8002728:	f002 fad0 	bl	8004ccc <HAL_TIM_Base_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002732:	f7fe fd65 	bl	8001200 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002736:	4822      	ldr	r0, [pc, #136]	; (80027c0 <MX_TIM17_Init+0xec>)
 8002738:	f002 fb1f 	bl	8004d7a <HAL_TIM_PWM_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002742:	f7fe fd5d 	bl	8001200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002746:	2360      	movs	r3, #96	; 0x60
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800274e:	2300      	movs	r3, #0
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002752:	2300      	movs	r3, #0
 8002754:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002766:	2200      	movs	r2, #0
 8002768:	4619      	mov	r1, r3
 800276a:	4815      	ldr	r0, [pc, #84]	; (80027c0 <MX_TIM17_Init+0xec>)
 800276c:	f002 fe9c 	bl	80054a8 <HAL_TIM_PWM_ConfigChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002776:	f7fe fd43 	bl	8001200 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800278e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002792:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800279c:	463b      	mov	r3, r7
 800279e:	4619      	mov	r1, r3
 80027a0:	4807      	ldr	r0, [pc, #28]	; (80027c0 <MX_TIM17_Init+0xec>)
 80027a2:	f003 fb6b 	bl	8005e7c <HAL_TIMEx_ConfigBreakDeadTime>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80027ac:	f7fe fd28 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80027b0:	4803      	ldr	r0, [pc, #12]	; (80027c0 <MX_TIM17_Init+0xec>)
 80027b2:	f000 f8cb 	bl	800294c <HAL_TIM_MspPostInit>

}
 80027b6:	bf00      	nop
 80027b8:	3748      	adds	r7, #72	; 0x48
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	2000035c 	.word	0x2000035c
 80027c4:	40014800 	.word	0x40014800

080027c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e8:	d128      	bne.n	800283c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_TIM_Encoder_MspInit+0x7c>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4a15      	ldr	r2, [pc, #84]	; (8002844 <HAL_TIM_Encoder_MspInit+0x7c>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	61d3      	str	r3, [r2, #28]
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <HAL_TIM_Encoder_MspInit+0x7c>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280c:	6153      	str	r3, [r2, #20]
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 800281a:	2303      	movs	r3, #3
 800281c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800282a:	2301      	movs	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002838:	f000 ff68 	bl	800370c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800283c:	bf00      	nop
 800283e:	3728      	adds	r7, #40	; 0x28
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000

08002848 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a13      	ldr	r2, [pc, #76]	; (80028a4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10c      	bne.n	8002874 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <HAL_TIM_PWM_MspInit+0x60>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <HAL_TIM_PWM_MspInit+0x60>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	61d3      	str	r3, [r2, #28]
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_TIM_PWM_MspInit+0x60>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002872:	e010      	b.n	8002896 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM15)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <HAL_TIM_PWM_MspInit+0x64>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10b      	bne.n	8002896 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_TIM_PWM_MspInit+0x60>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_TIM_PWM_MspInit+0x60>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6193      	str	r3, [r2, #24]
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <HAL_TIM_PWM_MspInit+0x60>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40014000 	.word	0x40014000

080028b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_TIM_Base_MspInit+0x8c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d114      	bne.n	80028ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028c2:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <HAL_TIM_Base_MspInit+0x90>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_TIM_Base_MspInit+0x90>)
 80028c8:	f043 0310 	orr.w	r3, r3, #16
 80028cc:	61d3      	str	r3, [r2, #28]
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <HAL_TIM_Base_MspInit+0x90>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2100      	movs	r1, #0
 80028de:	2036      	movs	r0, #54	; 0x36
 80028e0:	f000 fd5d 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80028e4:	2036      	movs	r0, #54	; 0x36
 80028e6:	f000 fd76 	bl	80033d6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80028ea:	e022      	b.n	8002932 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM16)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a14      	ldr	r2, [pc, #80]	; (8002944 <HAL_TIM_Base_MspInit+0x94>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10c      	bne.n	8002910 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_TIM_Base_MspInit+0x90>)
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <HAL_TIM_Base_MspInit+0x90>)
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002900:	6193      	str	r3, [r2, #24]
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_TIM_Base_MspInit+0x90>)
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
}
 800290e:	e010      	b.n	8002932 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM17)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <HAL_TIM_Base_MspInit+0x98>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d10b      	bne.n	8002932 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_TIM_Base_MspInit+0x90>)
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	4a08      	ldr	r2, [pc, #32]	; (8002940 <HAL_TIM_Base_MspInit+0x90>)
 8002920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002924:	6193      	str	r3, [r2, #24]
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_TIM_Base_MspInit+0x90>)
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
}
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40001000 	.word	0x40001000
 8002940:	40021000 	.word	0x40021000
 8002944:	40014400 	.word	0x40014400
 8002948:	40014800 	.word	0x40014800

0800294c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08c      	sub	sp, #48	; 0x30
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 031c 	add.w	r3, r7, #28
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a45      	ldr	r2, [pc, #276]	; (8002a80 <HAL_TIM_MspPostInit+0x134>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d11c      	bne.n	80029a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800296e:	4b45      	ldr	r3, [pc, #276]	; (8002a84 <HAL_TIM_MspPostInit+0x138>)
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4a44      	ldr	r2, [pc, #272]	; (8002a84 <HAL_TIM_MspPostInit+0x138>)
 8002974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002978:	6153      	str	r3, [r2, #20]
 800297a:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <HAL_TIM_MspPostInit+0x138>)
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 8002986:	2340      	movs	r3, #64	; 0x40
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002996:	2302      	movs	r3, #2
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	4839      	ldr	r0, [pc, #228]	; (8002a88 <HAL_TIM_MspPostInit+0x13c>)
 80029a2:	f000 feb3 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80029a6:	e067      	b.n	8002a78 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM15)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a37      	ldr	r2, [pc, #220]	; (8002a8c <HAL_TIM_MspPostInit+0x140>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d11d      	bne.n	80029ee <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b2:	4b34      	ldr	r3, [pc, #208]	; (8002a84 <HAL_TIM_MspPostInit+0x138>)
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <HAL_TIM_MspPostInit+0x138>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029bc:	6153      	str	r3, [r2, #20]
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_TIM_MspPostInit+0x138>)
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 80029ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2300      	movs	r3, #0
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80029dc:	2301      	movs	r3, #1
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 80029e0:	f107 031c 	add.w	r3, r7, #28
 80029e4:	4619      	mov	r1, r3
 80029e6:	482a      	ldr	r0, [pc, #168]	; (8002a90 <HAL_TIM_MspPostInit+0x144>)
 80029e8:	f000 fe90 	bl	800370c <HAL_GPIO_Init>
}
 80029ec:	e044      	b.n	8002a78 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM16)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <HAL_TIM_MspPostInit+0x148>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d11d      	bne.n	8002a34 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_TIM_MspPostInit+0x138>)
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <HAL_TIM_MspPostInit+0x138>)
 80029fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a02:	6153      	str	r3, [r2, #20]
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <HAL_TIM_MspPostInit+0x138>)
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO3_PWM_Pin;
 8002a10:	2340      	movs	r3, #64	; 0x40
 8002a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002a20:	2301      	movs	r3, #1
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2e:	f000 fe6d 	bl	800370c <HAL_GPIO_Init>
}
 8002a32:	e021      	b.n	8002a78 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM17)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <HAL_TIM_MspPostInit+0x14c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d11c      	bne.n	8002a78 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_TIM_MspPostInit+0x138>)
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	4a10      	ldr	r2, [pc, #64]	; (8002a84 <HAL_TIM_MspPostInit+0x138>)
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	6153      	str	r3, [r2, #20]
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_TIM_MspPostInit+0x138>)
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO4_PWM_Pin;
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002a66:	2301      	movs	r3, #1
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO4_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a6a:	f107 031c 	add.w	r3, r7, #28
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a74:	f000 fe4a 	bl	800370c <HAL_GPIO_Init>
}
 8002a78:	bf00      	nop
 8002a7a:	3730      	adds	r7, #48	; 0x30
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40021000 	.word	0x40021000
 8002a88:	48000800 	.word	0x48000800
 8002a8c:	40014000 	.word	0x40014000
 8002a90:	48000400 	.word	0x48000400
 8002a94:	40014400 	.word	0x40014400
 8002a98:	40014800 	.word	0x40014800

08002a9c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <MX_USART2_UART_Init+0x58>)
 8002aa2:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <MX_USART2_UART_Init+0x5c>)
 8002aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <MX_USART2_UART_Init+0x58>)
 8002aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <MX_USART2_UART_Init+0x58>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <MX_USART2_UART_Init+0x58>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <MX_USART2_UART_Init+0x58>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <MX_USART2_UART_Init+0x58>)
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <MX_USART2_UART_Init+0x58>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <MX_USART2_UART_Init+0x58>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <MX_USART2_UART_Init+0x58>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <MX_USART2_UART_Init+0x58>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ade:	4805      	ldr	r0, [pc, #20]	; (8002af4 <MX_USART2_UART_Init+0x58>)
 8002ae0:	f003 fa62 	bl	8005fa8 <HAL_UART_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002aea:	f7fe fb89 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000280 	.word	0x20000280
 8002af8:	40004400 	.word	0x40004400

08002afc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2e      	ldr	r2, [pc, #184]	; (8002bd4 <HAL_UART_MspInit+0xd8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d156      	bne.n	8002bcc <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b1e:	4b2e      	ldr	r3, [pc, #184]	; (8002bd8 <HAL_UART_MspInit+0xdc>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4a2d      	ldr	r2, [pc, #180]	; (8002bd8 <HAL_UART_MspInit+0xdc>)
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b28:	61d3      	str	r3, [r2, #28]
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_UART_MspInit+0xdc>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <HAL_UART_MspInit+0xdc>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <HAL_UART_MspInit+0xdc>)
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b40:	6153      	str	r3, [r2, #20]
 8002b42:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <HAL_UART_MspInit+0xdc>)
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b4e:	230c      	movs	r3, #12
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b5e:	2307      	movs	r3, #7
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6c:	f000 fdce 	bl	800370c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002b70:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <HAL_UART_MspInit+0xe0>)
 8002b72:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <HAL_UART_MspInit+0xe4>)
 8002b74:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_UART_MspInit+0xe0>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b7c:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <HAL_UART_MspInit+0xe0>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b82:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_UART_MspInit+0xe0>)
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b88:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <HAL_UART_MspInit+0xe0>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_UART_MspInit+0xe0>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_UART_MspInit+0xe0>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_UART_MspInit+0xe0>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ba0:	480e      	ldr	r0, [pc, #56]	; (8002bdc <HAL_UART_MspInit+0xe0>)
 8002ba2:	f000 fc32 	bl	800340a <HAL_DMA_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8002bac:	f7fe fb28 	bl	8001200 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <HAL_UART_MspInit+0xe0>)
 8002bb4:	671a      	str	r2, [r3, #112]	; 0x70
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <HAL_UART_MspInit+0xe0>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2026      	movs	r0, #38	; 0x26
 8002bc2:	f000 fbec 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bc6:	2026      	movs	r0, #38	; 0x26
 8002bc8:	f000 fc05 	bl	80033d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3728      	adds	r7, #40	; 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40004400 	.word	0x40004400
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	200004d8 	.word	0x200004d8
 8002be0:	4002006c 	.word	0x4002006c

08002be4 <vector_init_d>:


#include "vector.h"

void
vector_init_d(vector_t *v, double x, double y, double z) {
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	61f8      	str	r0, [r7, #28]
 8002bec:	ed87 0b04 	vstr	d0, [r7, #16]
 8002bf0:	ed87 1b02 	vstr	d1, [r7, #8]
 8002bf4:	ed87 2b00 	vstr	d2, [r7]
	v->x = x;
 8002bf8:	69f9      	ldr	r1, [r7, #28]
 8002bfa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bfe:	e9c1 2300 	strd	r2, r3, [r1]
	v->y = y;
 8002c02:	69f9      	ldr	r1, [r7, #28]
 8002c04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c08:	e9c1 2302 	strd	r2, r3, [r1, #8]
	v->z = z;
 8002c0c:	69f9      	ldr	r1, [r7, #28]
 8002c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c12:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002c16:	bf00      	nop
 8002c18:	3724      	adds	r7, #36	; 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <vector_init_v>:

void
vector_init_v(vector_t *v, vector_t src) {
 8002c22:	b480      	push	{r7}
 8002c24:	b089      	sub	sp, #36	; 0x24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	61f8      	str	r0, [r7, #28]
 8002c2a:	eeb0 5a40 	vmov.f32	s10, s0
 8002c2e:	eef0 5a60 	vmov.f32	s11, s1
 8002c32:	eeb0 6a41 	vmov.f32	s12, s2
 8002c36:	eef0 6a61 	vmov.f32	s13, s3
 8002c3a:	eeb0 7a42 	vmov.f32	s14, s4
 8002c3e:	eef0 7a62 	vmov.f32	s15, s5
 8002c42:	ed87 5b00 	vstr	d5, [r7]
 8002c46:	ed87 6b02 	vstr	d6, [r7, #8]
 8002c4a:	ed87 7b04 	vstr	d7, [r7, #16]
	v->x = src.x;
 8002c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c52:	69f9      	ldr	r1, [r7, #28]
 8002c54:	e9c1 2300 	strd	r2, r3, [r1]
	v->y = src.y;
 8002c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c5c:	69f9      	ldr	r1, [r7, #28]
 8002c5e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	v->z = src.z;
 8002c62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c66:	69f9      	ldr	r1, [r7, #28]
 8002c68:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002c6c:	bf00      	nop
 8002c6e:	3724      	adds	r7, #36	; 0x24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <vector_mag>:
vector_print(vector_t v) {
	printf("[%d, %d, %d]", (int)v.x, (int)v.y, (int)v.z);
}

double
vector_mag(vector_t v) {
 8002c78:	b5b0      	push	{r4, r5, r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	eeb0 5a40 	vmov.f32	s10, s0
 8002c82:	eef0 5a60 	vmov.f32	s11, s1
 8002c86:	eeb0 6a41 	vmov.f32	s12, s2
 8002c8a:	eef0 6a61 	vmov.f32	s13, s3
 8002c8e:	eeb0 7a42 	vmov.f32	s14, s4
 8002c92:	eef0 7a62 	vmov.f32	s15, s5
 8002c96:	ed87 5b00 	vstr	d5, [r7]
 8002c9a:	ed87 6b02 	vstr	d6, [r7, #8]
 8002c9e:	ed87 7b04 	vstr	d7, [r7, #16]
	return sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
 8002ca2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002caa:	f7fd fc9d 	bl	80005e8 <__aeabi_dmul>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4614      	mov	r4, r2
 8002cb4:	461d      	mov	r5, r3
 8002cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cbe:	f7fd fc93 	bl	80005e8 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	4629      	mov	r1, r5
 8002cca:	f7fd fad7 	bl	800027c <__adddf3>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4614      	mov	r4, r2
 8002cd4:	461d      	mov	r5, r3
 8002cd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cde:	f7fd fc83 	bl	80005e8 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	4629      	mov	r1, r5
 8002cea:	f7fd fac7 	bl	800027c <__adddf3>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	ec43 2b17 	vmov	d7, r2, r3
 8002cf6:	eeb0 0a47 	vmov.f32	s0, s14
 8002cfa:	eef0 0a67 	vmov.f32	s1, s15
 8002cfe:	f005 faf1 	bl	80082e4 <sqrt>
 8002d02:	eeb0 7a40 	vmov.f32	s14, s0
 8002d06:	eef0 7a60 	vmov.f32	s15, s1
}
 8002d0a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d0e:	eef0 0a67 	vmov.f32	s1, s15
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bdb0      	pop	{r4, r5, r7, pc}

08002d18 <vector_dot>:

double
vector_dot(vector_t vec1, vector_t vec2) {
 8002d18:	b5b0      	push	{r4, r5, r7, lr}
 8002d1a:	b08c      	sub	sp, #48	; 0x30
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	eeb0 6a44 	vmov.f32	s12, s8
 8002d22:	eef0 6a64 	vmov.f32	s13, s9
 8002d26:	eeb0 7a45 	vmov.f32	s14, s10
 8002d2a:	eef0 7a65 	vmov.f32	s15, s11
 8002d2e:	ed87 0b06 	vstr	d0, [r7, #24]
 8002d32:	ed87 1b08 	vstr	d1, [r7, #32]
 8002d36:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8002d3a:	ed87 3b00 	vstr	d3, [r7]
 8002d3e:	ed87 6b02 	vstr	d6, [r7, #8]
 8002d42:	ed87 7b04 	vstr	d7, [r7, #16]
	return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z;
 8002d46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d4e:	f7fd fc4b 	bl	80005e8 <__aeabi_dmul>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4614      	mov	r4, r2
 8002d58:	461d      	mov	r5, r3
 8002d5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d62:	f7fd fc41 	bl	80005e8 <__aeabi_dmul>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	f7fd fa85 	bl	800027c <__adddf3>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4614      	mov	r4, r2
 8002d78:	461d      	mov	r5, r3
 8002d7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d82:	f7fd fc31 	bl	80005e8 <__aeabi_dmul>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	f7fd fa75 	bl	800027c <__adddf3>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d9a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d9e:	eef0 0a67 	vmov.f32	s1, s15
 8002da2:	3730      	adds	r7, #48	; 0x30
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bdb0      	pop	{r4, r5, r7, pc}

08002da8 <vector_angle>:

double
vector_angle(vector_t vec1, vector_t vec2) {
 8002da8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dac:	b08c      	sub	sp, #48	; 0x30
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	eeb0 6a44 	vmov.f32	s12, s8
 8002db4:	eef0 6a64 	vmov.f32	s13, s9
 8002db8:	eeb0 7a45 	vmov.f32	s14, s10
 8002dbc:	eef0 7a65 	vmov.f32	s15, s11
 8002dc0:	ed87 0b06 	vstr	d0, [r7, #24]
 8002dc4:	ed87 1b08 	vstr	d1, [r7, #32]
 8002dc8:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8002dcc:	ed87 3b00 	vstr	d3, [r7]
 8002dd0:	ed87 6b02 	vstr	d6, [r7, #8]
 8002dd4:	ed87 7b04 	vstr	d7, [r7, #16]
	return acos((vector_dot(vec1, vec2)) /
 8002dd8:	ed97 3b00 	vldr	d3, [r7]
 8002ddc:	ed97 4b02 	vldr	d4, [r7, #8]
 8002de0:	ed97 5b04 	vldr	d5, [r7, #16]
 8002de4:	ed97 2b06 	vldr	d2, [r7, #24]
 8002de8:	ed97 6b08 	vldr	d6, [r7, #32]
 8002dec:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002df0:	eeb0 0a42 	vmov.f32	s0, s4
 8002df4:	eef0 0a62 	vmov.f32	s1, s5
 8002df8:	eeb0 1a46 	vmov.f32	s2, s12
 8002dfc:	eef0 1a66 	vmov.f32	s3, s13
 8002e00:	eeb0 2a47 	vmov.f32	s4, s14
 8002e04:	eef0 2a67 	vmov.f32	s5, s15
 8002e08:	f7ff ff86 	bl	8002d18 <vector_dot>
 8002e0c:	ec55 4b10 	vmov	r4, r5, d0
			(vector_mag(vec1) * vector_mag(vec2)));
 8002e10:	ed97 5b06 	vldr	d5, [r7, #24]
 8002e14:	ed97 6b08 	vldr	d6, [r7, #32]
 8002e18:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002e1c:	eeb0 0a45 	vmov.f32	s0, s10
 8002e20:	eef0 0a65 	vmov.f32	s1, s11
 8002e24:	eeb0 1a46 	vmov.f32	s2, s12
 8002e28:	eef0 1a66 	vmov.f32	s3, s13
 8002e2c:	eeb0 2a47 	vmov.f32	s4, s14
 8002e30:	eef0 2a67 	vmov.f32	s5, s15
 8002e34:	f7ff ff20 	bl	8002c78 <vector_mag>
 8002e38:	ec59 8b10 	vmov	r8, r9, d0
 8002e3c:	ed97 5b00 	vldr	d5, [r7]
 8002e40:	ed97 6b02 	vldr	d6, [r7, #8]
 8002e44:	ed97 7b04 	vldr	d7, [r7, #16]
 8002e48:	eeb0 0a45 	vmov.f32	s0, s10
 8002e4c:	eef0 0a65 	vmov.f32	s1, s11
 8002e50:	eeb0 1a46 	vmov.f32	s2, s12
 8002e54:	eef0 1a66 	vmov.f32	s3, s13
 8002e58:	eeb0 2a47 	vmov.f32	s4, s14
 8002e5c:	eef0 2a67 	vmov.f32	s5, s15
 8002e60:	f7ff ff0a 	bl	8002c78 <vector_mag>
 8002e64:	ec53 2b10 	vmov	r2, r3, d0
 8002e68:	4640      	mov	r0, r8
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	f7fd fbbc 	bl	80005e8 <__aeabi_dmul>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
	return acos((vector_dot(vec1, vec2)) /
 8002e74:	4620      	mov	r0, r4
 8002e76:	4629      	mov	r1, r5
 8002e78:	f7fd fce0 	bl	800083c <__aeabi_ddiv>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	ec43 2b17 	vmov	d7, r2, r3
 8002e84:	eeb0 0a47 	vmov.f32	s0, s14
 8002e88:	eef0 0a67 	vmov.f32	s1, s15
 8002e8c:	f005 f9f0 	bl	8008270 <acos>
 8002e90:	eeb0 7a40 	vmov.f32	s14, s0
 8002e94:	eef0 7a60 	vmov.f32	s15, s1
}
 8002e98:	eeb0 0a47 	vmov.f32	s0, s14
 8002e9c:	eef0 0a67 	vmov.f32	s1, s15
 8002ea0:	3730      	adds	r7, #48	; 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002ea8 <vector_add>:
void
vector_add(vector_t *v, vector_t vec1, vector_t vec2) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08e      	sub	sp, #56	; 0x38
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6378      	str	r0, [r7, #52]	; 0x34
 8002eb0:	eeb0 6a44 	vmov.f32	s12, s8
 8002eb4:	eef0 6a64 	vmov.f32	s13, s9
 8002eb8:	eeb0 7a45 	vmov.f32	s14, s10
 8002ebc:	eef0 7a65 	vmov.f32	s15, s11
 8002ec0:	ed87 0b06 	vstr	d0, [r7, #24]
 8002ec4:	ed87 1b08 	vstr	d1, [r7, #32]
 8002ec8:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8002ecc:	ed87 3b00 	vstr	d3, [r7]
 8002ed0:	ed87 6b02 	vstr	d6, [r7, #8]
 8002ed4:	ed87 7b04 	vstr	d7, [r7, #16]
	v->x = vec1.x + vec2.x;
 8002ed8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ee0:	f7fd f9cc 	bl	800027c <__adddf3>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002eea:	e9c1 2300 	strd	r2, r3, [r1]
	v->y = vec1.y + vec2.y;
 8002eee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ef6:	f7fd f9c1 	bl	800027c <__adddf3>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f00:	e9c1 2302 	strd	r2, r3, [r1, #8]
	v->z = vec1.z + vec2.z;
 8002f04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f0c:	f7fd f9b6 	bl	800027c <__adddf3>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f16:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002f1a:	bf00      	nop
 8002f1c:	3738      	adds	r7, #56	; 0x38
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <vector_sub>:

void
vector_sub(vector_t *v, vector_t vec1, vector_t vec2) {
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b08e      	sub	sp, #56	; 0x38
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6378      	str	r0, [r7, #52]	; 0x34
 8002f2a:	eeb0 6a44 	vmov.f32	s12, s8
 8002f2e:	eef0 6a64 	vmov.f32	s13, s9
 8002f32:	eeb0 7a45 	vmov.f32	s14, s10
 8002f36:	eef0 7a65 	vmov.f32	s15, s11
 8002f3a:	ed87 0b06 	vstr	d0, [r7, #24]
 8002f3e:	ed87 1b08 	vstr	d1, [r7, #32]
 8002f42:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8002f46:	ed87 3b00 	vstr	d3, [r7]
 8002f4a:	ed87 6b02 	vstr	d6, [r7, #8]
 8002f4e:	ed87 7b04 	vstr	d7, [r7, #16]
	v->x = vec1.x - vec2.x;
 8002f52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f5a:	f7fd f98d 	bl	8000278 <__aeabi_dsub>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f64:	e9c1 2300 	strd	r2, r3, [r1]
	v->y = vec1.y - vec2.y;
 8002f68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f70:	f7fd f982 	bl	8000278 <__aeabi_dsub>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	v->z = vec1.z - vec2.z;
 8002f7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f86:	f7fd f977 	bl	8000278 <__aeabi_dsub>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f90:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002f94:	bf00      	nop
 8002f96:	3738      	adds	r7, #56	; 0x38
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <vector_mult>:

void
vector_mult(vector_t *v, double num) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	ed87 0b00 	vstr	d0, [r7]
	v->x *= num;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fb2:	f7fd fb19 	bl	80005e8 <__aeabi_dmul>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	e9c1 2300 	strd	r2, r3, [r1]
	v->y *= num;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fca:	f7fd fb0d 	bl	80005e8 <__aeabi_dmul>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	68f9      	ldr	r1, [r7, #12]
 8002fd4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	v->z *= num;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fe2:	f7fd fb01 	bl	80005e8 <__aeabi_dmul>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	68f9      	ldr	r1, [r7, #12]
 8002fec:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <vector_normalize>:

void
vector_normalize(vector_t *v) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	double div = vector_mag(*v);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	ed93 5b00 	vldr	d5, [r3]
 8003006:	ed93 6b02 	vldr	d6, [r3, #8]
 800300a:	ed93 7b04 	vldr	d7, [r3, #16]
 800300e:	eeb0 0a45 	vmov.f32	s0, s10
 8003012:	eef0 0a65 	vmov.f32	s1, s11
 8003016:	eeb0 1a46 	vmov.f32	s2, s12
 800301a:	eef0 1a66 	vmov.f32	s3, s13
 800301e:	eeb0 2a47 	vmov.f32	s4, s14
 8003022:	eef0 2a67 	vmov.f32	s5, s15
 8003026:	f7ff fe27 	bl	8002c78 <vector_mag>
 800302a:	ed87 0b02 	vstr	d0, [r7, #8]
	v->x = v->x / div;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003038:	f7fd fc00 	bl	800083c <__aeabi_ddiv>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	e9c1 2300 	strd	r2, r3, [r1]
	v->y = v->y / div;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800304c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003050:	f7fd fbf4 	bl	800083c <__aeabi_ddiv>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	v->z = v->z / div;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003068:	f7fd fbe8 	bl	800083c <__aeabi_ddiv>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <Reset_Handler>:
 8003080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030b8 <LoopForever+0x2>
 8003084:	480d      	ldr	r0, [pc, #52]	; (80030bc <LoopForever+0x6>)
 8003086:	490e      	ldr	r1, [pc, #56]	; (80030c0 <LoopForever+0xa>)
 8003088:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <LoopForever+0xe>)
 800308a:	2300      	movs	r3, #0
 800308c:	e002      	b.n	8003094 <LoopCopyDataInit>

0800308e <CopyDataInit>:
 800308e:	58d4      	ldr	r4, [r2, r3]
 8003090:	50c4      	str	r4, [r0, r3]
 8003092:	3304      	adds	r3, #4

08003094 <LoopCopyDataInit>:
 8003094:	18c4      	adds	r4, r0, r3
 8003096:	428c      	cmp	r4, r1
 8003098:	d3f9      	bcc.n	800308e <CopyDataInit>
 800309a:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <LoopForever+0x12>)
 800309c:	4c0b      	ldr	r4, [pc, #44]	; (80030cc <LoopForever+0x16>)
 800309e:	2300      	movs	r3, #0
 80030a0:	e001      	b.n	80030a6 <LoopFillZerobss>

080030a2 <FillZerobss>:
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	3204      	adds	r2, #4

080030a6 <LoopFillZerobss>:
 80030a6:	42a2      	cmp	r2, r4
 80030a8:	d3fb      	bcc.n	80030a2 <FillZerobss>
 80030aa:	f7ff f91b 	bl	80022e4 <SystemInit>
 80030ae:	f004 f835 	bl	800711c <__libc_init_array>
 80030b2:	f7fd fe43 	bl	8000d3c <main>

080030b6 <LoopForever>:
 80030b6:	e7fe      	b.n	80030b6 <LoopForever>
 80030b8:	20003000 	.word	0x20003000
 80030bc:	20000000 	.word	0x20000000
 80030c0:	20000074 	.word	0x20000074
 80030c4:	08009d28 	.word	0x08009d28
 80030c8:	20000078 	.word	0x20000078
 80030cc:	20000530 	.word	0x20000530

080030d0 <ADC1_2_IRQHandler>:
 80030d0:	e7fe      	b.n	80030d0 <ADC1_2_IRQHandler>
	...

080030d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_Init+0x28>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a07      	ldr	r2, [pc, #28]	; (80030fc <HAL_Init+0x28>)
 80030de:	f043 0310 	orr.w	r3, r3, #16
 80030e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e4:	2003      	movs	r0, #3
 80030e6:	f000 f94f 	bl	8003388 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f000 f808 	bl	8003100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f0:	f7fe fff8 	bl	80020e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40022000 	.word	0x40022000

08003100 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_InitTick+0x54>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_InitTick+0x58>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4619      	mov	r1, r3
 8003112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003116:	fbb3 f3f1 	udiv	r3, r3, r1
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f967 	bl	80033f2 <HAL_SYSTICK_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e00e      	b.n	800314c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0f      	cmp	r3, #15
 8003132:	d80a      	bhi.n	800314a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003134:	2200      	movs	r2, #0
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800313c:	f000 f92f 	bl	800339e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003140:	4a06      	ldr	r2, [pc, #24]	; (800315c <HAL_InitTick+0x5c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000000 	.word	0x20000000
 8003158:	20000008 	.word	0x20000008
 800315c:	20000004 	.word	0x20000004

08003160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_IncTick+0x20>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_IncTick+0x24>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4413      	add	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_IncTick+0x24>)
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000008 	.word	0x20000008
 8003184:	2000051c 	.word	0x2000051c

08003188 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return uwTick;  
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_GetTick+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	2000051c 	.word	0x2000051c

080031a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a8:	f7ff ffee 	bl	8003188 <HAL_GetTick>
 80031ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b8:	d005      	beq.n	80031c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_Delay+0x44>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80031c6:	bf00      	nop
 80031c8:	f7ff ffde 	bl	8003188 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d8f7      	bhi.n	80031c8 <HAL_Delay+0x28>
  {
  }
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000008 	.word	0x20000008

080031e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003204:	4013      	ands	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321a:	4a04      	ldr	r2, [pc, #16]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	60d3      	str	r3, [r2, #12]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <__NVIC_GetPriorityGrouping+0x18>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 0307 	and.w	r3, r3, #7
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db0b      	blt.n	8003276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	f003 021f 	and.w	r2, r3, #31
 8003264:	4907      	ldr	r1, [pc, #28]	; (8003284 <__NVIC_EnableIRQ+0x38>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2001      	movs	r0, #1
 800326e:	fa00 f202 	lsl.w	r2, r0, r2
 8003272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000e100 	.word	0xe000e100

08003288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	db0a      	blt.n	80032b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	490c      	ldr	r1, [pc, #48]	; (80032d4 <__NVIC_SetPriority+0x4c>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	440b      	add	r3, r1
 80032ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b0:	e00a      	b.n	80032c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4908      	ldr	r1, [pc, #32]	; (80032d8 <__NVIC_SetPriority+0x50>)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3b04      	subs	r3, #4
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	440b      	add	r3, r1
 80032c6:	761a      	strb	r2, [r3, #24]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000e100 	.word	0xe000e100
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b089      	sub	sp, #36	; 0x24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f1c3 0307 	rsb	r3, r3, #7
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	bf28      	it	cs
 80032fa:	2304      	movcs	r3, #4
 80032fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3304      	adds	r3, #4
 8003302:	2b06      	cmp	r3, #6
 8003304:	d902      	bls.n	800330c <NVIC_EncodePriority+0x30>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3b03      	subs	r3, #3
 800330a:	e000      	b.n	800330e <NVIC_EncodePriority+0x32>
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	401a      	ands	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	43d9      	mvns	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	4313      	orrs	r3, r2
         );
}
 8003336:	4618      	mov	r0, r3
 8003338:	3724      	adds	r7, #36	; 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003354:	d301      	bcc.n	800335a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003356:	2301      	movs	r3, #1
 8003358:	e00f      	b.n	800337a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <SysTick_Config+0x40>)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3b01      	subs	r3, #1
 8003360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003362:	210f      	movs	r1, #15
 8003364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003368:	f7ff ff8e 	bl	8003288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <SysTick_Config+0x40>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003372:	4b04      	ldr	r3, [pc, #16]	; (8003384 <SysTick_Config+0x40>)
 8003374:	2207      	movs	r2, #7
 8003376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	e000e010 	.word	0xe000e010

08003388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff29 	bl	80031e8 <__NVIC_SetPriorityGrouping>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b0:	f7ff ff3e 	bl	8003230 <__NVIC_GetPriorityGrouping>
 80033b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f7ff ff8e 	bl	80032dc <NVIC_EncodePriority>
 80033c0:	4602      	mov	r2, r0
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff5d 	bl	8003288 <__NVIC_SetPriority>
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	4603      	mov	r3, r0
 80033de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff31 	bl	800324c <__NVIC_EnableIRQ>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff ffa2 	bl	8003344 <SysTick_Config>
 8003400:	4603      	mov	r3, r0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e037      	b.n	8003490 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003436:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800343a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f92a 	bl	80036cc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}  
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d008      	beq.n	80034bc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2204      	movs	r2, #4
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e020      	b.n	80034fe <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 020e 	bic.w	r2, r2, #14
 80034ca:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800351c:	2b02      	cmp	r3, #2
 800351e:	d005      	beq.n	800352c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2204      	movs	r2, #4
 8003524:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	e027      	b.n	800357c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 020e 	bic.w	r2, r2, #14
 800353a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	2101      	movs	r1, #1
 8003556:	fa01 f202 	lsl.w	r2, r1, r2
 800355a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
    } 
  }
  return status;
 800357c:	7bfb      	ldrb	r3, [r7, #15]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	2204      	movs	r2, #4
 80035a4:	409a      	lsls	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d024      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x72>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01f      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0204 	bic.w	r2, r2, #4
 80035d4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	2104      	movs	r1, #4
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d06a      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80035f6:	e065      	b.n	80036c4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	2202      	movs	r2, #2
 80035fe:	409a      	lsls	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d02c      	beq.n	8003662 <HAL_DMA_IRQHandler+0xdc>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d027      	beq.n	8003662 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 020a 	bic.w	r2, r2, #10
 800362e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003640:	2102      	movs	r1, #2
 8003642:	fa01 f202 	lsl.w	r2, r1, r2
 8003646:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d035      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003660:	e030      	b.n	80036c4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2208      	movs	r2, #8
 8003668:	409a      	lsls	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d028      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x13e>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d023      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 020e 	bic.w	r2, r2, #14
 800368a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d004      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
    }
  }
}  
 80036c2:	e7ff      	b.n	80036c4 <HAL_DMA_IRQHandler+0x13e>
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <DMA_CalcBaseAndBitshift+0x34>)
 80036dc:	4413      	add	r3, r2
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <DMA_CalcBaseAndBitshift+0x38>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	009a      	lsls	r2, r3, #2
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a06      	ldr	r2, [pc, #24]	; (8003708 <DMA_CalcBaseAndBitshift+0x3c>)
 80036f0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	bffdfff8 	.word	0xbffdfff8
 8003704:	cccccccd 	.word	0xcccccccd
 8003708:	40020000 	.word	0x40020000

0800370c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371a:	e14e      	b.n	80039ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	4013      	ands	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8140 	beq.w	80039b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d00b      	beq.n	8003754 <HAL_GPIO_Init+0x48>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d007      	beq.n	8003754 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003748:	2b11      	cmp	r3, #17
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b12      	cmp	r3, #18
 8003752:	d130      	bne.n	80037b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800378a:	2201      	movs	r2, #1
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 0201 	and.w	r2, r3, #1
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	2203      	movs	r2, #3
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0xea>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b12      	cmp	r3, #18
 80037f4:	d123      	bne.n	800383e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	08da      	lsrs	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3208      	adds	r2, #8
 80037fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	220f      	movs	r2, #15
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4013      	ands	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	08da      	lsrs	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3208      	adds	r2, #8
 8003838:	6939      	ldr	r1, [r7, #16]
 800383a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2203      	movs	r2, #3
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0203 	and.w	r2, r3, #3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 809a 	beq.w	80039b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003880:	4b55      	ldr	r3, [pc, #340]	; (80039d8 <HAL_GPIO_Init+0x2cc>)
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	4a54      	ldr	r2, [pc, #336]	; (80039d8 <HAL_GPIO_Init+0x2cc>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6193      	str	r3, [r2, #24]
 800388c:	4b52      	ldr	r3, [pc, #328]	; (80039d8 <HAL_GPIO_Init+0x2cc>)
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003898:	4a50      	ldr	r2, [pc, #320]	; (80039dc <HAL_GPIO_Init+0x2d0>)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	3302      	adds	r3, #2
 80038a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	220f      	movs	r2, #15
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038c2:	d013      	beq.n	80038ec <HAL_GPIO_Init+0x1e0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a46      	ldr	r2, [pc, #280]	; (80039e0 <HAL_GPIO_Init+0x2d4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00d      	beq.n	80038e8 <HAL_GPIO_Init+0x1dc>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a45      	ldr	r2, [pc, #276]	; (80039e4 <HAL_GPIO_Init+0x2d8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <HAL_GPIO_Init+0x1d8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a44      	ldr	r2, [pc, #272]	; (80039e8 <HAL_GPIO_Init+0x2dc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d101      	bne.n	80038e0 <HAL_GPIO_Init+0x1d4>
 80038dc:	2303      	movs	r3, #3
 80038de:	e006      	b.n	80038ee <HAL_GPIO_Init+0x1e2>
 80038e0:	2305      	movs	r3, #5
 80038e2:	e004      	b.n	80038ee <HAL_GPIO_Init+0x1e2>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e002      	b.n	80038ee <HAL_GPIO_Init+0x1e2>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <HAL_GPIO_Init+0x1e2>
 80038ec:	2300      	movs	r3, #0
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	f002 0203 	and.w	r2, r2, #3
 80038f4:	0092      	lsls	r2, r2, #2
 80038f6:	4093      	lsls	r3, r2
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038fe:	4937      	ldr	r1, [pc, #220]	; (80039dc <HAL_GPIO_Init+0x2d0>)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	3302      	adds	r3, #2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800390c:	4b37      	ldr	r3, [pc, #220]	; (80039ec <HAL_GPIO_Init+0x2e0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	43db      	mvns	r3, r3
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003930:	4a2e      	ldr	r2, [pc, #184]	; (80039ec <HAL_GPIO_Init+0x2e0>)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003936:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_GPIO_Init+0x2e0>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	43db      	mvns	r3, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800395a:	4a24      	ldr	r2, [pc, #144]	; (80039ec <HAL_GPIO_Init+0x2e0>)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003960:	4b22      	ldr	r3, [pc, #136]	; (80039ec <HAL_GPIO_Init+0x2e0>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	43db      	mvns	r3, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003984:	4a19      	ldr	r2, [pc, #100]	; (80039ec <HAL_GPIO_Init+0x2e0>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800398a:	4b18      	ldr	r3, [pc, #96]	; (80039ec <HAL_GPIO_Init+0x2e0>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039ae:	4a0f      	ldr	r2, [pc, #60]	; (80039ec <HAL_GPIO_Init+0x2e0>)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3301      	adds	r3, #1
 80039b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f47f aea9 	bne.w	800371c <HAL_GPIO_Init+0x10>
  }
}
 80039ca:	bf00      	nop
 80039cc:	bf00      	nop
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40010000 	.word	0x40010000
 80039e0:	48000400 	.word	0x48000400
 80039e4:	48000800 	.word	0x48000800
 80039e8:	48000c00 	.word	0x48000c00
 80039ec:	40010400 	.word	0x40010400

080039f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	807b      	strh	r3, [r7, #2]
 80039fc:	4613      	mov	r3, r2
 80039fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a00:	787b      	ldrb	r3, [r7, #1]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a06:	887a      	ldrh	r2, [r7, #2]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a0c:	e002      	b.n	8003a14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a0e:	887a      	ldrh	r2, [r7, #2]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d006      	beq.n	8003a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a36:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fa0e 	bl	8000e60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40010400 	.word	0x40010400

08003a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a5c:	1d3b      	adds	r3, r7, #4
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d102      	bne.n	8003a6a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f000 bef4 	b.w	8004852 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a6a:	1d3b      	adds	r3, r7, #4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 816a 	beq.w	8003d4e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a7a:	4bb3      	ldr	r3, [pc, #716]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d00c      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a86:	4bb0      	ldr	r3, [pc, #704]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d159      	bne.n	8003b46 <HAL_RCC_OscConfig+0xf6>
 8003a92:	4bad      	ldr	r3, [pc, #692]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a9e:	d152      	bne.n	8003b46 <HAL_RCC_OscConfig+0xf6>
 8003aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aa4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ab4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d102      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x82>
 8003acc:	4b9e      	ldr	r3, [pc, #632]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	e015      	b.n	8003afe <HAL_RCC_OscConfig+0xae>
 8003ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ad6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003aee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003afa:	4b93      	ldr	r3, [pc, #588]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b02:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003b06:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b0a:	fa92 f2a2 	rbit	r2, r2
 8003b0e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003b12:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003b16:	fab2 f282 	clz	r2, r2
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	f042 0220 	orr.w	r2, r2, #32
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	f002 021f 	and.w	r2, r2, #31
 8003b26:	2101      	movs	r1, #1
 8003b28:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 810c 	beq.w	8003d4c <HAL_RCC_OscConfig+0x2fc>
 8003b34:	1d3b      	adds	r3, r7, #4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f040 8106 	bne.w	8003d4c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f000 be86 	b.w	8004852 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d106      	bne.n	8003b60 <HAL_RCC_OscConfig+0x110>
 8003b52:	4b7d      	ldr	r3, [pc, #500]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a7c      	ldr	r2, [pc, #496]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e030      	b.n	8003bc2 <HAL_RCC_OscConfig+0x172>
 8003b60:	1d3b      	adds	r3, r7, #4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x134>
 8003b6a:	4b77      	ldr	r3, [pc, #476]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a76      	ldr	r2, [pc, #472]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	4b74      	ldr	r3, [pc, #464]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a73      	ldr	r2, [pc, #460]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e01e      	b.n	8003bc2 <HAL_RCC_OscConfig+0x172>
 8003b84:	1d3b      	adds	r3, r7, #4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b8e:	d10c      	bne.n	8003baa <HAL_RCC_OscConfig+0x15a>
 8003b90:	4b6d      	ldr	r3, [pc, #436]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a6c      	ldr	r2, [pc, #432]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003b96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b6a      	ldr	r3, [pc, #424]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a69      	ldr	r2, [pc, #420]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	e00b      	b.n	8003bc2 <HAL_RCC_OscConfig+0x172>
 8003baa:	4b67      	ldr	r3, [pc, #412]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a66      	ldr	r2, [pc, #408]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	4b64      	ldr	r3, [pc, #400]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a63      	ldr	r2, [pc, #396]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bc2:	4b61      	ldr	r3, [pc, #388]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	f023 020f 	bic.w	r2, r3, #15
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	495d      	ldr	r1, [pc, #372]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d059      	beq.n	8003c94 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7ff fad2 	bl	8003188 <HAL_GetTick>
 8003be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bea:	f7ff facd 	bl	8003188 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d902      	bls.n	8003c00 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	f000 be29 	b.w	8004852 <HAL_RCC_OscConfig+0xe02>
 8003c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c04:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003c0c:	fa93 f3a3 	rbit	r3, r3
 8003c10:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003c14:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c18:	fab3 f383 	clz	r3, r3
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d102      	bne.n	8003c32 <HAL_RCC_OscConfig+0x1e2>
 8003c2c:	4b46      	ldr	r3, [pc, #280]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	e015      	b.n	8003c5e <HAL_RCC_OscConfig+0x20e>
 8003c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c36:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003c46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c4a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c4e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003c52:	fa93 f3a3 	rbit	r3, r3
 8003c56:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003c5a:	4b3b      	ldr	r3, [pc, #236]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c62:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003c66:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c6a:	fa92 f2a2 	rbit	r2, r2
 8003c6e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003c72:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003c76:	fab2 f282 	clz	r2, r2
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	f042 0220 	orr.w	r2, r2, #32
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	f002 021f 	and.w	r2, r2, #31
 8003c86:	2101      	movs	r1, #1
 8003c88:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ab      	beq.n	8003bea <HAL_RCC_OscConfig+0x19a>
 8003c92:	e05c      	b.n	8003d4e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7ff fa78 	bl	8003188 <HAL_GetTick>
 8003c98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9e:	f7ff fa73 	bl	8003188 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	; 0x64
 8003cac:	d902      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	f000 bdcf 	b.w	8004852 <HAL_RCC_OscConfig+0xe02>
 8003cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cb8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003cc0:	fa93 f3a3 	rbit	r3, r3
 8003cc4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003cc8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ccc:	fab3 f383 	clz	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d102      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x296>
 8003ce0:	4b19      	ldr	r3, [pc, #100]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	e015      	b.n	8003d12 <HAL_RCC_OscConfig+0x2c2>
 8003ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003cfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cfe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d02:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_RCC_OscConfig+0x2f8>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d16:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003d1a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003d1e:	fa92 f2a2 	rbit	r2, r2
 8003d22:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003d26:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003d2a:	fab2 f282 	clz	r2, r2
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	f042 0220 	orr.w	r2, r2, #32
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	f002 021f 	and.w	r2, r2, #31
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1ab      	bne.n	8003c9e <HAL_RCC_OscConfig+0x24e>
 8003d46:	e002      	b.n	8003d4e <HAL_RCC_OscConfig+0x2fe>
 8003d48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 816f 	beq.w	800403c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d5e:	4bd0      	ldr	r3, [pc, #832]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d6a:	4bcd      	ldr	r3, [pc, #820]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d16c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x400>
 8003d76:	4bca      	ldr	r3, [pc, #808]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d166      	bne.n	8003e50 <HAL_RCC_OscConfig+0x400>
 8003d82:	2302      	movs	r3, #2
 8003d84:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003d94:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d102      	bne.n	8003db2 <HAL_RCC_OscConfig+0x362>
 8003dac:	4bbc      	ldr	r3, [pc, #752]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	e013      	b.n	8003dda <HAL_RCC_OscConfig+0x38a>
 8003db2:	2302      	movs	r3, #2
 8003db4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003dca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003dd6:	4bb2      	ldr	r3, [pc, #712]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003de0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003de4:	fa92 f2a2 	rbit	r2, r2
 8003de8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003dec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003df0:	fab2 f282 	clz	r2, r2
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	f042 0220 	orr.w	r2, r2, #32
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	f002 021f 	and.w	r2, r2, #31
 8003e00:	2101      	movs	r1, #1
 8003e02:	fa01 f202 	lsl.w	r2, r1, r2
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d007      	beq.n	8003e1c <HAL_RCC_OscConfig+0x3cc>
 8003e0c:	1d3b      	adds	r3, r7, #4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d002      	beq.n	8003e1c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f000 bd1b 	b.w	8004852 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1c:	4ba0      	ldr	r3, [pc, #640]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e24:	1d3b      	adds	r3, r7, #4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	21f8      	movs	r1, #248	; 0xf8
 8003e2c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003e34:	fa91 f1a1 	rbit	r1, r1
 8003e38:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003e3c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003e40:	fab1 f181 	clz	r1, r1
 8003e44:	b2c9      	uxtb	r1, r1
 8003e46:	408b      	lsls	r3, r1
 8003e48:	4995      	ldr	r1, [pc, #596]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	e0f5      	b.n	800403c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e50:	1d3b      	adds	r3, r7, #4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8085 	beq.w	8003f66 <HAL_RCC_OscConfig+0x516>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003e6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e72:	fab3 f383 	clz	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	461a      	mov	r2, r3
 8003e84:	2301      	movs	r3, #1
 8003e86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7ff f97e 	bl	8003188 <HAL_GetTick>
 8003e8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e90:	e00a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e92:	f7ff f979 	bl	8003188 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d902      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	f000 bcd5 	b.w	8004852 <HAL_RCC_OscConfig+0xe02>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003eba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d102      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x488>
 8003ed2:	4b73      	ldr	r3, [pc, #460]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	e013      	b.n	8003f00 <HAL_RCC_OscConfig+0x4b0>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003eea:	2302      	movs	r3, #2
 8003eec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ef0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003efc:	4b68      	ldr	r3, [pc, #416]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2202      	movs	r2, #2
 8003f02:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003f06:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f0a:	fa92 f2a2 	rbit	r2, r2
 8003f0e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003f12:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003f16:	fab2 f282 	clz	r2, r2
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	f042 0220 	orr.w	r2, r2, #32
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	f002 021f 	and.w	r2, r2, #31
 8003f26:	2101      	movs	r1, #1
 8003f28:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0af      	beq.n	8003e92 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f32:	4b5b      	ldr	r3, [pc, #364]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	21f8      	movs	r1, #248	; 0xf8
 8003f42:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003f4a:	fa91 f1a1 	rbit	r1, r1
 8003f4e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003f52:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003f56:	fab1 f181 	clz	r1, r1
 8003f5a:	b2c9      	uxtb	r1, r1
 8003f5c:	408b      	lsls	r3, r1
 8003f5e:	4950      	ldr	r1, [pc, #320]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]
 8003f64:	e06a      	b.n	800403c <HAL_RCC_OscConfig+0x5ec>
 8003f66:	2301      	movs	r3, #1
 8003f68:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f70:	fa93 f3a3 	rbit	r3, r3
 8003f74:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003f78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f7c:	fab3 f383 	clz	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2300      	movs	r3, #0
 8003f90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f92:	f7ff f8f9 	bl	8003188 <HAL_GetTick>
 8003f96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f9c:	f7ff f8f4 	bl	8003188 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d902      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	f000 bc50 	b.w	8004852 <HAL_RCC_OscConfig+0xe02>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003fbc:	fa93 f3a3 	rbit	r3, r3
 8003fc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc8:	fab3 f383 	clz	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d102      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x592>
 8003fdc:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	e013      	b.n	800400a <HAL_RCC_OscConfig+0x5ba>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ffa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ffe:	fa93 f3a3 	rbit	r3, r3
 8004002:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004006:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <HAL_RCC_OscConfig+0x650>)
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2202      	movs	r2, #2
 800400c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004010:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004014:	fa92 f2a2 	rbit	r2, r2
 8004018:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800401c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004020:	fab2 f282 	clz	r2, r2
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	f042 0220 	orr.w	r2, r2, #32
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	f002 021f 	and.w	r2, r2, #31
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f202 	lsl.w	r2, r1, r2
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1af      	bne.n	8003f9c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80da 	beq.w	8004200 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d069      	beq.n	800412a <HAL_RCC_OscConfig+0x6da>
 8004056:	2301      	movs	r3, #1
 8004058:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800406c:	fab3 f383 	clz	r3, r3
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_OscConfig+0x654>)
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	461a      	mov	r2, r3
 800407c:	2301      	movs	r3, #1
 800407e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004080:	f7ff f882 	bl	8003188 <HAL_GetTick>
 8004084:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004088:	e00e      	b.n	80040a8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408a:	f7ff f87d 	bl	8003188 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d906      	bls.n	80040a8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e3d9      	b.n	8004852 <HAL_RCC_OscConfig+0xe02>
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000
 80040a4:	10908120 	.word	0x10908120
 80040a8:	2302      	movs	r3, #2
 80040aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80040ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80040be:	2202      	movs	r2, #2
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	fa93 f2a3 	rbit	r2, r3
 80040cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80040d6:	2202      	movs	r2, #2
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	fa93 f2a3 	rbit	r2, r3
 80040e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80040e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ea:	4ba5      	ldr	r3, [pc, #660]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80040ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040f2:	2102      	movs	r1, #2
 80040f4:	6019      	str	r1, [r3, #0]
 80040f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	fa93 f1a3 	rbit	r1, r3
 8004100:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004104:	6019      	str	r1, [r3, #0]
  return result;
 8004106:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	fab3 f383 	clz	r3, r3
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	2101      	movs	r1, #1
 800411e:	fa01 f303 	lsl.w	r3, r1, r3
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0b0      	beq.n	800408a <HAL_RCC_OscConfig+0x63a>
 8004128:	e06a      	b.n	8004200 <HAL_RCC_OscConfig+0x7b0>
 800412a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	fa93 f2a3 	rbit	r2, r3
 800413c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004140:	601a      	str	r2, [r3, #0]
  return result;
 8004142:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004146:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004148:	fab3 f383 	clz	r3, r3
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	4b8c      	ldr	r3, [pc, #560]	; (8004384 <HAL_RCC_OscConfig+0x934>)
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	461a      	mov	r2, r3
 8004158:	2300      	movs	r3, #0
 800415a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415c:	f7ff f814 	bl	8003188 <HAL_GetTick>
 8004160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004164:	e009      	b.n	800417a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004166:	f7ff f80f 	bl	8003188 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e36b      	b.n	8004852 <HAL_RCC_OscConfig+0xe02>
 800417a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800417e:	2202      	movs	r2, #2
 8004180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	fa93 f2a3 	rbit	r2, r3
 800418c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004196:	2202      	movs	r2, #2
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	fa93 f2a3 	rbit	r2, r3
 80041a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80041ae:	2202      	movs	r2, #2
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	fa93 f2a3 	rbit	r2, r3
 80041bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c2:	4b6f      	ldr	r3, [pc, #444]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80041c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041ca:	2102      	movs	r1, #2
 80041cc:	6019      	str	r1, [r3, #0]
 80041ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	fa93 f1a3 	rbit	r1, r3
 80041d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041dc:	6019      	str	r1, [r3, #0]
  return result;
 80041de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	2101      	movs	r1, #1
 80041f6:	fa01 f303 	lsl.w	r3, r1, r3
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1b2      	bne.n	8004166 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 8158 	beq.w	80044c0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004210:	2300      	movs	r3, #0
 8004212:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004216:	4b5a      	ldr	r3, [pc, #360]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d112      	bne.n	8004248 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004222:	4b57      	ldr	r3, [pc, #348]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	4a56      	ldr	r2, [pc, #344]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 8004228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422c:	61d3      	str	r3, [r2, #28]
 800422e:	4b54      	ldr	r3, [pc, #336]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004236:	f107 0308 	add.w	r3, r7, #8
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	f107 0308 	add.w	r3, r7, #8
 8004240:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	4b4f      	ldr	r3, [pc, #316]	; (8004388 <HAL_RCC_OscConfig+0x938>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d11a      	bne.n	800428a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004254:	4b4c      	ldr	r3, [pc, #304]	; (8004388 <HAL_RCC_OscConfig+0x938>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a4b      	ldr	r2, [pc, #300]	; (8004388 <HAL_RCC_OscConfig+0x938>)
 800425a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004260:	f7fe ff92 	bl	8003188 <HAL_GetTick>
 8004264:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004268:	e009      	b.n	800427e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426a:	f7fe ff8d 	bl	8003188 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e2e9      	b.n	8004852 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427e:	4b42      	ldr	r3, [pc, #264]	; (8004388 <HAL_RCC_OscConfig+0x938>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0ef      	beq.n	800426a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428a:	1d3b      	adds	r3, r7, #4
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x852>
 8004294:	4b3a      	ldr	r3, [pc, #232]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4a39      	ldr	r2, [pc, #228]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6213      	str	r3, [r2, #32]
 80042a0:	e02f      	b.n	8004302 <HAL_RCC_OscConfig+0x8b2>
 80042a2:	1d3b      	adds	r3, r7, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10c      	bne.n	80042c6 <HAL_RCC_OscConfig+0x876>
 80042ac:	4b34      	ldr	r3, [pc, #208]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	4a33      	ldr	r2, [pc, #204]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	6213      	str	r3, [r2, #32]
 80042b8:	4b31      	ldr	r3, [pc, #196]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	4a30      	ldr	r2, [pc, #192]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80042be:	f023 0304 	bic.w	r3, r3, #4
 80042c2:	6213      	str	r3, [r2, #32]
 80042c4:	e01d      	b.n	8004302 <HAL_RCC_OscConfig+0x8b2>
 80042c6:	1d3b      	adds	r3, r7, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	2b05      	cmp	r3, #5
 80042ce:	d10c      	bne.n	80042ea <HAL_RCC_OscConfig+0x89a>
 80042d0:	4b2b      	ldr	r3, [pc, #172]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	4a2a      	ldr	r2, [pc, #168]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80042d6:	f043 0304 	orr.w	r3, r3, #4
 80042da:	6213      	str	r3, [r2, #32]
 80042dc:	4b28      	ldr	r3, [pc, #160]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	4a27      	ldr	r2, [pc, #156]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6213      	str	r3, [r2, #32]
 80042e8:	e00b      	b.n	8004302 <HAL_RCC_OscConfig+0x8b2>
 80042ea:	4b25      	ldr	r3, [pc, #148]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	4a24      	ldr	r2, [pc, #144]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	6213      	str	r3, [r2, #32]
 80042f6:	4b22      	ldr	r3, [pc, #136]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	4a21      	ldr	r2, [pc, #132]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 80042fc:	f023 0304 	bic.w	r3, r3, #4
 8004300:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d06b      	beq.n	80043e4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430c:	f7fe ff3c 	bl	8003188 <HAL_GetTick>
 8004310:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004314:	e00b      	b.n	800432e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004316:	f7fe ff37 	bl	8003188 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e291      	b.n	8004852 <HAL_RCC_OscConfig+0xe02>
 800432e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004332:	2202      	movs	r2, #2
 8004334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	fa93 f2a3 	rbit	r2, r3
 8004340:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800434a:	2202      	movs	r2, #2
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	fa93 f2a3 	rbit	r2, r3
 8004358:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800435c:	601a      	str	r2, [r3, #0]
  return result;
 800435e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004362:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004364:	fab3 f383 	clz	r3, r3
 8004368:	b2db      	uxtb	r3, r3
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f043 0302 	orr.w	r3, r3, #2
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d109      	bne.n	800438c <HAL_RCC_OscConfig+0x93c>
 8004378:	4b01      	ldr	r3, [pc, #4]	; (8004380 <HAL_RCC_OscConfig+0x930>)
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	e014      	b.n	80043a8 <HAL_RCC_OscConfig+0x958>
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
 8004384:	10908120 	.word	0x10908120
 8004388:	40007000 	.word	0x40007000
 800438c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004390:	2202      	movs	r2, #2
 8004392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	fa93 f2a3 	rbit	r2, r3
 800439e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	4bbb      	ldr	r3, [pc, #748]	; (8004694 <HAL_RCC_OscConfig+0xc44>)
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80043ac:	2102      	movs	r1, #2
 80043ae:	6011      	str	r1, [r2, #0]
 80043b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	fa92 f1a2 	rbit	r1, r2
 80043ba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80043be:	6011      	str	r1, [r2, #0]
  return result;
 80043c0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	fab2 f282 	clz	r2, r2
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	f002 021f 	and.w	r2, r2, #31
 80043d6:	2101      	movs	r1, #1
 80043d8:	fa01 f202 	lsl.w	r2, r1, r2
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d099      	beq.n	8004316 <HAL_RCC_OscConfig+0x8c6>
 80043e2:	e063      	b.n	80044ac <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e4:	f7fe fed0 	bl	8003188 <HAL_GetTick>
 80043e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ec:	e00b      	b.n	8004406 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fe fecb 	bl	8003188 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e225      	b.n	8004852 <HAL_RCC_OscConfig+0xe02>
 8004406:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800440a:	2202      	movs	r2, #2
 800440c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	fa93 f2a3 	rbit	r2, r3
 8004418:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004422:	2202      	movs	r2, #2
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	fa93 f2a3 	rbit	r2, r3
 8004430:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004434:	601a      	str	r2, [r3, #0]
  return result;
 8004436:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800443a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443c:	fab3 f383 	clz	r3, r3
 8004440:	b2db      	uxtb	r3, r3
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f043 0302 	orr.w	r3, r3, #2
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d102      	bne.n	8004456 <HAL_RCC_OscConfig+0xa06>
 8004450:	4b90      	ldr	r3, [pc, #576]	; (8004694 <HAL_RCC_OscConfig+0xc44>)
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	e00d      	b.n	8004472 <HAL_RCC_OscConfig+0xa22>
 8004456:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800445a:	2202      	movs	r2, #2
 800445c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	fa93 f2a3 	rbit	r2, r3
 8004468:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	4b89      	ldr	r3, [pc, #548]	; (8004694 <HAL_RCC_OscConfig+0xc44>)
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004476:	2102      	movs	r1, #2
 8004478:	6011      	str	r1, [r2, #0]
 800447a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	fa92 f1a2 	rbit	r1, r2
 8004484:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004488:	6011      	str	r1, [r2, #0]
  return result;
 800448a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	fab2 f282 	clz	r2, r2
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	f002 021f 	and.w	r2, r2, #31
 80044a0:	2101      	movs	r1, #1
 80044a2:	fa01 f202 	lsl.w	r2, r1, r2
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1a0      	bne.n	80043ee <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044ac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d105      	bne.n	80044c0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b4:	4b77      	ldr	r3, [pc, #476]	; (8004694 <HAL_RCC_OscConfig+0xc44>)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	4a76      	ldr	r2, [pc, #472]	; (8004694 <HAL_RCC_OscConfig+0xc44>)
 80044ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 81c2 	beq.w	8004850 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044cc:	4b71      	ldr	r3, [pc, #452]	; (8004694 <HAL_RCC_OscConfig+0xc44>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	f000 819c 	beq.w	8004812 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044da:	1d3b      	adds	r3, r7, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	f040 8114 	bne.w	800470e <HAL_RCC_OscConfig+0xcbe>
 80044e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80044ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	fa93 f2a3 	rbit	r2, r3
 80044fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044fe:	601a      	str	r2, [r3, #0]
  return result;
 8004500:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004504:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	fab3 f383 	clz	r3, r3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004510:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	461a      	mov	r2, r3
 8004518:	2300      	movs	r3, #0
 800451a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fe fe34 	bl	8003188 <HAL_GetTick>
 8004520:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004524:	e009      	b.n	800453a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004526:	f7fe fe2f 	bl	8003188 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e18b      	b.n	8004852 <HAL_RCC_OscConfig+0xe02>
 800453a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800453e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	fa93 f2a3 	rbit	r2, r3
 800454e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004552:	601a      	str	r2, [r3, #0]
  return result;
 8004554:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004558:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800455a:	fab3 f383 	clz	r3, r3
 800455e:	b2db      	uxtb	r3, r3
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	d102      	bne.n	8004574 <HAL_RCC_OscConfig+0xb24>
 800456e:	4b49      	ldr	r3, [pc, #292]	; (8004694 <HAL_RCC_OscConfig+0xc44>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	e01b      	b.n	80045ac <HAL_RCC_OscConfig+0xb5c>
 8004574:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800457c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	fa93 f2a3 	rbit	r2, r3
 8004588:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	fa93 f2a3 	rbit	r2, r3
 80045a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	4b3a      	ldr	r3, [pc, #232]	; (8004694 <HAL_RCC_OscConfig+0xc44>)
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80045b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045b4:	6011      	str	r1, [r2, #0]
 80045b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	fa92 f1a2 	rbit	r1, r2
 80045c0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80045c4:	6011      	str	r1, [r2, #0]
  return result;
 80045c6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	fab2 f282 	clz	r2, r2
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	f042 0220 	orr.w	r2, r2, #32
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	f002 021f 	and.w	r2, r2, #31
 80045dc:	2101      	movs	r1, #1
 80045de:	fa01 f202 	lsl.w	r2, r1, r2
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d19e      	bne.n	8004526 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e8:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <HAL_RCC_OscConfig+0xc44>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045f6:	1d3b      	adds	r3, r7, #4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	430b      	orrs	r3, r1
 80045fe:	4925      	ldr	r1, [pc, #148]	; (8004694 <HAL_RCC_OscConfig+0xc44>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
 8004604:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800460c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	fa93 f2a3 	rbit	r2, r3
 8004618:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800461c:	601a      	str	r2, [r3, #0]
  return result;
 800461e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004622:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800462e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	461a      	mov	r2, r3
 8004636:	2301      	movs	r3, #1
 8004638:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463a:	f7fe fda5 	bl	8003188 <HAL_GetTick>
 800463e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004642:	e009      	b.n	8004658 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004644:	f7fe fda0 	bl	8003188 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e0fc      	b.n	8004852 <HAL_RCC_OscConfig+0xe02>
 8004658:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800465c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	fa93 f2a3 	rbit	r2, r3
 800466c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004670:	601a      	str	r2, [r3, #0]
  return result;
 8004672:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004676:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <HAL_RCC_OscConfig+0xc48>
 800468c:	4b01      	ldr	r3, [pc, #4]	; (8004694 <HAL_RCC_OscConfig+0xc44>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	e01e      	b.n	80046d0 <HAL_RCC_OscConfig+0xc80>
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000
 8004698:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800469c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	fa93 f2a3 	rbit	r2, r3
 80046ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	fa93 f2a3 	rbit	r2, r3
 80046c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	4b63      	ldr	r3, [pc, #396]	; (800485c <HAL_RCC_OscConfig+0xe0c>)
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80046d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046d8:	6011      	str	r1, [r2, #0]
 80046da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	fa92 f1a2 	rbit	r1, r2
 80046e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80046e8:	6011      	str	r1, [r2, #0]
  return result;
 80046ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	fab2 f282 	clz	r2, r2
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	f042 0220 	orr.w	r2, r2, #32
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	f002 021f 	and.w	r2, r2, #31
 8004700:	2101      	movs	r1, #1
 8004702:	fa01 f202 	lsl.w	r2, r1, r2
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d09b      	beq.n	8004644 <HAL_RCC_OscConfig+0xbf4>
 800470c:	e0a0      	b.n	8004850 <HAL_RCC_OscConfig+0xe00>
 800470e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004712:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	fa93 f2a3 	rbit	r2, r3
 8004722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004726:	601a      	str	r2, [r3, #0]
  return result;
 8004728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800472c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004738:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	461a      	mov	r2, r3
 8004740:	2300      	movs	r3, #0
 8004742:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fe fd20 	bl	8003188 <HAL_GetTick>
 8004748:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474c:	e009      	b.n	8004762 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474e:	f7fe fd1b 	bl	8003188 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e077      	b.n	8004852 <HAL_RCC_OscConfig+0xe02>
 8004762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004766:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800476a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	fa93 f2a3 	rbit	r2, r3
 8004776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800477a:	601a      	str	r2, [r3, #0]
  return result;
 800477c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004780:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	d102      	bne.n	800479c <HAL_RCC_OscConfig+0xd4c>
 8004796:	4b31      	ldr	r3, [pc, #196]	; (800485c <HAL_RCC_OscConfig+0xe0c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	e01b      	b.n	80047d4 <HAL_RCC_OscConfig+0xd84>
 800479c:	f107 0320 	add.w	r3, r7, #32
 80047a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a6:	f107 0320 	add.w	r3, r7, #32
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	fa93 f2a3 	rbit	r2, r3
 80047b0:	f107 031c 	add.w	r3, r7, #28
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	f107 0318 	add.w	r3, r7, #24
 80047ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f107 0318 	add.w	r3, r7, #24
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	fa93 f2a3 	rbit	r2, r3
 80047ca:	f107 0314 	add.w	r3, r7, #20
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	4b22      	ldr	r3, [pc, #136]	; (800485c <HAL_RCC_OscConfig+0xe0c>)
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	f107 0210 	add.w	r2, r7, #16
 80047d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047dc:	6011      	str	r1, [r2, #0]
 80047de:	f107 0210 	add.w	r2, r7, #16
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	fa92 f1a2 	rbit	r1, r2
 80047e8:	f107 020c 	add.w	r2, r7, #12
 80047ec:	6011      	str	r1, [r2, #0]
  return result;
 80047ee:	f107 020c 	add.w	r2, r7, #12
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	fab2 f282 	clz	r2, r2
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	f042 0220 	orr.w	r2, r2, #32
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	f002 021f 	and.w	r2, r2, #31
 8004804:	2101      	movs	r1, #1
 8004806:	fa01 f202 	lsl.w	r2, r1, r2
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d19e      	bne.n	800474e <HAL_RCC_OscConfig+0xcfe>
 8004810:	e01e      	b.n	8004850 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004812:	1d3b      	adds	r3, r7, #4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e018      	b.n	8004852 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004820:	4b0e      	ldr	r3, [pc, #56]	; (800485c <HAL_RCC_OscConfig+0xe0c>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004828:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800482c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004830:	1d3b      	adds	r3, r7, #4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	429a      	cmp	r2, r3
 8004838:	d108      	bne.n	800484c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800483a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800483e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004842:	1d3b      	adds	r3, r7, #4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000

08004860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b09e      	sub	sp, #120	; 0x78
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e162      	b.n	8004b3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004878:	4b90      	ldr	r3, [pc, #576]	; (8004abc <HAL_RCC_ClockConfig+0x25c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d910      	bls.n	80048a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b8d      	ldr	r3, [pc, #564]	; (8004abc <HAL_RCC_ClockConfig+0x25c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 0207 	bic.w	r2, r3, #7
 800488e:	498b      	ldr	r1, [pc, #556]	; (8004abc <HAL_RCC_ClockConfig+0x25c>)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b89      	ldr	r3, [pc, #548]	; (8004abc <HAL_RCC_ClockConfig+0x25c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e14a      	b.n	8004b3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b4:	4b82      	ldr	r3, [pc, #520]	; (8004ac0 <HAL_RCC_ClockConfig+0x260>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	497f      	ldr	r1, [pc, #508]	; (8004ac0 <HAL_RCC_ClockConfig+0x260>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80dc 	beq.w	8004a8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d13c      	bne.n	8004956 <HAL_RCC_ClockConfig+0xf6>
 80048dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048e4:	fa93 f3a3 	rbit	r3, r3
 80048e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80048ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ec:	fab3 f383 	clz	r3, r3
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d102      	bne.n	8004906 <HAL_RCC_ClockConfig+0xa6>
 8004900:	4b6f      	ldr	r3, [pc, #444]	; (8004ac0 <HAL_RCC_ClockConfig+0x260>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	e00f      	b.n	8004926 <HAL_RCC_ClockConfig+0xc6>
 8004906:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800490a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800490e:	fa93 f3a3 	rbit	r3, r3
 8004912:	667b      	str	r3, [r7, #100]	; 0x64
 8004914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004918:	663b      	str	r3, [r7, #96]	; 0x60
 800491a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800491c:	fa93 f3a3 	rbit	r3, r3
 8004920:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004922:	4b67      	ldr	r3, [pc, #412]	; (8004ac0 <HAL_RCC_ClockConfig+0x260>)
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800492a:	65ba      	str	r2, [r7, #88]	; 0x58
 800492c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800492e:	fa92 f2a2 	rbit	r2, r2
 8004932:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004934:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004936:	fab2 f282 	clz	r2, r2
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	f042 0220 	orr.w	r2, r2, #32
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	f002 021f 	and.w	r2, r2, #31
 8004946:	2101      	movs	r1, #1
 8004948:	fa01 f202 	lsl.w	r2, r1, r2
 800494c:	4013      	ands	r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d17b      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e0f3      	b.n	8004b3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d13c      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x178>
 800495e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004962:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800496c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b01      	cmp	r3, #1
 8004980:	d102      	bne.n	8004988 <HAL_RCC_ClockConfig+0x128>
 8004982:	4b4f      	ldr	r3, [pc, #316]	; (8004ac0 <HAL_RCC_ClockConfig+0x260>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	e00f      	b.n	80049a8 <HAL_RCC_ClockConfig+0x148>
 8004988:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800498c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004990:	fa93 f3a3 	rbit	r3, r3
 8004994:	647b      	str	r3, [r7, #68]	; 0x44
 8004996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800499a:	643b      	str	r3, [r7, #64]	; 0x40
 800499c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800499e:	fa93 f3a3 	rbit	r3, r3
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a4:	4b46      	ldr	r3, [pc, #280]	; (8004ac0 <HAL_RCC_ClockConfig+0x260>)
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80049ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b0:	fa92 f2a2 	rbit	r2, r2
 80049b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80049b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049b8:	fab2 f282 	clz	r2, r2
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	f042 0220 	orr.w	r2, r2, #32
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	f002 021f 	and.w	r2, r2, #31
 80049c8:	2101      	movs	r1, #1
 80049ca:	fa01 f202 	lsl.w	r2, r1, r2
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d13a      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0b2      	b.n	8004b3e <HAL_RCC_ClockConfig+0x2de>
 80049d8:	2302      	movs	r3, #2
 80049da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	fa93 f3a3 	rbit	r3, r3
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e6:	fab3 f383 	clz	r3, r3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d102      	bne.n	8004a00 <HAL_RCC_ClockConfig+0x1a0>
 80049fa:	4b31      	ldr	r3, [pc, #196]	; (8004ac0 <HAL_RCC_ClockConfig+0x260>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	e00d      	b.n	8004a1c <HAL_RCC_ClockConfig+0x1bc>
 8004a00:	2302      	movs	r3, #2
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	fa93 f3a3 	rbit	r3, r3
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	623b      	str	r3, [r7, #32]
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	4b29      	ldr	r3, [pc, #164]	; (8004ac0 <HAL_RCC_ClockConfig+0x260>)
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	61ba      	str	r2, [r7, #24]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	fa92 f2a2 	rbit	r2, r2
 8004a26:	617a      	str	r2, [r7, #20]
  return result;
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	fab2 f282 	clz	r2, r2
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	f042 0220 	orr.w	r2, r2, #32
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	f002 021f 	and.w	r2, r2, #31
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e079      	b.n	8004b3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <HAL_RCC_ClockConfig+0x260>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	491a      	ldr	r1, [pc, #104]	; (8004ac0 <HAL_RCC_ClockConfig+0x260>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a5c:	f7fe fb94 	bl	8003188 <HAL_GetTick>
 8004a60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fe fb90 	bl	8003188 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e061      	b.n	8004b3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <HAL_RCC_ClockConfig+0x260>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 020c 	and.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1eb      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_ClockConfig+0x25c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d214      	bcs.n	8004ac4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b08      	ldr	r3, [pc, #32]	; (8004abc <HAL_RCC_ClockConfig+0x25c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 0207 	bic.w	r2, r3, #7
 8004aa2:	4906      	ldr	r1, [pc, #24]	; (8004abc <HAL_RCC_ClockConfig+0x25c>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b04      	ldr	r3, [pc, #16]	; (8004abc <HAL_RCC_ClockConfig+0x25c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d005      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e040      	b.n	8004b3e <HAL_RCC_ClockConfig+0x2de>
 8004abc:	40022000 	.word	0x40022000
 8004ac0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad0:	4b1d      	ldr	r3, [pc, #116]	; (8004b48 <HAL_RCC_ClockConfig+0x2e8>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	491a      	ldr	r1, [pc, #104]	; (8004b48 <HAL_RCC_ClockConfig+0x2e8>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aee:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <HAL_RCC_ClockConfig+0x2e8>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4912      	ldr	r1, [pc, #72]	; (8004b48 <HAL_RCC_ClockConfig+0x2e8>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b02:	f000 f829 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8004b06:	4601      	mov	r1, r0
 8004b08:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <HAL_RCC_ClockConfig+0x2e8>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b10:	22f0      	movs	r2, #240	; 0xf0
 8004b12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	fa92 f2a2 	rbit	r2, r2
 8004b1a:	60fa      	str	r2, [r7, #12]
  return result;
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	fab2 f282 	clz	r2, r2
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	40d3      	lsrs	r3, r2
 8004b26:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <HAL_RCC_ClockConfig+0x2ec>)
 8004b28:	5cd3      	ldrb	r3, [r2, r3]
 8004b2a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b2e:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <HAL_RCC_ClockConfig+0x2f0>)
 8004b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b32:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <HAL_RCC_ClockConfig+0x2f4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe fae2 	bl	8003100 <HAL_InitTick>
  
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3778      	adds	r7, #120	; 0x78
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	08009a74 	.word	0x08009a74
 8004b50:	20000000 	.word	0x20000000
 8004b54:	20000004 	.word	0x20000004

08004b58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b08b      	sub	sp, #44	; 0x2c
 8004b5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	2300      	movs	r3, #0
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004b72:	4b29      	ldr	r3, [pc, #164]	; (8004c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d002      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x30>
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d003      	beq.n	8004b8e <HAL_RCC_GetSysClockFreq+0x36>
 8004b86:	e03c      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b88:	4b24      	ldr	r3, [pc, #144]	; (8004c1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b8a:	623b      	str	r3, [r7, #32]
      break;
 8004b8c:	e03c      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004b94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004b98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	fa92 f2a2 	rbit	r2, r2
 8004ba0:	607a      	str	r2, [r7, #4]
  return result;
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	fab2 f282 	clz	r2, r2
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	40d3      	lsrs	r3, r2
 8004bac:	4a1c      	ldr	r2, [pc, #112]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004bae:	5cd3      	ldrb	r3, [r2, r3]
 8004bb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004bb2:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	220f      	movs	r2, #15
 8004bbc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	fa92 f2a2 	rbit	r2, r2
 8004bc4:	60fa      	str	r2, [r7, #12]
  return result;
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	fab2 f282 	clz	r2, r2
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	40d3      	lsrs	r3, r2
 8004bd0:	4a14      	ldr	r2, [pc, #80]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bd2:	5cd3      	ldrb	r3, [r2, r3]
 8004bd4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004be0:	4a0e      	ldr	r2, [pc, #56]	; (8004c1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	fb02 f303 	mul.w	r3, r2, r3
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf0:	e004      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	4a0c      	ldr	r2, [pc, #48]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	623b      	str	r3, [r7, #32]
      break;
 8004c00:	e002      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c04:	623b      	str	r3, [r7, #32]
      break;
 8004c06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c08:	6a3b      	ldr	r3, [r7, #32]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	372c      	adds	r7, #44	; 0x2c
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	007a1200 	.word	0x007a1200
 8004c20:	08009a8c 	.word	0x08009a8c
 8004c24:	08009a9c 	.word	0x08009a9c
 8004c28:	003d0900 	.word	0x003d0900

08004c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c32:	681b      	ldr	r3, [r3, #0]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20000000 	.word	0x20000000

08004c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004c4a:	f7ff ffef 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c4e:	4601      	mov	r1, r0
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004c5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	fa92 f2a2 	rbit	r2, r2
 8004c64:	603a      	str	r2, [r7, #0]
  return result;
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	fab2 f282 	clz	r2, r2
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	40d3      	lsrs	r3, r2
 8004c70:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004c72:	5cd3      	ldrb	r3, [r2, r3]
 8004c74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40021000 	.word	0x40021000
 8004c84:	08009a84 	.word	0x08009a84

08004c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004c8e:	f7ff ffcd 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c92:	4601      	mov	r1, r0
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004c9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004ca0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	fa92 f2a2 	rbit	r2, r2
 8004ca8:	603a      	str	r2, [r7, #0]
  return result;
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	fab2 f282 	clz	r2, r2
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	40d3      	lsrs	r3, r2
 8004cb4:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004cb6:	5cd3      	ldrb	r3, [r2, r3]
 8004cb8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	08009a84 	.word	0x08009a84

08004ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e049      	b.n	8004d72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fd fddc 	bl	80028b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f000 fd04 	bl	8005718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e049      	b.n	8004e20 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7fd fd51 	bl	8002848 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2202      	movs	r2, #2
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3304      	adds	r3, #4
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f000 fcad 	bl	8005718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <HAL_TIM_PWM_Start+0x24>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	bf14      	ite	ne
 8004e44:	2301      	movne	r3, #1
 8004e46:	2300      	moveq	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	e03c      	b.n	8004ec6 <HAL_TIM_PWM_Start+0x9e>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d109      	bne.n	8004e66 <HAL_TIM_PWM_Start+0x3e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	bf14      	ite	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	2300      	moveq	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	e02f      	b.n	8004ec6 <HAL_TIM_PWM_Start+0x9e>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d109      	bne.n	8004e80 <HAL_TIM_PWM_Start+0x58>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e022      	b.n	8004ec6 <HAL_TIM_PWM_Start+0x9e>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b0c      	cmp	r3, #12
 8004e84:	d109      	bne.n	8004e9a <HAL_TIM_PWM_Start+0x72>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	bf14      	ite	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	2300      	moveq	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	e015      	b.n	8004ec6 <HAL_TIM_PWM_Start+0x9e>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d109      	bne.n	8004eb4 <HAL_TIM_PWM_Start+0x8c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	bf14      	ite	ne
 8004eac:	2301      	movne	r3, #1
 8004eae:	2300      	moveq	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	e008      	b.n	8004ec6 <HAL_TIM_PWM_Start+0x9e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e088      	b.n	8004fe0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_PWM_Start+0xb6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004edc:	e023      	b.n	8004f26 <HAL_TIM_PWM_Start+0xfe>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_PWM_Start+0xc6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eec:	e01b      	b.n	8004f26 <HAL_TIM_PWM_Start+0xfe>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d104      	bne.n	8004efe <HAL_TIM_PWM_Start+0xd6>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004efc:	e013      	b.n	8004f26 <HAL_TIM_PWM_Start+0xfe>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	d104      	bne.n	8004f0e <HAL_TIM_PWM_Start+0xe6>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f0c:	e00b      	b.n	8004f26 <HAL_TIM_PWM_Start+0xfe>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Start+0xf6>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f1c:	e003      	b.n	8004f26 <HAL_TIM_PWM_Start+0xfe>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2202      	movs	r2, #2
 8004f22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 ff10 	bl	8005d54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2b      	ldr	r2, [pc, #172]	; (8004fe8 <HAL_TIM_PWM_Start+0x1c0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_TIM_PWM_Start+0x134>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a2a      	ldr	r2, [pc, #168]	; (8004fec <HAL_TIM_PWM_Start+0x1c4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_TIM_PWM_Start+0x134>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a28      	ldr	r2, [pc, #160]	; (8004ff0 <HAL_TIM_PWM_Start+0x1c8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_TIM_PWM_Start+0x134>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a27      	ldr	r2, [pc, #156]	; (8004ff4 <HAL_TIM_PWM_Start+0x1cc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d101      	bne.n	8004f60 <HAL_TIM_PWM_Start+0x138>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e000      	b.n	8004f62 <HAL_TIM_PWM_Start+0x13a>
 8004f60:	2300      	movs	r3, #0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	; (8004fe8 <HAL_TIM_PWM_Start+0x1c0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00e      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x176>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d009      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x176>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <HAL_TIM_PWM_Start+0x1d0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x176>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a14      	ldr	r2, [pc, #80]	; (8004fec <HAL_TIM_PWM_Start+0x1c4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d115      	bne.n	8004fca <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <HAL_TIM_PWM_Start+0x1d4>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b06      	cmp	r3, #6
 8004fae:	d015      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x1b4>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb6:	d011      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc8:	e008      	b.n	8004fdc <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0201 	orr.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e000      	b.n	8004fde <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40014400 	.word	0x40014400
 8004ff4:	40014800 	.word	0x40014800
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	00010007 	.word	0x00010007

08005000 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e097      	b.n	8005144 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d106      	bne.n	800502e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7fd fbcd 	bl	80027c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005044:	f023 0307 	bic.w	r3, r3, #7
 8005048:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3304      	adds	r3, #4
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f000 fb5f 	bl	8005718 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	4313      	orrs	r3, r2
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80050a0:	f023 030c 	bic.w	r3, r3, #12
 80050a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	4313      	orrs	r3, r2
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	011a      	lsls	r2, r3, #4
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	031b      	lsls	r3, r3, #12
 80050d0:	4313      	orrs	r3, r2
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80050de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	4313      	orrs	r3, r2
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800515c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005164:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800516c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005174:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d110      	bne.n	800519e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d102      	bne.n	8005188 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005182:	7b7b      	ldrb	r3, [r7, #13]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d001      	beq.n	800518c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e069      	b.n	8005260 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800519c:	e031      	b.n	8005202 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d110      	bne.n	80051c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051a4:	7bbb      	ldrb	r3, [r7, #14]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d102      	bne.n	80051b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051aa:	7b3b      	ldrb	r3, [r7, #12]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d001      	beq.n	80051b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e055      	b.n	8005260 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051c4:	e01d      	b.n	8005202 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d108      	bne.n	80051de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051cc:	7bbb      	ldrb	r3, [r7, #14]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d105      	bne.n	80051de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051d2:	7b7b      	ldrb	r3, [r7, #13]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d102      	bne.n	80051de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051d8:	7b3b      	ldrb	r3, [r7, #12]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d001      	beq.n	80051e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e03e      	b.n	8005260 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_TIM_Encoder_Start+0xc4>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b04      	cmp	r3, #4
 800520c:	d008      	beq.n	8005220 <HAL_TIM_Encoder_Start+0xd4>
 800520e:	e00f      	b.n	8005230 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2201      	movs	r2, #1
 8005216:	2100      	movs	r1, #0
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fd9b 	bl	8005d54 <TIM_CCxChannelCmd>
      break;
 800521e:	e016      	b.n	800524e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2201      	movs	r2, #1
 8005226:	2104      	movs	r1, #4
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fd93 	bl	8005d54 <TIM_CCxChannelCmd>
      break;
 800522e:	e00e      	b.n	800524e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2201      	movs	r2, #1
 8005236:	2100      	movs	r1, #0
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fd8b 	bl	8005d54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2201      	movs	r2, #1
 8005244:	2104      	movs	r1, #4
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fd84 	bl	8005d54 <TIM_CCxChannelCmd>
      break;
 800524c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0201 	orr.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b02      	cmp	r3, #2
 800527c:	d122      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b02      	cmp	r3, #2
 800528a:	d11b      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0202 	mvn.w	r2, #2
 8005294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fa16 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa08 	bl	80056c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fa19 	bl	80056f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d122      	bne.n	8005318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d11b      	bne.n	8005318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0204 	mvn.w	r2, #4
 80052e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f9ec 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 8005304:	e005      	b.n	8005312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f9de 	bl	80056c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f9ef 	bl	80056f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b08      	cmp	r3, #8
 8005324:	d122      	bne.n	800536c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b08      	cmp	r3, #8
 8005332:	d11b      	bne.n	800536c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0208 	mvn.w	r2, #8
 800533c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2204      	movs	r2, #4
 8005342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f9c2 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f9b4 	bl	80056c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f9c5 	bl	80056f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b10      	cmp	r3, #16
 8005378:	d122      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b10      	cmp	r3, #16
 8005386:	d11b      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0210 	mvn.w	r2, #16
 8005390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2208      	movs	r2, #8
 8005396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f998 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f98a 	bl	80056c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f99b 	bl	80056f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d10e      	bne.n	80053ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d107      	bne.n	80053ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0201 	mvn.w	r2, #1
 80053e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fb fee6 	bl	80011b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f6:	2b80      	cmp	r3, #128	; 0x80
 80053f8:	d10e      	bne.n	8005418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005404:	2b80      	cmp	r3, #128	; 0x80
 8005406:	d107      	bne.n	8005418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fdb4 	bl	8005f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005426:	d10e      	bne.n	8005446 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d107      	bne.n	8005446 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800543e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fda7 	bl	8005f94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	d10e      	bne.n	8005472 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d107      	bne.n	8005472 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800546a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f949 	bl	8005704 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b20      	cmp	r3, #32
 800547e:	d10e      	bne.n	800549e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b20      	cmp	r3, #32
 800548c:	d107      	bne.n	800549e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f06f 0220 	mvn.w	r2, #32
 8005496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fd67 	bl	8005f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80054be:	2302      	movs	r3, #2
 80054c0:	e0fd      	b.n	80056be <HAL_TIM_PWM_ConfigChannel+0x216>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b14      	cmp	r3, #20
 80054ce:	f200 80f0 	bhi.w	80056b2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	0800552d 	.word	0x0800552d
 80054dc:	080056b3 	.word	0x080056b3
 80054e0:	080056b3 	.word	0x080056b3
 80054e4:	080056b3 	.word	0x080056b3
 80054e8:	0800556d 	.word	0x0800556d
 80054ec:	080056b3 	.word	0x080056b3
 80054f0:	080056b3 	.word	0x080056b3
 80054f4:	080056b3 	.word	0x080056b3
 80054f8:	080055af 	.word	0x080055af
 80054fc:	080056b3 	.word	0x080056b3
 8005500:	080056b3 	.word	0x080056b3
 8005504:	080056b3 	.word	0x080056b3
 8005508:	080055ef 	.word	0x080055ef
 800550c:	080056b3 	.word	0x080056b3
 8005510:	080056b3 	.word	0x080056b3
 8005514:	080056b3 	.word	0x080056b3
 8005518:	08005631 	.word	0x08005631
 800551c:	080056b3 	.word	0x080056b3
 8005520:	080056b3 	.word	0x080056b3
 8005524:	080056b3 	.word	0x080056b3
 8005528:	08005671 	.word	0x08005671
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f968 	bl	8005808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0204 	bic.w	r2, r2, #4
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	619a      	str	r2, [r3, #24]
      break;
 800556a:	e0a3      	b.n	80056b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f9ce 	bl	8005914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6999      	ldr	r1, [r3, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	021a      	lsls	r2, r3, #8
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	619a      	str	r2, [r3, #24]
      break;
 80055ac:	e082      	b.n	80056b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fa2d 	bl	8005a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0208 	orr.w	r2, r2, #8
 80055c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0204 	bic.w	r2, r2, #4
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	61da      	str	r2, [r3, #28]
      break;
 80055ec:	e062      	b.n	80056b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fa8b 	bl	8005b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69d9      	ldr	r1, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	021a      	lsls	r2, r3, #8
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	61da      	str	r2, [r3, #28]
      break;
 800562e:	e041      	b.n	80056b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 face 	bl	8005bd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0208 	orr.w	r2, r2, #8
 800564a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0204 	bic.w	r2, r2, #4
 800565a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800566e:	e021      	b.n	80056b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fb0c 	bl	8005c94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	021a      	lsls	r2, r3, #8
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056b0:	e000      	b.n	80056b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80056b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop

080056c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a32      	ldr	r2, [pc, #200]	; (80057f4 <TIM_Base_SetConfig+0xdc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d007      	beq.n	8005740 <TIM_Base_SetConfig+0x28>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005736:	d003      	beq.n	8005740 <TIM_Base_SetConfig+0x28>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a2f      	ldr	r2, [pc, #188]	; (80057f8 <TIM_Base_SetConfig+0xe0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d108      	bne.n	8005752 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a27      	ldr	r2, [pc, #156]	; (80057f4 <TIM_Base_SetConfig+0xdc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <TIM_Base_SetConfig+0x6a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005760:	d00f      	beq.n	8005782 <TIM_Base_SetConfig+0x6a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a24      	ldr	r2, [pc, #144]	; (80057f8 <TIM_Base_SetConfig+0xe0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00b      	beq.n	8005782 <TIM_Base_SetConfig+0x6a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a23      	ldr	r2, [pc, #140]	; (80057fc <TIM_Base_SetConfig+0xe4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d007      	beq.n	8005782 <TIM_Base_SetConfig+0x6a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a22      	ldr	r2, [pc, #136]	; (8005800 <TIM_Base_SetConfig+0xe8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_Base_SetConfig+0x6a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a21      	ldr	r2, [pc, #132]	; (8005804 <TIM_Base_SetConfig+0xec>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d108      	bne.n	8005794 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a0e      	ldr	r2, [pc, #56]	; (80057f4 <TIM_Base_SetConfig+0xdc>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_Base_SetConfig+0xc0>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a0e      	ldr	r2, [pc, #56]	; (80057fc <TIM_Base_SetConfig+0xe4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0xc0>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a0d      	ldr	r2, [pc, #52]	; (8005800 <TIM_Base_SetConfig+0xe8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0xc0>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a0c      	ldr	r2, [pc, #48]	; (8005804 <TIM_Base_SetConfig+0xec>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d103      	bne.n	80057e0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	615a      	str	r2, [r3, #20]
}
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40012c00 	.word	0x40012c00
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40014000 	.word	0x40014000
 8005800:	40014400 	.word	0x40014400
 8005804:	40014800 	.word	0x40014800

08005808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f023 0201 	bic.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0303 	bic.w	r3, r3, #3
 8005842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 0302 	bic.w	r3, r3, #2
 8005854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a28      	ldr	r2, [pc, #160]	; (8005904 <TIM_OC1_SetConfig+0xfc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00b      	beq.n	8005880 <TIM_OC1_SetConfig+0x78>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a27      	ldr	r2, [pc, #156]	; (8005908 <TIM_OC1_SetConfig+0x100>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <TIM_OC1_SetConfig+0x78>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a26      	ldr	r2, [pc, #152]	; (800590c <TIM_OC1_SetConfig+0x104>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC1_SetConfig+0x78>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a25      	ldr	r2, [pc, #148]	; (8005910 <TIM_OC1_SetConfig+0x108>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d10c      	bne.n	800589a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0308 	bic.w	r3, r3, #8
 8005886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f023 0304 	bic.w	r3, r3, #4
 8005898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a19      	ldr	r2, [pc, #100]	; (8005904 <TIM_OC1_SetConfig+0xfc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00b      	beq.n	80058ba <TIM_OC1_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a18      	ldr	r2, [pc, #96]	; (8005908 <TIM_OC1_SetConfig+0x100>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d007      	beq.n	80058ba <TIM_OC1_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a17      	ldr	r2, [pc, #92]	; (800590c <TIM_OC1_SetConfig+0x104>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_OC1_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a16      	ldr	r2, [pc, #88]	; (8005910 <TIM_OC1_SetConfig+0x108>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d111      	bne.n	80058de <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	621a      	str	r2, [r3, #32]
}
 80058f8:	bf00      	nop
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40014000 	.word	0x40014000
 800590c:	40014400 	.word	0x40014400
 8005910:	40014800 	.word	0x40014800

08005914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f023 0210 	bic.w	r2, r3, #16
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0320 	bic.w	r3, r3, #32
 8005962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a24      	ldr	r2, [pc, #144]	; (8005a04 <TIM_OC2_SetConfig+0xf0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d10d      	bne.n	8005994 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800597e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005992:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a1b      	ldr	r2, [pc, #108]	; (8005a04 <TIM_OC2_SetConfig+0xf0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00b      	beq.n	80059b4 <TIM_OC2_SetConfig+0xa0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a1a      	ldr	r2, [pc, #104]	; (8005a08 <TIM_OC2_SetConfig+0xf4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d007      	beq.n	80059b4 <TIM_OC2_SetConfig+0xa0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <TIM_OC2_SetConfig+0xf8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d003      	beq.n	80059b4 <TIM_OC2_SetConfig+0xa0>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a18      	ldr	r2, [pc, #96]	; (8005a10 <TIM_OC2_SetConfig+0xfc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d113      	bne.n	80059dc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ba:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059c2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40012c00 	.word	0x40012c00
 8005a08:	40014000 	.word	0x40014000
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800

08005a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0303 	bic.w	r3, r3, #3
 8005a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a23      	ldr	r2, [pc, #140]	; (8005b00 <TIM_OC3_SetConfig+0xec>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d10d      	bne.n	8005a92 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a90:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1a      	ldr	r2, [pc, #104]	; (8005b00 <TIM_OC3_SetConfig+0xec>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00b      	beq.n	8005ab2 <TIM_OC3_SetConfig+0x9e>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a19      	ldr	r2, [pc, #100]	; (8005b04 <TIM_OC3_SetConfig+0xf0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d007      	beq.n	8005ab2 <TIM_OC3_SetConfig+0x9e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a18      	ldr	r2, [pc, #96]	; (8005b08 <TIM_OC3_SetConfig+0xf4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d003      	beq.n	8005ab2 <TIM_OC3_SetConfig+0x9e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <TIM_OC3_SetConfig+0xf8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d113      	bne.n	8005ada <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	621a      	str	r2, [r3, #32]
}
 8005af4:	bf00      	nop
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40014400 	.word	0x40014400
 8005b0c:	40014800 	.word	0x40014800

08005b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	031b      	lsls	r3, r3, #12
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a16      	ldr	r2, [pc, #88]	; (8005bc8 <TIM_OC4_SetConfig+0xb8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_OC4_SetConfig+0x7c>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <TIM_OC4_SetConfig+0xbc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_OC4_SetConfig+0x7c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a14      	ldr	r2, [pc, #80]	; (8005bd0 <TIM_OC4_SetConfig+0xc0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_OC4_SetConfig+0x7c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a13      	ldr	r2, [pc, #76]	; (8005bd4 <TIM_OC4_SetConfig+0xc4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d109      	bne.n	8005ba0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	019b      	lsls	r3, r3, #6
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40014400 	.word	0x40014400
 8005bd4:	40014800 	.word	0x40014800

08005bd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	041b      	lsls	r3, r3, #16
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <TIM_OC5_SetConfig+0xac>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00b      	beq.n	8005c4a <TIM_OC5_SetConfig+0x72>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a14      	ldr	r2, [pc, #80]	; (8005c88 <TIM_OC5_SetConfig+0xb0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d007      	beq.n	8005c4a <TIM_OC5_SetConfig+0x72>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a13      	ldr	r2, [pc, #76]	; (8005c8c <TIM_OC5_SetConfig+0xb4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d003      	beq.n	8005c4a <TIM_OC5_SetConfig+0x72>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <TIM_OC5_SetConfig+0xb8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d109      	bne.n	8005c5e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	621a      	str	r2, [r3, #32]
}
 8005c78:	bf00      	nop
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40014000 	.word	0x40014000
 8005c8c:	40014400 	.word	0x40014400
 8005c90:	40014800 	.word	0x40014800

08005c94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	051b      	lsls	r3, r3, #20
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a16      	ldr	r2, [pc, #88]	; (8005d44 <TIM_OC6_SetConfig+0xb0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00b      	beq.n	8005d08 <TIM_OC6_SetConfig+0x74>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a15      	ldr	r2, [pc, #84]	; (8005d48 <TIM_OC6_SetConfig+0xb4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d007      	beq.n	8005d08 <TIM_OC6_SetConfig+0x74>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a14      	ldr	r2, [pc, #80]	; (8005d4c <TIM_OC6_SetConfig+0xb8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d003      	beq.n	8005d08 <TIM_OC6_SetConfig+0x74>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <TIM_OC6_SetConfig+0xbc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d109      	bne.n	8005d1c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	029b      	lsls	r3, r3, #10
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40012c00 	.word	0x40012c00
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40014400 	.word	0x40014400
 8005d50:	40014800 	.word	0x40014800

08005d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2201      	movs	r2, #1
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1a      	ldr	r2, [r3, #32]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	43db      	mvns	r3, r3
 8005d76:	401a      	ands	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1a      	ldr	r2, [r3, #32]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e054      	b.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a24      	ldr	r2, [pc, #144]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d108      	bne.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005de8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a17      	ldr	r2, [pc, #92]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00e      	beq.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e20:	d009      	beq.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a13      	ldr	r2, [pc, #76]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d004      	beq.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a11      	ldr	r2, [pc, #68]	; (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d10c      	bne.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40012c00 	.word	0x40012c00
 8005e74:	40000400 	.word	0x40000400
 8005e78:	40014000 	.word	0x40014000

08005e7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e060      	b.n	8005f5a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	041b      	lsls	r3, r3, #16
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a14      	ldr	r2, [pc, #80]	; (8005f68 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d115      	bne.n	8005f48 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	051b      	lsls	r3, r3, #20
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40012c00 	.word	0x40012c00

08005f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e040      	b.n	800603c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fc fd96 	bl	8002afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2224      	movs	r2, #36	; 0x24
 8005fd4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0201 	bic.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fbb8 	bl	800675c <UART_SetConfig>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e022      	b.n	800603c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fce2 	bl	80069c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fd69 	bl	8006b0c <UART_CheckIdleState>
 800603a:	4603      	mov	r3, r0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08a      	sub	sp, #40	; 0x28
 8006048:	af02      	add	r7, sp, #8
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006058:	2b20      	cmp	r3, #32
 800605a:	f040 80bf 	bne.w	80061dc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <HAL_UART_Receive+0x26>
 8006064:	88fb      	ldrh	r3, [r7, #6]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e0b7      	b.n	80061de <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_UART_Receive+0x38>
 8006078:	2302      	movs	r3, #2
 800607a:	e0b0      	b.n	80061de <HAL_UART_Receive+0x19a>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2222      	movs	r2, #34	; 0x22
 8006090:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006098:	f7fd f876 	bl	8003188 <HAL_GetTick>
 800609c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	88fa      	ldrh	r2, [r7, #6]
 80060aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b6:	d10e      	bne.n	80060d6 <HAL_UART_Receive+0x92>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d105      	bne.n	80060cc <HAL_UART_Receive+0x88>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060ca:	e02d      	b.n	8006128 <HAL_UART_Receive+0xe4>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	22ff      	movs	r2, #255	; 0xff
 80060d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060d4:	e028      	b.n	8006128 <HAL_UART_Receive+0xe4>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10d      	bne.n	80060fa <HAL_UART_Receive+0xb6>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <HAL_UART_Receive+0xac>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	22ff      	movs	r2, #255	; 0xff
 80060ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060ee:	e01b      	b.n	8006128 <HAL_UART_Receive+0xe4>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	227f      	movs	r2, #127	; 0x7f
 80060f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060f8:	e016      	b.n	8006128 <HAL_UART_Receive+0xe4>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006102:	d10d      	bne.n	8006120 <HAL_UART_Receive+0xdc>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <HAL_UART_Receive+0xd2>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	227f      	movs	r2, #127	; 0x7f
 8006110:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006114:	e008      	b.n	8006128 <HAL_UART_Receive+0xe4>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	223f      	movs	r2, #63	; 0x3f
 800611a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800611e:	e003      	b.n	8006128 <HAL_UART_Receive+0xe4>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800612e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006138:	d108      	bne.n	800614c <HAL_UART_Receive+0x108>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d104      	bne.n	800614c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006142:	2300      	movs	r3, #0
 8006144:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	e003      	b.n	8006154 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006150:	2300      	movs	r3, #0
 8006152:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800615c:	e033      	b.n	80061c6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2200      	movs	r2, #0
 8006166:	2120      	movs	r1, #32
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fd18 	bl	8006b9e <UART_WaitOnFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e032      	b.n	80061de <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10c      	bne.n	8006198 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006184:	b29a      	uxth	r2, r3
 8006186:	8a7b      	ldrh	r3, [r7, #18]
 8006188:	4013      	ands	r3, r2
 800618a:	b29a      	uxth	r2, r3
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	3302      	adds	r3, #2
 8006194:	61bb      	str	r3, [r7, #24]
 8006196:	e00d      	b.n	80061b4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800619e:	b29b      	uxth	r3, r3
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	8a7b      	ldrh	r3, [r7, #18]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	4013      	ands	r3, r2
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	3301      	adds	r3, #1
 80061b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1c5      	bne.n	800615e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2220      	movs	r2, #32
 80061d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e000      	b.n	80061de <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3720      	adds	r7, #32
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	4613      	mov	r3, r2
 80061f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d145      	bne.n	800628a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <HAL_UART_Transmit_IT+0x22>
 8006204:	88fb      	ldrh	r3, [r7, #6]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e03e      	b.n	800628c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_UART_Transmit_IT+0x34>
 8006218:	2302      	movs	r3, #2
 800621a:	e037      	b.n	800628c <HAL_UART_Transmit_IT+0xa4>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	88fa      	ldrh	r2, [r7, #6]
 800622e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	88fa      	ldrh	r2, [r7, #6]
 8006236:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2221      	movs	r2, #33	; 0x21
 800624c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006256:	d107      	bne.n	8006268 <HAL_UART_Transmit_IT+0x80>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d103      	bne.n	8006268 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4a0d      	ldr	r2, [pc, #52]	; (8006298 <HAL_UART_Transmit_IT+0xb0>)
 8006264:	669a      	str	r2, [r3, #104]	; 0x68
 8006266:	e002      	b.n	800626e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4a0c      	ldr	r2, [pc, #48]	; (800629c <HAL_UART_Transmit_IT+0xb4>)
 800626c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006284:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	e000      	b.n	800628c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800628a:	2302      	movs	r3, #2
  }
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	08006ea7 	.word	0x08006ea7
 800629c:	08006e33 	.word	0x08006e33

080062a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d12c      	bne.n	8006310 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_UART_Receive_IT+0x22>
 80062bc:	88fb      	ldrh	r3, [r7, #6]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e025      	b.n	8006312 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_UART_Receive_IT+0x34>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e01e      	b.n	8006312 <HAL_UART_Receive_IT+0x72>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d007      	beq.n	8006300 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80062fe:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	461a      	mov	r2, r3
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fcc6 	bl	8006c98 <UART_Start_Receive_IT>
 800630c:	4603      	mov	r3, r0
 800630e:	e000      	b.n	8006312 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006310:	2302      	movs	r3, #2
  }
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006342:	4013      	ands	r3, r2
 8006344:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d113      	bne.n	8006374 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00e      	beq.n	8006374 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d009      	beq.n	8006374 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 81cc 	beq.w	8006702 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	4798      	blx	r3
      }
      return;
 8006372:	e1c6      	b.n	8006702 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 80e3 	beq.w	8006542 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d105      	bne.n	8006392 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	4ba5      	ldr	r3, [pc, #660]	; (8006620 <HAL_UART_IRQHandler+0x304>)
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 80d8 	beq.w	8006542 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d010      	beq.n	80063be <HAL_UART_IRQHandler+0xa2>
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2201      	movs	r2, #1
 80063ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063b4:	f043 0201 	orr.w	r2, r3, #1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d010      	beq.n	80063ea <HAL_UART_IRQHandler+0xce>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00b      	beq.n	80063ea <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2202      	movs	r2, #2
 80063d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063e0:	f043 0204 	orr.w	r2, r3, #4
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d010      	beq.n	8006416 <HAL_UART_IRQHandler+0xfa>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2204      	movs	r2, #4
 8006404:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800640c:	f043 0202 	orr.w	r2, r3, #2
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d015      	beq.n	800644c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d104      	bne.n	8006434 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2208      	movs	r2, #8
 800643a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006442:	f043 0208 	orr.w	r2, r3, #8
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006452:	2b00      	cmp	r3, #0
 8006454:	d011      	beq.n	800647a <HAL_UART_IRQHandler+0x15e>
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00c      	beq.n	800647a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006470:	f043 0220 	orr.w	r2, r3, #32
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 8140 	beq.w	8006706 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00c      	beq.n	80064aa <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064b0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064bc:	2b40      	cmp	r3, #64	; 0x40
 80064be:	d004      	beq.n	80064ca <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d031      	beq.n	800652e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fc6c 	bl	8006da8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064da:	2b40      	cmp	r3, #64	; 0x40
 80064dc:	d123      	bne.n	8006526 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d013      	beq.n	800651e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fa:	4a4a      	ldr	r2, [pc, #296]	; (8006624 <HAL_UART_IRQHandler+0x308>)
 80064fc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006502:	4618      	mov	r0, r3
 8006504:	f7fd f801 	bl	800350a <HAL_DMA_Abort_IT>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d017      	beq.n	800653e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006518:	4610      	mov	r0, r2
 800651a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800651c:	e00f      	b.n	800653e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f906 	bl	8006730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	e00b      	b.n	800653e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f902 	bl	8006730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	e007      	b.n	800653e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f8fe 	bl	8006730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800653c:	e0e3      	b.n	8006706 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653e:	bf00      	nop
    return;
 8006540:	e0e1      	b.n	8006706 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006546:	2b01      	cmp	r3, #1
 8006548:	f040 80a7 	bne.w	800669a <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 80a1 	beq.w	800669a <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f003 0310 	and.w	r3, r3, #16
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 809b 	beq.w	800669a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2210      	movs	r2, #16
 800656a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b40      	cmp	r3, #64	; 0x40
 8006578:	d156      	bne.n	8006628 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006584:	893b      	ldrh	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 80bf 	beq.w	800670a <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006592:	893a      	ldrh	r2, [r7, #8]
 8006594:	429a      	cmp	r2, r3
 8006596:	f080 80b8 	bcs.w	800670a <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	893a      	ldrh	r2, [r7, #8]
 800659e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d02a      	beq.n	8006602 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0201 	bic.w	r2, r2, #1
 80065ca:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065da:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0210 	bic.w	r2, r2, #16
 80065f6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fc ff4b 	bl	8003498 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800660e:	b29b      	uxth	r3, r3
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	b29b      	uxth	r3, r3
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f894 	bl	8006744 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800661c:	e075      	b.n	800670a <HAL_UART_IRQHandler+0x3ee>
 800661e:	bf00      	nop
 8006620:	04000120 	.word	0x04000120
 8006624:	08006e07 	.word	0x08006e07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006634:	b29b      	uxth	r3, r3
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d063      	beq.n	800670e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8006646:	897b      	ldrh	r3, [r7, #10]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d060      	beq.n	800670e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800665a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0201 	bic.w	r2, r2, #1
 800666a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0210 	bic.w	r2, r2, #16
 800668c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800668e:	897b      	ldrh	r3, [r7, #10]
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f856 	bl	8006744 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006698:	e039      	b.n	800670e <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00d      	beq.n	80066c0 <HAL_UART_IRQHandler+0x3a4>
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d008      	beq.n	80066c0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fd1f 	bl	80070fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066be:	e029      	b.n	8006714 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00d      	beq.n	80066e6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d008      	beq.n	80066e6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01a      	beq.n	8006712 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
    }
    return;
 80066e4:	e015      	b.n	8006712 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d011      	beq.n	8006714 <HAL_UART_IRQHandler+0x3f8>
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00c      	beq.n	8006714 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fc11 	bl	8006f22 <UART_EndTransmit_IT>
    return;
 8006700:	e008      	b.n	8006714 <HAL_UART_IRQHandler+0x3f8>
      return;
 8006702:	bf00      	nop
 8006704:	e006      	b.n	8006714 <HAL_UART_IRQHandler+0x3f8>
    return;
 8006706:	bf00      	nop
 8006708:	e004      	b.n	8006714 <HAL_UART_IRQHandler+0x3f8>
      return;
 800670a:	bf00      	nop
 800670c:	e002      	b.n	8006714 <HAL_UART_IRQHandler+0x3f8>
      return;
 800670e:	bf00      	nop
 8006710:	e000      	b.n	8006714 <HAL_UART_IRQHandler+0x3f8>
    return;
 8006712:	bf00      	nop
  }

}
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop

0800671c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4b8a      	ldr	r3, [pc, #552]	; (80069b0 <UART_SetConfig+0x254>)
 8006788:	4013      	ands	r3, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6812      	ldr	r2, [r2, #0]
 800678e:	6979      	ldr	r1, [r7, #20]
 8006790:	430b      	orrs	r3, r1
 8006792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a78      	ldr	r2, [pc, #480]	; (80069b4 <UART_SetConfig+0x258>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d120      	bne.n	800681a <UART_SetConfig+0xbe>
 80067d8:	4b77      	ldr	r3, [pc, #476]	; (80069b8 <UART_SetConfig+0x25c>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d817      	bhi.n	8006814 <UART_SetConfig+0xb8>
 80067e4:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <UART_SetConfig+0x90>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	080067fd 	.word	0x080067fd
 80067f0:	08006809 	.word	0x08006809
 80067f4:	0800680f 	.word	0x0800680f
 80067f8:	08006803 	.word	0x08006803
 80067fc:	2300      	movs	r3, #0
 80067fe:	77fb      	strb	r3, [r7, #31]
 8006800:	e01d      	b.n	800683e <UART_SetConfig+0xe2>
 8006802:	2302      	movs	r3, #2
 8006804:	77fb      	strb	r3, [r7, #31]
 8006806:	e01a      	b.n	800683e <UART_SetConfig+0xe2>
 8006808:	2304      	movs	r3, #4
 800680a:	77fb      	strb	r3, [r7, #31]
 800680c:	e017      	b.n	800683e <UART_SetConfig+0xe2>
 800680e:	2308      	movs	r3, #8
 8006810:	77fb      	strb	r3, [r7, #31]
 8006812:	e014      	b.n	800683e <UART_SetConfig+0xe2>
 8006814:	2310      	movs	r3, #16
 8006816:	77fb      	strb	r3, [r7, #31]
 8006818:	e011      	b.n	800683e <UART_SetConfig+0xe2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a67      	ldr	r2, [pc, #412]	; (80069bc <UART_SetConfig+0x260>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d102      	bne.n	800682a <UART_SetConfig+0xce>
 8006824:	2300      	movs	r3, #0
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e009      	b.n	800683e <UART_SetConfig+0xe2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a64      	ldr	r2, [pc, #400]	; (80069c0 <UART_SetConfig+0x264>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d102      	bne.n	800683a <UART_SetConfig+0xde>
 8006834:	2300      	movs	r3, #0
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e001      	b.n	800683e <UART_SetConfig+0xe2>
 800683a:	2310      	movs	r3, #16
 800683c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006846:	d15b      	bne.n	8006900 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006848:	7ffb      	ldrb	r3, [r7, #31]
 800684a:	2b08      	cmp	r3, #8
 800684c:	d827      	bhi.n	800689e <UART_SetConfig+0x142>
 800684e:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <UART_SetConfig+0xf8>)
 8006850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006854:	08006879 	.word	0x08006879
 8006858:	08006881 	.word	0x08006881
 800685c:	08006889 	.word	0x08006889
 8006860:	0800689f 	.word	0x0800689f
 8006864:	0800688f 	.word	0x0800688f
 8006868:	0800689f 	.word	0x0800689f
 800686c:	0800689f 	.word	0x0800689f
 8006870:	0800689f 	.word	0x0800689f
 8006874:	08006897 	.word	0x08006897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006878:	f7fe f9e4 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 800687c:	61b8      	str	r0, [r7, #24]
        break;
 800687e:	e013      	b.n	80068a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006880:	f7fe fa02 	bl	8004c88 <HAL_RCC_GetPCLK2Freq>
 8006884:	61b8      	str	r0, [r7, #24]
        break;
 8006886:	e00f      	b.n	80068a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006888:	4b4e      	ldr	r3, [pc, #312]	; (80069c4 <UART_SetConfig+0x268>)
 800688a:	61bb      	str	r3, [r7, #24]
        break;
 800688c:	e00c      	b.n	80068a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688e:	f7fe f963 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8006892:	61b8      	str	r0, [r7, #24]
        break;
 8006894:	e008      	b.n	80068a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800689a:	61bb      	str	r3, [r7, #24]
        break;
 800689c:	e004      	b.n	80068a8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	77bb      	strb	r3, [r7, #30]
        break;
 80068a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d074      	beq.n	8006998 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	005a      	lsls	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	441a      	add	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b0f      	cmp	r3, #15
 80068ca:	d916      	bls.n	80068fa <UART_SetConfig+0x19e>
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d2:	d212      	bcs.n	80068fa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f023 030f 	bic.w	r3, r3, #15
 80068dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	085b      	lsrs	r3, r3, #1
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	89fb      	ldrh	r3, [r7, #14]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	89fa      	ldrh	r2, [r7, #14]
 80068f6:	60da      	str	r2, [r3, #12]
 80068f8:	e04e      	b.n	8006998 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	77bb      	strb	r3, [r7, #30]
 80068fe:	e04b      	b.n	8006998 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006900:	7ffb      	ldrb	r3, [r7, #31]
 8006902:	2b08      	cmp	r3, #8
 8006904:	d827      	bhi.n	8006956 <UART_SetConfig+0x1fa>
 8006906:	a201      	add	r2, pc, #4	; (adr r2, 800690c <UART_SetConfig+0x1b0>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	08006931 	.word	0x08006931
 8006910:	08006939 	.word	0x08006939
 8006914:	08006941 	.word	0x08006941
 8006918:	08006957 	.word	0x08006957
 800691c:	08006947 	.word	0x08006947
 8006920:	08006957 	.word	0x08006957
 8006924:	08006957 	.word	0x08006957
 8006928:	08006957 	.word	0x08006957
 800692c:	0800694f 	.word	0x0800694f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006930:	f7fe f988 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 8006934:	61b8      	str	r0, [r7, #24]
        break;
 8006936:	e013      	b.n	8006960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006938:	f7fe f9a6 	bl	8004c88 <HAL_RCC_GetPCLK2Freq>
 800693c:	61b8      	str	r0, [r7, #24]
        break;
 800693e:	e00f      	b.n	8006960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006940:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <UART_SetConfig+0x268>)
 8006942:	61bb      	str	r3, [r7, #24]
        break;
 8006944:	e00c      	b.n	8006960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006946:	f7fe f907 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 800694a:	61b8      	str	r0, [r7, #24]
        break;
 800694c:	e008      	b.n	8006960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006952:	61bb      	str	r3, [r7, #24]
        break;
 8006954:	e004      	b.n	8006960 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	77bb      	strb	r3, [r7, #30]
        break;
 800695e:	bf00      	nop
    }

    if (pclk != 0U)
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d018      	beq.n	8006998 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	085a      	lsrs	r2, r3, #1
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	441a      	add	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	fbb2 f3f3 	udiv	r3, r2, r3
 8006978:	b29b      	uxth	r3, r3
 800697a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b0f      	cmp	r3, #15
 8006980:	d908      	bls.n	8006994 <UART_SetConfig+0x238>
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006988:	d204      	bcs.n	8006994 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	60da      	str	r2, [r3, #12]
 8006992:	e001      	b.n	8006998 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	efff69f3 	.word	0xefff69f3
 80069b4:	40013800 	.word	0x40013800
 80069b8:	40021000 	.word	0x40021000
 80069bc:	40004400 	.word	0x40004400
 80069c0:	40004800 	.word	0x40004800
 80069c4:	007a1200 	.word	0x007a1200

080069c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00a      	beq.n	8006a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01a      	beq.n	8006ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac6:	d10a      	bne.n	8006ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	605a      	str	r2, [r3, #4]
  }
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b1c:	f7fc fb34 	bl	8003188 <HAL_GetTick>
 8006b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d10e      	bne.n	8006b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f82d 	bl	8006b9e <UART_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e023      	b.n	8006b96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d10e      	bne.n	8006b7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f817 	bl	8006b9e <UART_WaitOnFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e00d      	b.n	8006b96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	4613      	mov	r3, r2
 8006bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bae:	e05e      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bb6:	d05a      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bb8:	f7fc fae6 	bl	8003188 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d302      	bcc.n	8006bce <UART_WaitOnFlagUntilTimeout+0x30>
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d11b      	bne.n	8006c06 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bdc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e043      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02c      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c22:	d124      	bne.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c3c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2220      	movs	r2, #32
 8006c52:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e00f      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4013      	ands	r3, r2
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	bf0c      	ite	eq
 8006c7e:	2301      	moveq	r3, #1
 8006c80:	2300      	movne	r3, #0
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d091      	beq.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	88fa      	ldrh	r2, [r7, #6]
 8006cb0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	88fa      	ldrh	r2, [r7, #6]
 8006cb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cca:	d10e      	bne.n	8006cea <UART_Start_Receive_IT+0x52>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d105      	bne.n	8006ce0 <UART_Start_Receive_IT+0x48>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006cda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cde:	e02d      	b.n	8006d3c <UART_Start_Receive_IT+0xa4>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	22ff      	movs	r2, #255	; 0xff
 8006ce4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ce8:	e028      	b.n	8006d3c <UART_Start_Receive_IT+0xa4>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10d      	bne.n	8006d0e <UART_Start_Receive_IT+0x76>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d104      	bne.n	8006d04 <UART_Start_Receive_IT+0x6c>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d02:	e01b      	b.n	8006d3c <UART_Start_Receive_IT+0xa4>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	227f      	movs	r2, #127	; 0x7f
 8006d08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d0c:	e016      	b.n	8006d3c <UART_Start_Receive_IT+0xa4>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d16:	d10d      	bne.n	8006d34 <UART_Start_Receive_IT+0x9c>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <UART_Start_Receive_IT+0x92>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	227f      	movs	r2, #127	; 0x7f
 8006d24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d28:	e008      	b.n	8006d3c <UART_Start_Receive_IT+0xa4>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	223f      	movs	r2, #63	; 0x3f
 8006d2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d32:	e003      	b.n	8006d3c <UART_Start_Receive_IT+0xa4>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2222      	movs	r2, #34	; 0x22
 8006d48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0201 	orr.w	r2, r2, #1
 8006d58:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d62:	d107      	bne.n	8006d74 <UART_Start_Receive_IT+0xdc>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d103      	bne.n	8006d74 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4a0c      	ldr	r2, [pc, #48]	; (8006da0 <UART_Start_Receive_IT+0x108>)
 8006d70:	665a      	str	r2, [r3, #100]	; 0x64
 8006d72:	e002      	b.n	8006d7a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4a0b      	ldr	r2, [pc, #44]	; (8006da4 <UART_Start_Receive_IT+0x10c>)
 8006d78:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006d90:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	08007029 	.word	0x08007029
 8006da4:	08006f55 	.word	0x08006f55

08006da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006dbe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0201 	bic.w	r2, r2, #1
 8006dce:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d107      	bne.n	8006de8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0210 	bic.w	r2, r2, #16
 8006de6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f7ff fc83 	bl	8006730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e3e:	2b21      	cmp	r3, #33	; 0x21
 8006e40:	d12b      	bne.n	8006e9a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d110      	bne.n	8006e70 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e5c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e6c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006e6e:	e014      	b.n	8006e9a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e74:	781a      	ldrb	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	b292      	uxth	r2, r2
 8006e7c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eb2:	2b21      	cmp	r3, #33	; 0x21
 8006eb4:	d12f      	bne.n	8006f16 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d110      	bne.n	8006ee4 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ed0:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ee0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006ee2:	e018      	b.n	8006f16 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee8:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	881a      	ldrh	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef6:	b292      	uxth	r2, r2
 8006ef8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efe:	1c9a      	adds	r2, r3, #2
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006f16:	bf00      	nop
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b082      	sub	sp, #8
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f38:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff fbe8 	bl	800671c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f62:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f68:	2b22      	cmp	r3, #34	; 0x22
 8006f6a:	d151      	bne.n	8007010 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f72:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f74:	89bb      	ldrh	r3, [r7, #12]
 8006f76:	b2d9      	uxtb	r1, r3
 8006f78:	89fb      	ldrh	r3, [r7, #14]
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f80:	400a      	ands	r2, r1
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d138      	bne.n	8007020 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fbc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0201 	bic.w	r2, r2, #1
 8006fcc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d10f      	bne.n	8007002 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0210 	bic.w	r2, r2, #16
 8006ff0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff fba2 	bl	8006744 <HAL_UARTEx_RxEventCallback>
 8007000:	e002      	b.n	8007008 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7f9 ff5c 	bl	8000ec0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800700e:	e007      	b.n	8007020 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699a      	ldr	r2, [r3, #24]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0208 	orr.w	r2, r2, #8
 800701e:	619a      	str	r2, [r3, #24]
}
 8007020:	bf00      	nop
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007036:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800703c:	2b22      	cmp	r3, #34	; 0x22
 800703e:	d151      	bne.n	80070e4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007046:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800704e:	89ba      	ldrh	r2, [r7, #12]
 8007050:	89fb      	ldrh	r3, [r7, #14]
 8007052:	4013      	ands	r3, r2
 8007054:	b29a      	uxth	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705e:	1c9a      	adds	r2, r3, #2
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800706a:	b29b      	uxth	r3, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d138      	bne.n	80070f4 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007090:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0201 	bic.w	r2, r2, #1
 80070a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d10f      	bne.n	80070d6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0210 	bic.w	r2, r2, #16
 80070c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff fb38 	bl	8006744 <HAL_UARTEx_RxEventCallback>
 80070d4:	e002      	b.n	80070dc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7f9 fef2 	bl	8000ec0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070e2:	e007      	b.n	80070f4 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699a      	ldr	r2, [r3, #24]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0208 	orr.w	r2, r2, #8
 80070f2:	619a      	str	r2, [r3, #24]
}
 80070f4:	bf00      	nop
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <__errno>:
 8007110:	4b01      	ldr	r3, [pc, #4]	; (8007118 <__errno+0x8>)
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	2000000c 	.word	0x2000000c

0800711c <__libc_init_array>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	4d0d      	ldr	r5, [pc, #52]	; (8007154 <__libc_init_array+0x38>)
 8007120:	4c0d      	ldr	r4, [pc, #52]	; (8007158 <__libc_init_array+0x3c>)
 8007122:	1b64      	subs	r4, r4, r5
 8007124:	10a4      	asrs	r4, r4, #2
 8007126:	2600      	movs	r6, #0
 8007128:	42a6      	cmp	r6, r4
 800712a:	d109      	bne.n	8007140 <__libc_init_array+0x24>
 800712c:	4d0b      	ldr	r5, [pc, #44]	; (800715c <__libc_init_array+0x40>)
 800712e:	4c0c      	ldr	r4, [pc, #48]	; (8007160 <__libc_init_array+0x44>)
 8007130:	f002 fc0c 	bl	800994c <_init>
 8007134:	1b64      	subs	r4, r4, r5
 8007136:	10a4      	asrs	r4, r4, #2
 8007138:	2600      	movs	r6, #0
 800713a:	42a6      	cmp	r6, r4
 800713c:	d105      	bne.n	800714a <__libc_init_array+0x2e>
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	f855 3b04 	ldr.w	r3, [r5], #4
 8007144:	4798      	blx	r3
 8007146:	3601      	adds	r6, #1
 8007148:	e7ee      	b.n	8007128 <__libc_init_array+0xc>
 800714a:	f855 3b04 	ldr.w	r3, [r5], #4
 800714e:	4798      	blx	r3
 8007150:	3601      	adds	r6, #1
 8007152:	e7f2      	b.n	800713a <__libc_init_array+0x1e>
 8007154:	08009d20 	.word	0x08009d20
 8007158:	08009d20 	.word	0x08009d20
 800715c:	08009d20 	.word	0x08009d20
 8007160:	08009d24 	.word	0x08009d24

08007164 <memcpy>:
 8007164:	440a      	add	r2, r1
 8007166:	4291      	cmp	r1, r2
 8007168:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800716c:	d100      	bne.n	8007170 <memcpy+0xc>
 800716e:	4770      	bx	lr
 8007170:	b510      	push	{r4, lr}
 8007172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800717a:	4291      	cmp	r1, r2
 800717c:	d1f9      	bne.n	8007172 <memcpy+0xe>
 800717e:	bd10      	pop	{r4, pc}

08007180 <memset>:
 8007180:	4402      	add	r2, r0
 8007182:	4603      	mov	r3, r0
 8007184:	4293      	cmp	r3, r2
 8007186:	d100      	bne.n	800718a <memset+0xa>
 8007188:	4770      	bx	lr
 800718a:	f803 1b01 	strb.w	r1, [r3], #1
 800718e:	e7f9      	b.n	8007184 <memset+0x4>

08007190 <iprintf>:
 8007190:	b40f      	push	{r0, r1, r2, r3}
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <iprintf+0x2c>)
 8007194:	b513      	push	{r0, r1, r4, lr}
 8007196:	681c      	ldr	r4, [r3, #0]
 8007198:	b124      	cbz	r4, 80071a4 <iprintf+0x14>
 800719a:	69a3      	ldr	r3, [r4, #24]
 800719c:	b913      	cbnz	r3, 80071a4 <iprintf+0x14>
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 fa5e 	bl	8007660 <__sinit>
 80071a4:	ab05      	add	r3, sp, #20
 80071a6:	9a04      	ldr	r2, [sp, #16]
 80071a8:	68a1      	ldr	r1, [r4, #8]
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 fc2f 	bl	8007a10 <_vfiprintf_r>
 80071b2:	b002      	add	sp, #8
 80071b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b8:	b004      	add	sp, #16
 80071ba:	4770      	bx	lr
 80071bc:	2000000c 	.word	0x2000000c

080071c0 <_puts_r>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	460e      	mov	r6, r1
 80071c4:	4605      	mov	r5, r0
 80071c6:	b118      	cbz	r0, 80071d0 <_puts_r+0x10>
 80071c8:	6983      	ldr	r3, [r0, #24]
 80071ca:	b90b      	cbnz	r3, 80071d0 <_puts_r+0x10>
 80071cc:	f000 fa48 	bl	8007660 <__sinit>
 80071d0:	69ab      	ldr	r3, [r5, #24]
 80071d2:	68ac      	ldr	r4, [r5, #8]
 80071d4:	b913      	cbnz	r3, 80071dc <_puts_r+0x1c>
 80071d6:	4628      	mov	r0, r5
 80071d8:	f000 fa42 	bl	8007660 <__sinit>
 80071dc:	4b2c      	ldr	r3, [pc, #176]	; (8007290 <_puts_r+0xd0>)
 80071de:	429c      	cmp	r4, r3
 80071e0:	d120      	bne.n	8007224 <_puts_r+0x64>
 80071e2:	686c      	ldr	r4, [r5, #4]
 80071e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071e6:	07db      	lsls	r3, r3, #31
 80071e8:	d405      	bmi.n	80071f6 <_puts_r+0x36>
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	0598      	lsls	r0, r3, #22
 80071ee:	d402      	bmi.n	80071f6 <_puts_r+0x36>
 80071f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071f2:	f000 fad3 	bl	800779c <__retarget_lock_acquire_recursive>
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	0719      	lsls	r1, r3, #28
 80071fa:	d51d      	bpl.n	8007238 <_puts_r+0x78>
 80071fc:	6923      	ldr	r3, [r4, #16]
 80071fe:	b1db      	cbz	r3, 8007238 <_puts_r+0x78>
 8007200:	3e01      	subs	r6, #1
 8007202:	68a3      	ldr	r3, [r4, #8]
 8007204:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007208:	3b01      	subs	r3, #1
 800720a:	60a3      	str	r3, [r4, #8]
 800720c:	bb39      	cbnz	r1, 800725e <_puts_r+0x9e>
 800720e:	2b00      	cmp	r3, #0
 8007210:	da38      	bge.n	8007284 <_puts_r+0xc4>
 8007212:	4622      	mov	r2, r4
 8007214:	210a      	movs	r1, #10
 8007216:	4628      	mov	r0, r5
 8007218:	f000 f848 	bl	80072ac <__swbuf_r>
 800721c:	3001      	adds	r0, #1
 800721e:	d011      	beq.n	8007244 <_puts_r+0x84>
 8007220:	250a      	movs	r5, #10
 8007222:	e011      	b.n	8007248 <_puts_r+0x88>
 8007224:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <_puts_r+0xd4>)
 8007226:	429c      	cmp	r4, r3
 8007228:	d101      	bne.n	800722e <_puts_r+0x6e>
 800722a:	68ac      	ldr	r4, [r5, #8]
 800722c:	e7da      	b.n	80071e4 <_puts_r+0x24>
 800722e:	4b1a      	ldr	r3, [pc, #104]	; (8007298 <_puts_r+0xd8>)
 8007230:	429c      	cmp	r4, r3
 8007232:	bf08      	it	eq
 8007234:	68ec      	ldreq	r4, [r5, #12]
 8007236:	e7d5      	b.n	80071e4 <_puts_r+0x24>
 8007238:	4621      	mov	r1, r4
 800723a:	4628      	mov	r0, r5
 800723c:	f000 f888 	bl	8007350 <__swsetup_r>
 8007240:	2800      	cmp	r0, #0
 8007242:	d0dd      	beq.n	8007200 <_puts_r+0x40>
 8007244:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800724a:	07da      	lsls	r2, r3, #31
 800724c:	d405      	bmi.n	800725a <_puts_r+0x9a>
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	059b      	lsls	r3, r3, #22
 8007252:	d402      	bmi.n	800725a <_puts_r+0x9a>
 8007254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007256:	f000 faa2 	bl	800779e <__retarget_lock_release_recursive>
 800725a:	4628      	mov	r0, r5
 800725c:	bd70      	pop	{r4, r5, r6, pc}
 800725e:	2b00      	cmp	r3, #0
 8007260:	da04      	bge.n	800726c <_puts_r+0xac>
 8007262:	69a2      	ldr	r2, [r4, #24]
 8007264:	429a      	cmp	r2, r3
 8007266:	dc06      	bgt.n	8007276 <_puts_r+0xb6>
 8007268:	290a      	cmp	r1, #10
 800726a:	d004      	beq.n	8007276 <_puts_r+0xb6>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	6022      	str	r2, [r4, #0]
 8007272:	7019      	strb	r1, [r3, #0]
 8007274:	e7c5      	b.n	8007202 <_puts_r+0x42>
 8007276:	4622      	mov	r2, r4
 8007278:	4628      	mov	r0, r5
 800727a:	f000 f817 	bl	80072ac <__swbuf_r>
 800727e:	3001      	adds	r0, #1
 8007280:	d1bf      	bne.n	8007202 <_puts_r+0x42>
 8007282:	e7df      	b.n	8007244 <_puts_r+0x84>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	250a      	movs	r5, #10
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	6022      	str	r2, [r4, #0]
 800728c:	701d      	strb	r5, [r3, #0]
 800728e:	e7db      	b.n	8007248 <_puts_r+0x88>
 8007290:	08009ad0 	.word	0x08009ad0
 8007294:	08009af0 	.word	0x08009af0
 8007298:	08009ab0 	.word	0x08009ab0

0800729c <puts>:
 800729c:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <puts+0xc>)
 800729e:	4601      	mov	r1, r0
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	f7ff bf8d 	b.w	80071c0 <_puts_r>
 80072a6:	bf00      	nop
 80072a8:	2000000c 	.word	0x2000000c

080072ac <__swbuf_r>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	460e      	mov	r6, r1
 80072b0:	4614      	mov	r4, r2
 80072b2:	4605      	mov	r5, r0
 80072b4:	b118      	cbz	r0, 80072be <__swbuf_r+0x12>
 80072b6:	6983      	ldr	r3, [r0, #24]
 80072b8:	b90b      	cbnz	r3, 80072be <__swbuf_r+0x12>
 80072ba:	f000 f9d1 	bl	8007660 <__sinit>
 80072be:	4b21      	ldr	r3, [pc, #132]	; (8007344 <__swbuf_r+0x98>)
 80072c0:	429c      	cmp	r4, r3
 80072c2:	d12b      	bne.n	800731c <__swbuf_r+0x70>
 80072c4:	686c      	ldr	r4, [r5, #4]
 80072c6:	69a3      	ldr	r3, [r4, #24]
 80072c8:	60a3      	str	r3, [r4, #8]
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	071a      	lsls	r2, r3, #28
 80072ce:	d52f      	bpl.n	8007330 <__swbuf_r+0x84>
 80072d0:	6923      	ldr	r3, [r4, #16]
 80072d2:	b36b      	cbz	r3, 8007330 <__swbuf_r+0x84>
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	6820      	ldr	r0, [r4, #0]
 80072d8:	1ac0      	subs	r0, r0, r3
 80072da:	6963      	ldr	r3, [r4, #20]
 80072dc:	b2f6      	uxtb	r6, r6
 80072de:	4283      	cmp	r3, r0
 80072e0:	4637      	mov	r7, r6
 80072e2:	dc04      	bgt.n	80072ee <__swbuf_r+0x42>
 80072e4:	4621      	mov	r1, r4
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 f926 	bl	8007538 <_fflush_r>
 80072ec:	bb30      	cbnz	r0, 800733c <__swbuf_r+0x90>
 80072ee:	68a3      	ldr	r3, [r4, #8]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	60a3      	str	r3, [r4, #8]
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	6022      	str	r2, [r4, #0]
 80072fa:	701e      	strb	r6, [r3, #0]
 80072fc:	6963      	ldr	r3, [r4, #20]
 80072fe:	3001      	adds	r0, #1
 8007300:	4283      	cmp	r3, r0
 8007302:	d004      	beq.n	800730e <__swbuf_r+0x62>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	07db      	lsls	r3, r3, #31
 8007308:	d506      	bpl.n	8007318 <__swbuf_r+0x6c>
 800730a:	2e0a      	cmp	r6, #10
 800730c:	d104      	bne.n	8007318 <__swbuf_r+0x6c>
 800730e:	4621      	mov	r1, r4
 8007310:	4628      	mov	r0, r5
 8007312:	f000 f911 	bl	8007538 <_fflush_r>
 8007316:	b988      	cbnz	r0, 800733c <__swbuf_r+0x90>
 8007318:	4638      	mov	r0, r7
 800731a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800731c:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <__swbuf_r+0x9c>)
 800731e:	429c      	cmp	r4, r3
 8007320:	d101      	bne.n	8007326 <__swbuf_r+0x7a>
 8007322:	68ac      	ldr	r4, [r5, #8]
 8007324:	e7cf      	b.n	80072c6 <__swbuf_r+0x1a>
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <__swbuf_r+0xa0>)
 8007328:	429c      	cmp	r4, r3
 800732a:	bf08      	it	eq
 800732c:	68ec      	ldreq	r4, [r5, #12]
 800732e:	e7ca      	b.n	80072c6 <__swbuf_r+0x1a>
 8007330:	4621      	mov	r1, r4
 8007332:	4628      	mov	r0, r5
 8007334:	f000 f80c 	bl	8007350 <__swsetup_r>
 8007338:	2800      	cmp	r0, #0
 800733a:	d0cb      	beq.n	80072d4 <__swbuf_r+0x28>
 800733c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007340:	e7ea      	b.n	8007318 <__swbuf_r+0x6c>
 8007342:	bf00      	nop
 8007344:	08009ad0 	.word	0x08009ad0
 8007348:	08009af0 	.word	0x08009af0
 800734c:	08009ab0 	.word	0x08009ab0

08007350 <__swsetup_r>:
 8007350:	4b32      	ldr	r3, [pc, #200]	; (800741c <__swsetup_r+0xcc>)
 8007352:	b570      	push	{r4, r5, r6, lr}
 8007354:	681d      	ldr	r5, [r3, #0]
 8007356:	4606      	mov	r6, r0
 8007358:	460c      	mov	r4, r1
 800735a:	b125      	cbz	r5, 8007366 <__swsetup_r+0x16>
 800735c:	69ab      	ldr	r3, [r5, #24]
 800735e:	b913      	cbnz	r3, 8007366 <__swsetup_r+0x16>
 8007360:	4628      	mov	r0, r5
 8007362:	f000 f97d 	bl	8007660 <__sinit>
 8007366:	4b2e      	ldr	r3, [pc, #184]	; (8007420 <__swsetup_r+0xd0>)
 8007368:	429c      	cmp	r4, r3
 800736a:	d10f      	bne.n	800738c <__swsetup_r+0x3c>
 800736c:	686c      	ldr	r4, [r5, #4]
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007374:	0719      	lsls	r1, r3, #28
 8007376:	d42c      	bmi.n	80073d2 <__swsetup_r+0x82>
 8007378:	06dd      	lsls	r5, r3, #27
 800737a:	d411      	bmi.n	80073a0 <__swsetup_r+0x50>
 800737c:	2309      	movs	r3, #9
 800737e:	6033      	str	r3, [r6, #0]
 8007380:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007384:	81a3      	strh	r3, [r4, #12]
 8007386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800738a:	e03e      	b.n	800740a <__swsetup_r+0xba>
 800738c:	4b25      	ldr	r3, [pc, #148]	; (8007424 <__swsetup_r+0xd4>)
 800738e:	429c      	cmp	r4, r3
 8007390:	d101      	bne.n	8007396 <__swsetup_r+0x46>
 8007392:	68ac      	ldr	r4, [r5, #8]
 8007394:	e7eb      	b.n	800736e <__swsetup_r+0x1e>
 8007396:	4b24      	ldr	r3, [pc, #144]	; (8007428 <__swsetup_r+0xd8>)
 8007398:	429c      	cmp	r4, r3
 800739a:	bf08      	it	eq
 800739c:	68ec      	ldreq	r4, [r5, #12]
 800739e:	e7e6      	b.n	800736e <__swsetup_r+0x1e>
 80073a0:	0758      	lsls	r0, r3, #29
 80073a2:	d512      	bpl.n	80073ca <__swsetup_r+0x7a>
 80073a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073a6:	b141      	cbz	r1, 80073ba <__swsetup_r+0x6a>
 80073a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073ac:	4299      	cmp	r1, r3
 80073ae:	d002      	beq.n	80073b6 <__swsetup_r+0x66>
 80073b0:	4630      	mov	r0, r6
 80073b2:	f000 fa59 	bl	8007868 <_free_r>
 80073b6:	2300      	movs	r3, #0
 80073b8:	6363      	str	r3, [r4, #52]	; 0x34
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073c0:	81a3      	strh	r3, [r4, #12]
 80073c2:	2300      	movs	r3, #0
 80073c4:	6063      	str	r3, [r4, #4]
 80073c6:	6923      	ldr	r3, [r4, #16]
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	f043 0308 	orr.w	r3, r3, #8
 80073d0:	81a3      	strh	r3, [r4, #12]
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	b94b      	cbnz	r3, 80073ea <__swsetup_r+0x9a>
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e0:	d003      	beq.n	80073ea <__swsetup_r+0x9a>
 80073e2:	4621      	mov	r1, r4
 80073e4:	4630      	mov	r0, r6
 80073e6:	f000 f9ff 	bl	80077e8 <__smakebuf_r>
 80073ea:	89a0      	ldrh	r0, [r4, #12]
 80073ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f0:	f010 0301 	ands.w	r3, r0, #1
 80073f4:	d00a      	beq.n	800740c <__swsetup_r+0xbc>
 80073f6:	2300      	movs	r3, #0
 80073f8:	60a3      	str	r3, [r4, #8]
 80073fa:	6963      	ldr	r3, [r4, #20]
 80073fc:	425b      	negs	r3, r3
 80073fe:	61a3      	str	r3, [r4, #24]
 8007400:	6923      	ldr	r3, [r4, #16]
 8007402:	b943      	cbnz	r3, 8007416 <__swsetup_r+0xc6>
 8007404:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007408:	d1ba      	bne.n	8007380 <__swsetup_r+0x30>
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	0781      	lsls	r1, r0, #30
 800740e:	bf58      	it	pl
 8007410:	6963      	ldrpl	r3, [r4, #20]
 8007412:	60a3      	str	r3, [r4, #8]
 8007414:	e7f4      	b.n	8007400 <__swsetup_r+0xb0>
 8007416:	2000      	movs	r0, #0
 8007418:	e7f7      	b.n	800740a <__swsetup_r+0xba>
 800741a:	bf00      	nop
 800741c:	2000000c 	.word	0x2000000c
 8007420:	08009ad0 	.word	0x08009ad0
 8007424:	08009af0 	.word	0x08009af0
 8007428:	08009ab0 	.word	0x08009ab0

0800742c <__sflush_r>:
 800742c:	898a      	ldrh	r2, [r1, #12]
 800742e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007432:	4605      	mov	r5, r0
 8007434:	0710      	lsls	r0, r2, #28
 8007436:	460c      	mov	r4, r1
 8007438:	d458      	bmi.n	80074ec <__sflush_r+0xc0>
 800743a:	684b      	ldr	r3, [r1, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	dc05      	bgt.n	800744c <__sflush_r+0x20>
 8007440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	dc02      	bgt.n	800744c <__sflush_r+0x20>
 8007446:	2000      	movs	r0, #0
 8007448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800744c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800744e:	2e00      	cmp	r6, #0
 8007450:	d0f9      	beq.n	8007446 <__sflush_r+0x1a>
 8007452:	2300      	movs	r3, #0
 8007454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007458:	682f      	ldr	r7, [r5, #0]
 800745a:	602b      	str	r3, [r5, #0]
 800745c:	d032      	beq.n	80074c4 <__sflush_r+0x98>
 800745e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	075a      	lsls	r2, r3, #29
 8007464:	d505      	bpl.n	8007472 <__sflush_r+0x46>
 8007466:	6863      	ldr	r3, [r4, #4]
 8007468:	1ac0      	subs	r0, r0, r3
 800746a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800746c:	b10b      	cbz	r3, 8007472 <__sflush_r+0x46>
 800746e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007470:	1ac0      	subs	r0, r0, r3
 8007472:	2300      	movs	r3, #0
 8007474:	4602      	mov	r2, r0
 8007476:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007478:	6a21      	ldr	r1, [r4, #32]
 800747a:	4628      	mov	r0, r5
 800747c:	47b0      	blx	r6
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	d106      	bne.n	8007492 <__sflush_r+0x66>
 8007484:	6829      	ldr	r1, [r5, #0]
 8007486:	291d      	cmp	r1, #29
 8007488:	d82c      	bhi.n	80074e4 <__sflush_r+0xb8>
 800748a:	4a2a      	ldr	r2, [pc, #168]	; (8007534 <__sflush_r+0x108>)
 800748c:	40ca      	lsrs	r2, r1
 800748e:	07d6      	lsls	r6, r2, #31
 8007490:	d528      	bpl.n	80074e4 <__sflush_r+0xb8>
 8007492:	2200      	movs	r2, #0
 8007494:	6062      	str	r2, [r4, #4]
 8007496:	04d9      	lsls	r1, r3, #19
 8007498:	6922      	ldr	r2, [r4, #16]
 800749a:	6022      	str	r2, [r4, #0]
 800749c:	d504      	bpl.n	80074a8 <__sflush_r+0x7c>
 800749e:	1c42      	adds	r2, r0, #1
 80074a0:	d101      	bne.n	80074a6 <__sflush_r+0x7a>
 80074a2:	682b      	ldr	r3, [r5, #0]
 80074a4:	b903      	cbnz	r3, 80074a8 <__sflush_r+0x7c>
 80074a6:	6560      	str	r0, [r4, #84]	; 0x54
 80074a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074aa:	602f      	str	r7, [r5, #0]
 80074ac:	2900      	cmp	r1, #0
 80074ae:	d0ca      	beq.n	8007446 <__sflush_r+0x1a>
 80074b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074b4:	4299      	cmp	r1, r3
 80074b6:	d002      	beq.n	80074be <__sflush_r+0x92>
 80074b8:	4628      	mov	r0, r5
 80074ba:	f000 f9d5 	bl	8007868 <_free_r>
 80074be:	2000      	movs	r0, #0
 80074c0:	6360      	str	r0, [r4, #52]	; 0x34
 80074c2:	e7c1      	b.n	8007448 <__sflush_r+0x1c>
 80074c4:	6a21      	ldr	r1, [r4, #32]
 80074c6:	2301      	movs	r3, #1
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b0      	blx	r6
 80074cc:	1c41      	adds	r1, r0, #1
 80074ce:	d1c7      	bne.n	8007460 <__sflush_r+0x34>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0c4      	beq.n	8007460 <__sflush_r+0x34>
 80074d6:	2b1d      	cmp	r3, #29
 80074d8:	d001      	beq.n	80074de <__sflush_r+0xb2>
 80074da:	2b16      	cmp	r3, #22
 80074dc:	d101      	bne.n	80074e2 <__sflush_r+0xb6>
 80074de:	602f      	str	r7, [r5, #0]
 80074e0:	e7b1      	b.n	8007446 <__sflush_r+0x1a>
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	e7ad      	b.n	8007448 <__sflush_r+0x1c>
 80074ec:	690f      	ldr	r7, [r1, #16]
 80074ee:	2f00      	cmp	r7, #0
 80074f0:	d0a9      	beq.n	8007446 <__sflush_r+0x1a>
 80074f2:	0793      	lsls	r3, r2, #30
 80074f4:	680e      	ldr	r6, [r1, #0]
 80074f6:	bf08      	it	eq
 80074f8:	694b      	ldreq	r3, [r1, #20]
 80074fa:	600f      	str	r7, [r1, #0]
 80074fc:	bf18      	it	ne
 80074fe:	2300      	movne	r3, #0
 8007500:	eba6 0807 	sub.w	r8, r6, r7
 8007504:	608b      	str	r3, [r1, #8]
 8007506:	f1b8 0f00 	cmp.w	r8, #0
 800750a:	dd9c      	ble.n	8007446 <__sflush_r+0x1a>
 800750c:	6a21      	ldr	r1, [r4, #32]
 800750e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007510:	4643      	mov	r3, r8
 8007512:	463a      	mov	r2, r7
 8007514:	4628      	mov	r0, r5
 8007516:	47b0      	blx	r6
 8007518:	2800      	cmp	r0, #0
 800751a:	dc06      	bgt.n	800752a <__sflush_r+0xfe>
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007522:	81a3      	strh	r3, [r4, #12]
 8007524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007528:	e78e      	b.n	8007448 <__sflush_r+0x1c>
 800752a:	4407      	add	r7, r0
 800752c:	eba8 0800 	sub.w	r8, r8, r0
 8007530:	e7e9      	b.n	8007506 <__sflush_r+0xda>
 8007532:	bf00      	nop
 8007534:	20400001 	.word	0x20400001

08007538 <_fflush_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	690b      	ldr	r3, [r1, #16]
 800753c:	4605      	mov	r5, r0
 800753e:	460c      	mov	r4, r1
 8007540:	b913      	cbnz	r3, 8007548 <_fflush_r+0x10>
 8007542:	2500      	movs	r5, #0
 8007544:	4628      	mov	r0, r5
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	b118      	cbz	r0, 8007552 <_fflush_r+0x1a>
 800754a:	6983      	ldr	r3, [r0, #24]
 800754c:	b90b      	cbnz	r3, 8007552 <_fflush_r+0x1a>
 800754e:	f000 f887 	bl	8007660 <__sinit>
 8007552:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <_fflush_r+0x6c>)
 8007554:	429c      	cmp	r4, r3
 8007556:	d11b      	bne.n	8007590 <_fflush_r+0x58>
 8007558:	686c      	ldr	r4, [r5, #4]
 800755a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0ef      	beq.n	8007542 <_fflush_r+0xa>
 8007562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007564:	07d0      	lsls	r0, r2, #31
 8007566:	d404      	bmi.n	8007572 <_fflush_r+0x3a>
 8007568:	0599      	lsls	r1, r3, #22
 800756a:	d402      	bmi.n	8007572 <_fflush_r+0x3a>
 800756c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756e:	f000 f915 	bl	800779c <__retarget_lock_acquire_recursive>
 8007572:	4628      	mov	r0, r5
 8007574:	4621      	mov	r1, r4
 8007576:	f7ff ff59 	bl	800742c <__sflush_r>
 800757a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800757c:	07da      	lsls	r2, r3, #31
 800757e:	4605      	mov	r5, r0
 8007580:	d4e0      	bmi.n	8007544 <_fflush_r+0xc>
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	059b      	lsls	r3, r3, #22
 8007586:	d4dd      	bmi.n	8007544 <_fflush_r+0xc>
 8007588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800758a:	f000 f908 	bl	800779e <__retarget_lock_release_recursive>
 800758e:	e7d9      	b.n	8007544 <_fflush_r+0xc>
 8007590:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <_fflush_r+0x70>)
 8007592:	429c      	cmp	r4, r3
 8007594:	d101      	bne.n	800759a <_fflush_r+0x62>
 8007596:	68ac      	ldr	r4, [r5, #8]
 8007598:	e7df      	b.n	800755a <_fflush_r+0x22>
 800759a:	4b04      	ldr	r3, [pc, #16]	; (80075ac <_fflush_r+0x74>)
 800759c:	429c      	cmp	r4, r3
 800759e:	bf08      	it	eq
 80075a0:	68ec      	ldreq	r4, [r5, #12]
 80075a2:	e7da      	b.n	800755a <_fflush_r+0x22>
 80075a4:	08009ad0 	.word	0x08009ad0
 80075a8:	08009af0 	.word	0x08009af0
 80075ac:	08009ab0 	.word	0x08009ab0

080075b0 <std>:
 80075b0:	2300      	movs	r3, #0
 80075b2:	b510      	push	{r4, lr}
 80075b4:	4604      	mov	r4, r0
 80075b6:	e9c0 3300 	strd	r3, r3, [r0]
 80075ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075be:	6083      	str	r3, [r0, #8]
 80075c0:	8181      	strh	r1, [r0, #12]
 80075c2:	6643      	str	r3, [r0, #100]	; 0x64
 80075c4:	81c2      	strh	r2, [r0, #14]
 80075c6:	6183      	str	r3, [r0, #24]
 80075c8:	4619      	mov	r1, r3
 80075ca:	2208      	movs	r2, #8
 80075cc:	305c      	adds	r0, #92	; 0x5c
 80075ce:	f7ff fdd7 	bl	8007180 <memset>
 80075d2:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <std+0x38>)
 80075d4:	6263      	str	r3, [r4, #36]	; 0x24
 80075d6:	4b05      	ldr	r3, [pc, #20]	; (80075ec <std+0x3c>)
 80075d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <std+0x40>)
 80075dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075de:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <std+0x44>)
 80075e0:	6224      	str	r4, [r4, #32]
 80075e2:	6323      	str	r3, [r4, #48]	; 0x30
 80075e4:	bd10      	pop	{r4, pc}
 80075e6:	bf00      	nop
 80075e8:	08007fb9 	.word	0x08007fb9
 80075ec:	08007fdb 	.word	0x08007fdb
 80075f0:	08008013 	.word	0x08008013
 80075f4:	08008037 	.word	0x08008037

080075f8 <_cleanup_r>:
 80075f8:	4901      	ldr	r1, [pc, #4]	; (8007600 <_cleanup_r+0x8>)
 80075fa:	f000 b8af 	b.w	800775c <_fwalk_reent>
 80075fe:	bf00      	nop
 8007600:	08007539 	.word	0x08007539

08007604 <__sfmoreglue>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	1e4a      	subs	r2, r1, #1
 8007608:	2568      	movs	r5, #104	; 0x68
 800760a:	4355      	muls	r5, r2
 800760c:	460e      	mov	r6, r1
 800760e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007612:	f000 f979 	bl	8007908 <_malloc_r>
 8007616:	4604      	mov	r4, r0
 8007618:	b140      	cbz	r0, 800762c <__sfmoreglue+0x28>
 800761a:	2100      	movs	r1, #0
 800761c:	e9c0 1600 	strd	r1, r6, [r0]
 8007620:	300c      	adds	r0, #12
 8007622:	60a0      	str	r0, [r4, #8]
 8007624:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007628:	f7ff fdaa 	bl	8007180 <memset>
 800762c:	4620      	mov	r0, r4
 800762e:	bd70      	pop	{r4, r5, r6, pc}

08007630 <__sfp_lock_acquire>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__sfp_lock_acquire+0x8>)
 8007632:	f000 b8b3 	b.w	800779c <__retarget_lock_acquire_recursive>
 8007636:	bf00      	nop
 8007638:	20000528 	.word	0x20000528

0800763c <__sfp_lock_release>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__sfp_lock_release+0x8>)
 800763e:	f000 b8ae 	b.w	800779e <__retarget_lock_release_recursive>
 8007642:	bf00      	nop
 8007644:	20000528 	.word	0x20000528

08007648 <__sinit_lock_acquire>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__sinit_lock_acquire+0x8>)
 800764a:	f000 b8a7 	b.w	800779c <__retarget_lock_acquire_recursive>
 800764e:	bf00      	nop
 8007650:	20000523 	.word	0x20000523

08007654 <__sinit_lock_release>:
 8007654:	4801      	ldr	r0, [pc, #4]	; (800765c <__sinit_lock_release+0x8>)
 8007656:	f000 b8a2 	b.w	800779e <__retarget_lock_release_recursive>
 800765a:	bf00      	nop
 800765c:	20000523 	.word	0x20000523

08007660 <__sinit>:
 8007660:	b510      	push	{r4, lr}
 8007662:	4604      	mov	r4, r0
 8007664:	f7ff fff0 	bl	8007648 <__sinit_lock_acquire>
 8007668:	69a3      	ldr	r3, [r4, #24]
 800766a:	b11b      	cbz	r3, 8007674 <__sinit+0x14>
 800766c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007670:	f7ff bff0 	b.w	8007654 <__sinit_lock_release>
 8007674:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007678:	6523      	str	r3, [r4, #80]	; 0x50
 800767a:	4b13      	ldr	r3, [pc, #76]	; (80076c8 <__sinit+0x68>)
 800767c:	4a13      	ldr	r2, [pc, #76]	; (80076cc <__sinit+0x6c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	62a2      	str	r2, [r4, #40]	; 0x28
 8007682:	42a3      	cmp	r3, r4
 8007684:	bf04      	itt	eq
 8007686:	2301      	moveq	r3, #1
 8007688:	61a3      	streq	r3, [r4, #24]
 800768a:	4620      	mov	r0, r4
 800768c:	f000 f820 	bl	80076d0 <__sfp>
 8007690:	6060      	str	r0, [r4, #4]
 8007692:	4620      	mov	r0, r4
 8007694:	f000 f81c 	bl	80076d0 <__sfp>
 8007698:	60a0      	str	r0, [r4, #8]
 800769a:	4620      	mov	r0, r4
 800769c:	f000 f818 	bl	80076d0 <__sfp>
 80076a0:	2200      	movs	r2, #0
 80076a2:	60e0      	str	r0, [r4, #12]
 80076a4:	2104      	movs	r1, #4
 80076a6:	6860      	ldr	r0, [r4, #4]
 80076a8:	f7ff ff82 	bl	80075b0 <std>
 80076ac:	68a0      	ldr	r0, [r4, #8]
 80076ae:	2201      	movs	r2, #1
 80076b0:	2109      	movs	r1, #9
 80076b2:	f7ff ff7d 	bl	80075b0 <std>
 80076b6:	68e0      	ldr	r0, [r4, #12]
 80076b8:	2202      	movs	r2, #2
 80076ba:	2112      	movs	r1, #18
 80076bc:	f7ff ff78 	bl	80075b0 <std>
 80076c0:	2301      	movs	r3, #1
 80076c2:	61a3      	str	r3, [r4, #24]
 80076c4:	e7d2      	b.n	800766c <__sinit+0xc>
 80076c6:	bf00      	nop
 80076c8:	08009aac 	.word	0x08009aac
 80076cc:	080075f9 	.word	0x080075f9

080076d0 <__sfp>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	4607      	mov	r7, r0
 80076d4:	f7ff ffac 	bl	8007630 <__sfp_lock_acquire>
 80076d8:	4b1e      	ldr	r3, [pc, #120]	; (8007754 <__sfp+0x84>)
 80076da:	681e      	ldr	r6, [r3, #0]
 80076dc:	69b3      	ldr	r3, [r6, #24]
 80076de:	b913      	cbnz	r3, 80076e6 <__sfp+0x16>
 80076e0:	4630      	mov	r0, r6
 80076e2:	f7ff ffbd 	bl	8007660 <__sinit>
 80076e6:	3648      	adds	r6, #72	; 0x48
 80076e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	d503      	bpl.n	80076f8 <__sfp+0x28>
 80076f0:	6833      	ldr	r3, [r6, #0]
 80076f2:	b30b      	cbz	r3, 8007738 <__sfp+0x68>
 80076f4:	6836      	ldr	r6, [r6, #0]
 80076f6:	e7f7      	b.n	80076e8 <__sfp+0x18>
 80076f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076fc:	b9d5      	cbnz	r5, 8007734 <__sfp+0x64>
 80076fe:	4b16      	ldr	r3, [pc, #88]	; (8007758 <__sfp+0x88>)
 8007700:	60e3      	str	r3, [r4, #12]
 8007702:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007706:	6665      	str	r5, [r4, #100]	; 0x64
 8007708:	f000 f847 	bl	800779a <__retarget_lock_init_recursive>
 800770c:	f7ff ff96 	bl	800763c <__sfp_lock_release>
 8007710:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007714:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007718:	6025      	str	r5, [r4, #0]
 800771a:	61a5      	str	r5, [r4, #24]
 800771c:	2208      	movs	r2, #8
 800771e:	4629      	mov	r1, r5
 8007720:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007724:	f7ff fd2c 	bl	8007180 <memset>
 8007728:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800772c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007730:	4620      	mov	r0, r4
 8007732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007734:	3468      	adds	r4, #104	; 0x68
 8007736:	e7d9      	b.n	80076ec <__sfp+0x1c>
 8007738:	2104      	movs	r1, #4
 800773a:	4638      	mov	r0, r7
 800773c:	f7ff ff62 	bl	8007604 <__sfmoreglue>
 8007740:	4604      	mov	r4, r0
 8007742:	6030      	str	r0, [r6, #0]
 8007744:	2800      	cmp	r0, #0
 8007746:	d1d5      	bne.n	80076f4 <__sfp+0x24>
 8007748:	f7ff ff78 	bl	800763c <__sfp_lock_release>
 800774c:	230c      	movs	r3, #12
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	e7ee      	b.n	8007730 <__sfp+0x60>
 8007752:	bf00      	nop
 8007754:	08009aac 	.word	0x08009aac
 8007758:	ffff0001 	.word	0xffff0001

0800775c <_fwalk_reent>:
 800775c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007760:	4606      	mov	r6, r0
 8007762:	4688      	mov	r8, r1
 8007764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007768:	2700      	movs	r7, #0
 800776a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800776e:	f1b9 0901 	subs.w	r9, r9, #1
 8007772:	d505      	bpl.n	8007780 <_fwalk_reent+0x24>
 8007774:	6824      	ldr	r4, [r4, #0]
 8007776:	2c00      	cmp	r4, #0
 8007778:	d1f7      	bne.n	800776a <_fwalk_reent+0xe>
 800777a:	4638      	mov	r0, r7
 800777c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007780:	89ab      	ldrh	r3, [r5, #12]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d907      	bls.n	8007796 <_fwalk_reent+0x3a>
 8007786:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800778a:	3301      	adds	r3, #1
 800778c:	d003      	beq.n	8007796 <_fwalk_reent+0x3a>
 800778e:	4629      	mov	r1, r5
 8007790:	4630      	mov	r0, r6
 8007792:	47c0      	blx	r8
 8007794:	4307      	orrs	r7, r0
 8007796:	3568      	adds	r5, #104	; 0x68
 8007798:	e7e9      	b.n	800776e <_fwalk_reent+0x12>

0800779a <__retarget_lock_init_recursive>:
 800779a:	4770      	bx	lr

0800779c <__retarget_lock_acquire_recursive>:
 800779c:	4770      	bx	lr

0800779e <__retarget_lock_release_recursive>:
 800779e:	4770      	bx	lr

080077a0 <__swhatbuf_r>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	460e      	mov	r6, r1
 80077a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a8:	2900      	cmp	r1, #0
 80077aa:	b096      	sub	sp, #88	; 0x58
 80077ac:	4614      	mov	r4, r2
 80077ae:	461d      	mov	r5, r3
 80077b0:	da07      	bge.n	80077c2 <__swhatbuf_r+0x22>
 80077b2:	2300      	movs	r3, #0
 80077b4:	602b      	str	r3, [r5, #0]
 80077b6:	89b3      	ldrh	r3, [r6, #12]
 80077b8:	061a      	lsls	r2, r3, #24
 80077ba:	d410      	bmi.n	80077de <__swhatbuf_r+0x3e>
 80077bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c0:	e00e      	b.n	80077e0 <__swhatbuf_r+0x40>
 80077c2:	466a      	mov	r2, sp
 80077c4:	f000 fc5e 	bl	8008084 <_fstat_r>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	dbf2      	blt.n	80077b2 <__swhatbuf_r+0x12>
 80077cc:	9a01      	ldr	r2, [sp, #4]
 80077ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077d6:	425a      	negs	r2, r3
 80077d8:	415a      	adcs	r2, r3
 80077da:	602a      	str	r2, [r5, #0]
 80077dc:	e7ee      	b.n	80077bc <__swhatbuf_r+0x1c>
 80077de:	2340      	movs	r3, #64	; 0x40
 80077e0:	2000      	movs	r0, #0
 80077e2:	6023      	str	r3, [r4, #0]
 80077e4:	b016      	add	sp, #88	; 0x58
 80077e6:	bd70      	pop	{r4, r5, r6, pc}

080077e8 <__smakebuf_r>:
 80077e8:	898b      	ldrh	r3, [r1, #12]
 80077ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077ec:	079d      	lsls	r5, r3, #30
 80077ee:	4606      	mov	r6, r0
 80077f0:	460c      	mov	r4, r1
 80077f2:	d507      	bpl.n	8007804 <__smakebuf_r+0x1c>
 80077f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	6123      	str	r3, [r4, #16]
 80077fc:	2301      	movs	r3, #1
 80077fe:	6163      	str	r3, [r4, #20]
 8007800:	b002      	add	sp, #8
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	ab01      	add	r3, sp, #4
 8007806:	466a      	mov	r2, sp
 8007808:	f7ff ffca 	bl	80077a0 <__swhatbuf_r>
 800780c:	9900      	ldr	r1, [sp, #0]
 800780e:	4605      	mov	r5, r0
 8007810:	4630      	mov	r0, r6
 8007812:	f000 f879 	bl	8007908 <_malloc_r>
 8007816:	b948      	cbnz	r0, 800782c <__smakebuf_r+0x44>
 8007818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800781c:	059a      	lsls	r2, r3, #22
 800781e:	d4ef      	bmi.n	8007800 <__smakebuf_r+0x18>
 8007820:	f023 0303 	bic.w	r3, r3, #3
 8007824:	f043 0302 	orr.w	r3, r3, #2
 8007828:	81a3      	strh	r3, [r4, #12]
 800782a:	e7e3      	b.n	80077f4 <__smakebuf_r+0xc>
 800782c:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <__smakebuf_r+0x7c>)
 800782e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	6020      	str	r0, [r4, #0]
 8007834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007838:	81a3      	strh	r3, [r4, #12]
 800783a:	9b00      	ldr	r3, [sp, #0]
 800783c:	6163      	str	r3, [r4, #20]
 800783e:	9b01      	ldr	r3, [sp, #4]
 8007840:	6120      	str	r0, [r4, #16]
 8007842:	b15b      	cbz	r3, 800785c <__smakebuf_r+0x74>
 8007844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007848:	4630      	mov	r0, r6
 800784a:	f000 fc2d 	bl	80080a8 <_isatty_r>
 800784e:	b128      	cbz	r0, 800785c <__smakebuf_r+0x74>
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	f023 0303 	bic.w	r3, r3, #3
 8007856:	f043 0301 	orr.w	r3, r3, #1
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	89a0      	ldrh	r0, [r4, #12]
 800785e:	4305      	orrs	r5, r0
 8007860:	81a5      	strh	r5, [r4, #12]
 8007862:	e7cd      	b.n	8007800 <__smakebuf_r+0x18>
 8007864:	080075f9 	.word	0x080075f9

08007868 <_free_r>:
 8007868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800786a:	2900      	cmp	r1, #0
 800786c:	d048      	beq.n	8007900 <_free_r+0x98>
 800786e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007872:	9001      	str	r0, [sp, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	f1a1 0404 	sub.w	r4, r1, #4
 800787a:	bfb8      	it	lt
 800787c:	18e4      	addlt	r4, r4, r3
 800787e:	f000 fc35 	bl	80080ec <__malloc_lock>
 8007882:	4a20      	ldr	r2, [pc, #128]	; (8007904 <_free_r+0x9c>)
 8007884:	9801      	ldr	r0, [sp, #4]
 8007886:	6813      	ldr	r3, [r2, #0]
 8007888:	4615      	mov	r5, r2
 800788a:	b933      	cbnz	r3, 800789a <_free_r+0x32>
 800788c:	6063      	str	r3, [r4, #4]
 800788e:	6014      	str	r4, [r2, #0]
 8007890:	b003      	add	sp, #12
 8007892:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007896:	f000 bc2f 	b.w	80080f8 <__malloc_unlock>
 800789a:	42a3      	cmp	r3, r4
 800789c:	d90b      	bls.n	80078b6 <_free_r+0x4e>
 800789e:	6821      	ldr	r1, [r4, #0]
 80078a0:	1862      	adds	r2, r4, r1
 80078a2:	4293      	cmp	r3, r2
 80078a4:	bf04      	itt	eq
 80078a6:	681a      	ldreq	r2, [r3, #0]
 80078a8:	685b      	ldreq	r3, [r3, #4]
 80078aa:	6063      	str	r3, [r4, #4]
 80078ac:	bf04      	itt	eq
 80078ae:	1852      	addeq	r2, r2, r1
 80078b0:	6022      	streq	r2, [r4, #0]
 80078b2:	602c      	str	r4, [r5, #0]
 80078b4:	e7ec      	b.n	8007890 <_free_r+0x28>
 80078b6:	461a      	mov	r2, r3
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	b10b      	cbz	r3, 80078c0 <_free_r+0x58>
 80078bc:	42a3      	cmp	r3, r4
 80078be:	d9fa      	bls.n	80078b6 <_free_r+0x4e>
 80078c0:	6811      	ldr	r1, [r2, #0]
 80078c2:	1855      	adds	r5, r2, r1
 80078c4:	42a5      	cmp	r5, r4
 80078c6:	d10b      	bne.n	80078e0 <_free_r+0x78>
 80078c8:	6824      	ldr	r4, [r4, #0]
 80078ca:	4421      	add	r1, r4
 80078cc:	1854      	adds	r4, r2, r1
 80078ce:	42a3      	cmp	r3, r4
 80078d0:	6011      	str	r1, [r2, #0]
 80078d2:	d1dd      	bne.n	8007890 <_free_r+0x28>
 80078d4:	681c      	ldr	r4, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	6053      	str	r3, [r2, #4]
 80078da:	4421      	add	r1, r4
 80078dc:	6011      	str	r1, [r2, #0]
 80078de:	e7d7      	b.n	8007890 <_free_r+0x28>
 80078e0:	d902      	bls.n	80078e8 <_free_r+0x80>
 80078e2:	230c      	movs	r3, #12
 80078e4:	6003      	str	r3, [r0, #0]
 80078e6:	e7d3      	b.n	8007890 <_free_r+0x28>
 80078e8:	6825      	ldr	r5, [r4, #0]
 80078ea:	1961      	adds	r1, r4, r5
 80078ec:	428b      	cmp	r3, r1
 80078ee:	bf04      	itt	eq
 80078f0:	6819      	ldreq	r1, [r3, #0]
 80078f2:	685b      	ldreq	r3, [r3, #4]
 80078f4:	6063      	str	r3, [r4, #4]
 80078f6:	bf04      	itt	eq
 80078f8:	1949      	addeq	r1, r1, r5
 80078fa:	6021      	streq	r1, [r4, #0]
 80078fc:	6054      	str	r4, [r2, #4]
 80078fe:	e7c7      	b.n	8007890 <_free_r+0x28>
 8007900:	b003      	add	sp, #12
 8007902:	bd30      	pop	{r4, r5, pc}
 8007904:	20000274 	.word	0x20000274

08007908 <_malloc_r>:
 8007908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790a:	1ccd      	adds	r5, r1, #3
 800790c:	f025 0503 	bic.w	r5, r5, #3
 8007910:	3508      	adds	r5, #8
 8007912:	2d0c      	cmp	r5, #12
 8007914:	bf38      	it	cc
 8007916:	250c      	movcc	r5, #12
 8007918:	2d00      	cmp	r5, #0
 800791a:	4606      	mov	r6, r0
 800791c:	db01      	blt.n	8007922 <_malloc_r+0x1a>
 800791e:	42a9      	cmp	r1, r5
 8007920:	d903      	bls.n	800792a <_malloc_r+0x22>
 8007922:	230c      	movs	r3, #12
 8007924:	6033      	str	r3, [r6, #0]
 8007926:	2000      	movs	r0, #0
 8007928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800792a:	f000 fbdf 	bl	80080ec <__malloc_lock>
 800792e:	4921      	ldr	r1, [pc, #132]	; (80079b4 <_malloc_r+0xac>)
 8007930:	680a      	ldr	r2, [r1, #0]
 8007932:	4614      	mov	r4, r2
 8007934:	b99c      	cbnz	r4, 800795e <_malloc_r+0x56>
 8007936:	4f20      	ldr	r7, [pc, #128]	; (80079b8 <_malloc_r+0xb0>)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	b923      	cbnz	r3, 8007946 <_malloc_r+0x3e>
 800793c:	4621      	mov	r1, r4
 800793e:	4630      	mov	r0, r6
 8007940:	f000 fb2a 	bl	8007f98 <_sbrk_r>
 8007944:	6038      	str	r0, [r7, #0]
 8007946:	4629      	mov	r1, r5
 8007948:	4630      	mov	r0, r6
 800794a:	f000 fb25 	bl	8007f98 <_sbrk_r>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	d123      	bne.n	800799a <_malloc_r+0x92>
 8007952:	230c      	movs	r3, #12
 8007954:	6033      	str	r3, [r6, #0]
 8007956:	4630      	mov	r0, r6
 8007958:	f000 fbce 	bl	80080f8 <__malloc_unlock>
 800795c:	e7e3      	b.n	8007926 <_malloc_r+0x1e>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	1b5b      	subs	r3, r3, r5
 8007962:	d417      	bmi.n	8007994 <_malloc_r+0x8c>
 8007964:	2b0b      	cmp	r3, #11
 8007966:	d903      	bls.n	8007970 <_malloc_r+0x68>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	441c      	add	r4, r3
 800796c:	6025      	str	r5, [r4, #0]
 800796e:	e004      	b.n	800797a <_malloc_r+0x72>
 8007970:	6863      	ldr	r3, [r4, #4]
 8007972:	42a2      	cmp	r2, r4
 8007974:	bf0c      	ite	eq
 8007976:	600b      	streq	r3, [r1, #0]
 8007978:	6053      	strne	r3, [r2, #4]
 800797a:	4630      	mov	r0, r6
 800797c:	f000 fbbc 	bl	80080f8 <__malloc_unlock>
 8007980:	f104 000b 	add.w	r0, r4, #11
 8007984:	1d23      	adds	r3, r4, #4
 8007986:	f020 0007 	bic.w	r0, r0, #7
 800798a:	1ac2      	subs	r2, r0, r3
 800798c:	d0cc      	beq.n	8007928 <_malloc_r+0x20>
 800798e:	1a1b      	subs	r3, r3, r0
 8007990:	50a3      	str	r3, [r4, r2]
 8007992:	e7c9      	b.n	8007928 <_malloc_r+0x20>
 8007994:	4622      	mov	r2, r4
 8007996:	6864      	ldr	r4, [r4, #4]
 8007998:	e7cc      	b.n	8007934 <_malloc_r+0x2c>
 800799a:	1cc4      	adds	r4, r0, #3
 800799c:	f024 0403 	bic.w	r4, r4, #3
 80079a0:	42a0      	cmp	r0, r4
 80079a2:	d0e3      	beq.n	800796c <_malloc_r+0x64>
 80079a4:	1a21      	subs	r1, r4, r0
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 faf6 	bl	8007f98 <_sbrk_r>
 80079ac:	3001      	adds	r0, #1
 80079ae:	d1dd      	bne.n	800796c <_malloc_r+0x64>
 80079b0:	e7cf      	b.n	8007952 <_malloc_r+0x4a>
 80079b2:	bf00      	nop
 80079b4:	20000274 	.word	0x20000274
 80079b8:	20000278 	.word	0x20000278

080079bc <__sfputc_r>:
 80079bc:	6893      	ldr	r3, [r2, #8]
 80079be:	3b01      	subs	r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	b410      	push	{r4}
 80079c4:	6093      	str	r3, [r2, #8]
 80079c6:	da08      	bge.n	80079da <__sfputc_r+0x1e>
 80079c8:	6994      	ldr	r4, [r2, #24]
 80079ca:	42a3      	cmp	r3, r4
 80079cc:	db01      	blt.n	80079d2 <__sfputc_r+0x16>
 80079ce:	290a      	cmp	r1, #10
 80079d0:	d103      	bne.n	80079da <__sfputc_r+0x1e>
 80079d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079d6:	f7ff bc69 	b.w	80072ac <__swbuf_r>
 80079da:	6813      	ldr	r3, [r2, #0]
 80079dc:	1c58      	adds	r0, r3, #1
 80079de:	6010      	str	r0, [r2, #0]
 80079e0:	7019      	strb	r1, [r3, #0]
 80079e2:	4608      	mov	r0, r1
 80079e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <__sfputs_r>:
 80079ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ec:	4606      	mov	r6, r0
 80079ee:	460f      	mov	r7, r1
 80079f0:	4614      	mov	r4, r2
 80079f2:	18d5      	adds	r5, r2, r3
 80079f4:	42ac      	cmp	r4, r5
 80079f6:	d101      	bne.n	80079fc <__sfputs_r+0x12>
 80079f8:	2000      	movs	r0, #0
 80079fa:	e007      	b.n	8007a0c <__sfputs_r+0x22>
 80079fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a00:	463a      	mov	r2, r7
 8007a02:	4630      	mov	r0, r6
 8007a04:	f7ff ffda 	bl	80079bc <__sfputc_r>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d1f3      	bne.n	80079f4 <__sfputs_r+0xa>
 8007a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a10 <_vfiprintf_r>:
 8007a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	460d      	mov	r5, r1
 8007a16:	b09d      	sub	sp, #116	; 0x74
 8007a18:	4614      	mov	r4, r2
 8007a1a:	4698      	mov	r8, r3
 8007a1c:	4606      	mov	r6, r0
 8007a1e:	b118      	cbz	r0, 8007a28 <_vfiprintf_r+0x18>
 8007a20:	6983      	ldr	r3, [r0, #24]
 8007a22:	b90b      	cbnz	r3, 8007a28 <_vfiprintf_r+0x18>
 8007a24:	f7ff fe1c 	bl	8007660 <__sinit>
 8007a28:	4b89      	ldr	r3, [pc, #548]	; (8007c50 <_vfiprintf_r+0x240>)
 8007a2a:	429d      	cmp	r5, r3
 8007a2c:	d11b      	bne.n	8007a66 <_vfiprintf_r+0x56>
 8007a2e:	6875      	ldr	r5, [r6, #4]
 8007a30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a32:	07d9      	lsls	r1, r3, #31
 8007a34:	d405      	bmi.n	8007a42 <_vfiprintf_r+0x32>
 8007a36:	89ab      	ldrh	r3, [r5, #12]
 8007a38:	059a      	lsls	r2, r3, #22
 8007a3a:	d402      	bmi.n	8007a42 <_vfiprintf_r+0x32>
 8007a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a3e:	f7ff fead 	bl	800779c <__retarget_lock_acquire_recursive>
 8007a42:	89ab      	ldrh	r3, [r5, #12]
 8007a44:	071b      	lsls	r3, r3, #28
 8007a46:	d501      	bpl.n	8007a4c <_vfiprintf_r+0x3c>
 8007a48:	692b      	ldr	r3, [r5, #16]
 8007a4a:	b9eb      	cbnz	r3, 8007a88 <_vfiprintf_r+0x78>
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f7ff fc7e 	bl	8007350 <__swsetup_r>
 8007a54:	b1c0      	cbz	r0, 8007a88 <_vfiprintf_r+0x78>
 8007a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a58:	07dc      	lsls	r4, r3, #31
 8007a5a:	d50e      	bpl.n	8007a7a <_vfiprintf_r+0x6a>
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a60:	b01d      	add	sp, #116	; 0x74
 8007a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a66:	4b7b      	ldr	r3, [pc, #492]	; (8007c54 <_vfiprintf_r+0x244>)
 8007a68:	429d      	cmp	r5, r3
 8007a6a:	d101      	bne.n	8007a70 <_vfiprintf_r+0x60>
 8007a6c:	68b5      	ldr	r5, [r6, #8]
 8007a6e:	e7df      	b.n	8007a30 <_vfiprintf_r+0x20>
 8007a70:	4b79      	ldr	r3, [pc, #484]	; (8007c58 <_vfiprintf_r+0x248>)
 8007a72:	429d      	cmp	r5, r3
 8007a74:	bf08      	it	eq
 8007a76:	68f5      	ldreq	r5, [r6, #12]
 8007a78:	e7da      	b.n	8007a30 <_vfiprintf_r+0x20>
 8007a7a:	89ab      	ldrh	r3, [r5, #12]
 8007a7c:	0598      	lsls	r0, r3, #22
 8007a7e:	d4ed      	bmi.n	8007a5c <_vfiprintf_r+0x4c>
 8007a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a82:	f7ff fe8c 	bl	800779e <__retarget_lock_release_recursive>
 8007a86:	e7e9      	b.n	8007a5c <_vfiprintf_r+0x4c>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a8c:	2320      	movs	r3, #32
 8007a8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a96:	2330      	movs	r3, #48	; 0x30
 8007a98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c5c <_vfiprintf_r+0x24c>
 8007a9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aa0:	f04f 0901 	mov.w	r9, #1
 8007aa4:	4623      	mov	r3, r4
 8007aa6:	469a      	mov	sl, r3
 8007aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aac:	b10a      	cbz	r2, 8007ab2 <_vfiprintf_r+0xa2>
 8007aae:	2a25      	cmp	r2, #37	; 0x25
 8007ab0:	d1f9      	bne.n	8007aa6 <_vfiprintf_r+0x96>
 8007ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ab6:	d00b      	beq.n	8007ad0 <_vfiprintf_r+0xc0>
 8007ab8:	465b      	mov	r3, fp
 8007aba:	4622      	mov	r2, r4
 8007abc:	4629      	mov	r1, r5
 8007abe:	4630      	mov	r0, r6
 8007ac0:	f7ff ff93 	bl	80079ea <__sfputs_r>
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	f000 80aa 	beq.w	8007c1e <_vfiprintf_r+0x20e>
 8007aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007acc:	445a      	add	r2, fp
 8007ace:	9209      	str	r2, [sp, #36]	; 0x24
 8007ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 80a2 	beq.w	8007c1e <_vfiprintf_r+0x20e>
 8007ada:	2300      	movs	r3, #0
 8007adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ae4:	f10a 0a01 	add.w	sl, sl, #1
 8007ae8:	9304      	str	r3, [sp, #16]
 8007aea:	9307      	str	r3, [sp, #28]
 8007aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007af0:	931a      	str	r3, [sp, #104]	; 0x68
 8007af2:	4654      	mov	r4, sl
 8007af4:	2205      	movs	r2, #5
 8007af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007afa:	4858      	ldr	r0, [pc, #352]	; (8007c5c <_vfiprintf_r+0x24c>)
 8007afc:	f7f8 fb68 	bl	80001d0 <memchr>
 8007b00:	9a04      	ldr	r2, [sp, #16]
 8007b02:	b9d8      	cbnz	r0, 8007b3c <_vfiprintf_r+0x12c>
 8007b04:	06d1      	lsls	r1, r2, #27
 8007b06:	bf44      	itt	mi
 8007b08:	2320      	movmi	r3, #32
 8007b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b0e:	0713      	lsls	r3, r2, #28
 8007b10:	bf44      	itt	mi
 8007b12:	232b      	movmi	r3, #43	; 0x2b
 8007b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b18:	f89a 3000 	ldrb.w	r3, [sl]
 8007b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b1e:	d015      	beq.n	8007b4c <_vfiprintf_r+0x13c>
 8007b20:	9a07      	ldr	r2, [sp, #28]
 8007b22:	4654      	mov	r4, sl
 8007b24:	2000      	movs	r0, #0
 8007b26:	f04f 0c0a 	mov.w	ip, #10
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b30:	3b30      	subs	r3, #48	; 0x30
 8007b32:	2b09      	cmp	r3, #9
 8007b34:	d94e      	bls.n	8007bd4 <_vfiprintf_r+0x1c4>
 8007b36:	b1b0      	cbz	r0, 8007b66 <_vfiprintf_r+0x156>
 8007b38:	9207      	str	r2, [sp, #28]
 8007b3a:	e014      	b.n	8007b66 <_vfiprintf_r+0x156>
 8007b3c:	eba0 0308 	sub.w	r3, r0, r8
 8007b40:	fa09 f303 	lsl.w	r3, r9, r3
 8007b44:	4313      	orrs	r3, r2
 8007b46:	9304      	str	r3, [sp, #16]
 8007b48:	46a2      	mov	sl, r4
 8007b4a:	e7d2      	b.n	8007af2 <_vfiprintf_r+0xe2>
 8007b4c:	9b03      	ldr	r3, [sp, #12]
 8007b4e:	1d19      	adds	r1, r3, #4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	9103      	str	r1, [sp, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bfbb      	ittet	lt
 8007b58:	425b      	neglt	r3, r3
 8007b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8007b5e:	9307      	strge	r3, [sp, #28]
 8007b60:	9307      	strlt	r3, [sp, #28]
 8007b62:	bfb8      	it	lt
 8007b64:	9204      	strlt	r2, [sp, #16]
 8007b66:	7823      	ldrb	r3, [r4, #0]
 8007b68:	2b2e      	cmp	r3, #46	; 0x2e
 8007b6a:	d10c      	bne.n	8007b86 <_vfiprintf_r+0x176>
 8007b6c:	7863      	ldrb	r3, [r4, #1]
 8007b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b70:	d135      	bne.n	8007bde <_vfiprintf_r+0x1ce>
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	1d1a      	adds	r2, r3, #4
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	9203      	str	r2, [sp, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	bfb8      	it	lt
 8007b7e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b82:	3402      	adds	r4, #2
 8007b84:	9305      	str	r3, [sp, #20]
 8007b86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c6c <_vfiprintf_r+0x25c>
 8007b8a:	7821      	ldrb	r1, [r4, #0]
 8007b8c:	2203      	movs	r2, #3
 8007b8e:	4650      	mov	r0, sl
 8007b90:	f7f8 fb1e 	bl	80001d0 <memchr>
 8007b94:	b140      	cbz	r0, 8007ba8 <_vfiprintf_r+0x198>
 8007b96:	2340      	movs	r3, #64	; 0x40
 8007b98:	eba0 000a 	sub.w	r0, r0, sl
 8007b9c:	fa03 f000 	lsl.w	r0, r3, r0
 8007ba0:	9b04      	ldr	r3, [sp, #16]
 8007ba2:	4303      	orrs	r3, r0
 8007ba4:	3401      	adds	r4, #1
 8007ba6:	9304      	str	r3, [sp, #16]
 8007ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bac:	482c      	ldr	r0, [pc, #176]	; (8007c60 <_vfiprintf_r+0x250>)
 8007bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bb2:	2206      	movs	r2, #6
 8007bb4:	f7f8 fb0c 	bl	80001d0 <memchr>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d03f      	beq.n	8007c3c <_vfiprintf_r+0x22c>
 8007bbc:	4b29      	ldr	r3, [pc, #164]	; (8007c64 <_vfiprintf_r+0x254>)
 8007bbe:	bb1b      	cbnz	r3, 8007c08 <_vfiprintf_r+0x1f8>
 8007bc0:	9b03      	ldr	r3, [sp, #12]
 8007bc2:	3307      	adds	r3, #7
 8007bc4:	f023 0307 	bic.w	r3, r3, #7
 8007bc8:	3308      	adds	r3, #8
 8007bca:	9303      	str	r3, [sp, #12]
 8007bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bce:	443b      	add	r3, r7
 8007bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd2:	e767      	b.n	8007aa4 <_vfiprintf_r+0x94>
 8007bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bd8:	460c      	mov	r4, r1
 8007bda:	2001      	movs	r0, #1
 8007bdc:	e7a5      	b.n	8007b2a <_vfiprintf_r+0x11a>
 8007bde:	2300      	movs	r3, #0
 8007be0:	3401      	adds	r4, #1
 8007be2:	9305      	str	r3, [sp, #20]
 8007be4:	4619      	mov	r1, r3
 8007be6:	f04f 0c0a 	mov.w	ip, #10
 8007bea:	4620      	mov	r0, r4
 8007bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bf0:	3a30      	subs	r2, #48	; 0x30
 8007bf2:	2a09      	cmp	r2, #9
 8007bf4:	d903      	bls.n	8007bfe <_vfiprintf_r+0x1ee>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d0c5      	beq.n	8007b86 <_vfiprintf_r+0x176>
 8007bfa:	9105      	str	r1, [sp, #20]
 8007bfc:	e7c3      	b.n	8007b86 <_vfiprintf_r+0x176>
 8007bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c02:	4604      	mov	r4, r0
 8007c04:	2301      	movs	r3, #1
 8007c06:	e7f0      	b.n	8007bea <_vfiprintf_r+0x1da>
 8007c08:	ab03      	add	r3, sp, #12
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	4b16      	ldr	r3, [pc, #88]	; (8007c68 <_vfiprintf_r+0x258>)
 8007c10:	a904      	add	r1, sp, #16
 8007c12:	4630      	mov	r0, r6
 8007c14:	f3af 8000 	nop.w
 8007c18:	4607      	mov	r7, r0
 8007c1a:	1c78      	adds	r0, r7, #1
 8007c1c:	d1d6      	bne.n	8007bcc <_vfiprintf_r+0x1bc>
 8007c1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c20:	07d9      	lsls	r1, r3, #31
 8007c22:	d405      	bmi.n	8007c30 <_vfiprintf_r+0x220>
 8007c24:	89ab      	ldrh	r3, [r5, #12]
 8007c26:	059a      	lsls	r2, r3, #22
 8007c28:	d402      	bmi.n	8007c30 <_vfiprintf_r+0x220>
 8007c2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c2c:	f7ff fdb7 	bl	800779e <__retarget_lock_release_recursive>
 8007c30:	89ab      	ldrh	r3, [r5, #12]
 8007c32:	065b      	lsls	r3, r3, #25
 8007c34:	f53f af12 	bmi.w	8007a5c <_vfiprintf_r+0x4c>
 8007c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c3a:	e711      	b.n	8007a60 <_vfiprintf_r+0x50>
 8007c3c:	ab03      	add	r3, sp, #12
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	462a      	mov	r2, r5
 8007c42:	4b09      	ldr	r3, [pc, #36]	; (8007c68 <_vfiprintf_r+0x258>)
 8007c44:	a904      	add	r1, sp, #16
 8007c46:	4630      	mov	r0, r6
 8007c48:	f000 f880 	bl	8007d4c <_printf_i>
 8007c4c:	e7e4      	b.n	8007c18 <_vfiprintf_r+0x208>
 8007c4e:	bf00      	nop
 8007c50:	08009ad0 	.word	0x08009ad0
 8007c54:	08009af0 	.word	0x08009af0
 8007c58:	08009ab0 	.word	0x08009ab0
 8007c5c:	08009b10 	.word	0x08009b10
 8007c60:	08009b1a 	.word	0x08009b1a
 8007c64:	00000000 	.word	0x00000000
 8007c68:	080079eb 	.word	0x080079eb
 8007c6c:	08009b16 	.word	0x08009b16

08007c70 <_printf_common>:
 8007c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c74:	4616      	mov	r6, r2
 8007c76:	4699      	mov	r9, r3
 8007c78:	688a      	ldr	r2, [r1, #8]
 8007c7a:	690b      	ldr	r3, [r1, #16]
 8007c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c80:	4293      	cmp	r3, r2
 8007c82:	bfb8      	it	lt
 8007c84:	4613      	movlt	r3, r2
 8007c86:	6033      	str	r3, [r6, #0]
 8007c88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c8c:	4607      	mov	r7, r0
 8007c8e:	460c      	mov	r4, r1
 8007c90:	b10a      	cbz	r2, 8007c96 <_printf_common+0x26>
 8007c92:	3301      	adds	r3, #1
 8007c94:	6033      	str	r3, [r6, #0]
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	0699      	lsls	r1, r3, #26
 8007c9a:	bf42      	ittt	mi
 8007c9c:	6833      	ldrmi	r3, [r6, #0]
 8007c9e:	3302      	addmi	r3, #2
 8007ca0:	6033      	strmi	r3, [r6, #0]
 8007ca2:	6825      	ldr	r5, [r4, #0]
 8007ca4:	f015 0506 	ands.w	r5, r5, #6
 8007ca8:	d106      	bne.n	8007cb8 <_printf_common+0x48>
 8007caa:	f104 0a19 	add.w	sl, r4, #25
 8007cae:	68e3      	ldr	r3, [r4, #12]
 8007cb0:	6832      	ldr	r2, [r6, #0]
 8007cb2:	1a9b      	subs	r3, r3, r2
 8007cb4:	42ab      	cmp	r3, r5
 8007cb6:	dc26      	bgt.n	8007d06 <_printf_common+0x96>
 8007cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cbc:	1e13      	subs	r3, r2, #0
 8007cbe:	6822      	ldr	r2, [r4, #0]
 8007cc0:	bf18      	it	ne
 8007cc2:	2301      	movne	r3, #1
 8007cc4:	0692      	lsls	r2, r2, #26
 8007cc6:	d42b      	bmi.n	8007d20 <_printf_common+0xb0>
 8007cc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ccc:	4649      	mov	r1, r9
 8007cce:	4638      	mov	r0, r7
 8007cd0:	47c0      	blx	r8
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	d01e      	beq.n	8007d14 <_printf_common+0xa4>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	68e5      	ldr	r5, [r4, #12]
 8007cda:	6832      	ldr	r2, [r6, #0]
 8007cdc:	f003 0306 	and.w	r3, r3, #6
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	bf08      	it	eq
 8007ce4:	1aad      	subeq	r5, r5, r2
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	6922      	ldr	r2, [r4, #16]
 8007cea:	bf0c      	ite	eq
 8007cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cf0:	2500      	movne	r5, #0
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	bfc4      	itt	gt
 8007cf6:	1a9b      	subgt	r3, r3, r2
 8007cf8:	18ed      	addgt	r5, r5, r3
 8007cfa:	2600      	movs	r6, #0
 8007cfc:	341a      	adds	r4, #26
 8007cfe:	42b5      	cmp	r5, r6
 8007d00:	d11a      	bne.n	8007d38 <_printf_common+0xc8>
 8007d02:	2000      	movs	r0, #0
 8007d04:	e008      	b.n	8007d18 <_printf_common+0xa8>
 8007d06:	2301      	movs	r3, #1
 8007d08:	4652      	mov	r2, sl
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	47c0      	blx	r8
 8007d10:	3001      	adds	r0, #1
 8007d12:	d103      	bne.n	8007d1c <_printf_common+0xac>
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1c:	3501      	adds	r5, #1
 8007d1e:	e7c6      	b.n	8007cae <_printf_common+0x3e>
 8007d20:	18e1      	adds	r1, r4, r3
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	2030      	movs	r0, #48	; 0x30
 8007d26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d2a:	4422      	add	r2, r4
 8007d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d34:	3302      	adds	r3, #2
 8007d36:	e7c7      	b.n	8007cc8 <_printf_common+0x58>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	4638      	mov	r0, r7
 8007d40:	47c0      	blx	r8
 8007d42:	3001      	adds	r0, #1
 8007d44:	d0e6      	beq.n	8007d14 <_printf_common+0xa4>
 8007d46:	3601      	adds	r6, #1
 8007d48:	e7d9      	b.n	8007cfe <_printf_common+0x8e>
	...

08007d4c <_printf_i>:
 8007d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d50:	460c      	mov	r4, r1
 8007d52:	4691      	mov	r9, r2
 8007d54:	7e27      	ldrb	r7, [r4, #24]
 8007d56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d58:	2f78      	cmp	r7, #120	; 0x78
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	469a      	mov	sl, r3
 8007d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d62:	d807      	bhi.n	8007d74 <_printf_i+0x28>
 8007d64:	2f62      	cmp	r7, #98	; 0x62
 8007d66:	d80a      	bhi.n	8007d7e <_printf_i+0x32>
 8007d68:	2f00      	cmp	r7, #0
 8007d6a:	f000 80d8 	beq.w	8007f1e <_printf_i+0x1d2>
 8007d6e:	2f58      	cmp	r7, #88	; 0x58
 8007d70:	f000 80a3 	beq.w	8007eba <_printf_i+0x16e>
 8007d74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d7c:	e03a      	b.n	8007df4 <_printf_i+0xa8>
 8007d7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d82:	2b15      	cmp	r3, #21
 8007d84:	d8f6      	bhi.n	8007d74 <_printf_i+0x28>
 8007d86:	a001      	add	r0, pc, #4	; (adr r0, 8007d8c <_printf_i+0x40>)
 8007d88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d8c:	08007de5 	.word	0x08007de5
 8007d90:	08007df9 	.word	0x08007df9
 8007d94:	08007d75 	.word	0x08007d75
 8007d98:	08007d75 	.word	0x08007d75
 8007d9c:	08007d75 	.word	0x08007d75
 8007da0:	08007d75 	.word	0x08007d75
 8007da4:	08007df9 	.word	0x08007df9
 8007da8:	08007d75 	.word	0x08007d75
 8007dac:	08007d75 	.word	0x08007d75
 8007db0:	08007d75 	.word	0x08007d75
 8007db4:	08007d75 	.word	0x08007d75
 8007db8:	08007f05 	.word	0x08007f05
 8007dbc:	08007e29 	.word	0x08007e29
 8007dc0:	08007ee7 	.word	0x08007ee7
 8007dc4:	08007d75 	.word	0x08007d75
 8007dc8:	08007d75 	.word	0x08007d75
 8007dcc:	08007f27 	.word	0x08007f27
 8007dd0:	08007d75 	.word	0x08007d75
 8007dd4:	08007e29 	.word	0x08007e29
 8007dd8:	08007d75 	.word	0x08007d75
 8007ddc:	08007d75 	.word	0x08007d75
 8007de0:	08007eef 	.word	0x08007eef
 8007de4:	680b      	ldr	r3, [r1, #0]
 8007de6:	1d1a      	adds	r2, r3, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	600a      	str	r2, [r1, #0]
 8007dec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007df0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007df4:	2301      	movs	r3, #1
 8007df6:	e0a3      	b.n	8007f40 <_printf_i+0x1f4>
 8007df8:	6825      	ldr	r5, [r4, #0]
 8007dfa:	6808      	ldr	r0, [r1, #0]
 8007dfc:	062e      	lsls	r6, r5, #24
 8007dfe:	f100 0304 	add.w	r3, r0, #4
 8007e02:	d50a      	bpl.n	8007e1a <_printf_i+0xce>
 8007e04:	6805      	ldr	r5, [r0, #0]
 8007e06:	600b      	str	r3, [r1, #0]
 8007e08:	2d00      	cmp	r5, #0
 8007e0a:	da03      	bge.n	8007e14 <_printf_i+0xc8>
 8007e0c:	232d      	movs	r3, #45	; 0x2d
 8007e0e:	426d      	negs	r5, r5
 8007e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e14:	485e      	ldr	r0, [pc, #376]	; (8007f90 <_printf_i+0x244>)
 8007e16:	230a      	movs	r3, #10
 8007e18:	e019      	b.n	8007e4e <_printf_i+0x102>
 8007e1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e1e:	6805      	ldr	r5, [r0, #0]
 8007e20:	600b      	str	r3, [r1, #0]
 8007e22:	bf18      	it	ne
 8007e24:	b22d      	sxthne	r5, r5
 8007e26:	e7ef      	b.n	8007e08 <_printf_i+0xbc>
 8007e28:	680b      	ldr	r3, [r1, #0]
 8007e2a:	6825      	ldr	r5, [r4, #0]
 8007e2c:	1d18      	adds	r0, r3, #4
 8007e2e:	6008      	str	r0, [r1, #0]
 8007e30:	0628      	lsls	r0, r5, #24
 8007e32:	d501      	bpl.n	8007e38 <_printf_i+0xec>
 8007e34:	681d      	ldr	r5, [r3, #0]
 8007e36:	e002      	b.n	8007e3e <_printf_i+0xf2>
 8007e38:	0669      	lsls	r1, r5, #25
 8007e3a:	d5fb      	bpl.n	8007e34 <_printf_i+0xe8>
 8007e3c:	881d      	ldrh	r5, [r3, #0]
 8007e3e:	4854      	ldr	r0, [pc, #336]	; (8007f90 <_printf_i+0x244>)
 8007e40:	2f6f      	cmp	r7, #111	; 0x6f
 8007e42:	bf0c      	ite	eq
 8007e44:	2308      	moveq	r3, #8
 8007e46:	230a      	movne	r3, #10
 8007e48:	2100      	movs	r1, #0
 8007e4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e4e:	6866      	ldr	r6, [r4, #4]
 8007e50:	60a6      	str	r6, [r4, #8]
 8007e52:	2e00      	cmp	r6, #0
 8007e54:	bfa2      	ittt	ge
 8007e56:	6821      	ldrge	r1, [r4, #0]
 8007e58:	f021 0104 	bicge.w	r1, r1, #4
 8007e5c:	6021      	strge	r1, [r4, #0]
 8007e5e:	b90d      	cbnz	r5, 8007e64 <_printf_i+0x118>
 8007e60:	2e00      	cmp	r6, #0
 8007e62:	d04d      	beq.n	8007f00 <_printf_i+0x1b4>
 8007e64:	4616      	mov	r6, r2
 8007e66:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e6a:	fb03 5711 	mls	r7, r3, r1, r5
 8007e6e:	5dc7      	ldrb	r7, [r0, r7]
 8007e70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e74:	462f      	mov	r7, r5
 8007e76:	42bb      	cmp	r3, r7
 8007e78:	460d      	mov	r5, r1
 8007e7a:	d9f4      	bls.n	8007e66 <_printf_i+0x11a>
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d10b      	bne.n	8007e98 <_printf_i+0x14c>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	07df      	lsls	r7, r3, #31
 8007e84:	d508      	bpl.n	8007e98 <_printf_i+0x14c>
 8007e86:	6923      	ldr	r3, [r4, #16]
 8007e88:	6861      	ldr	r1, [r4, #4]
 8007e8a:	4299      	cmp	r1, r3
 8007e8c:	bfde      	ittt	le
 8007e8e:	2330      	movle	r3, #48	; 0x30
 8007e90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e94:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007e98:	1b92      	subs	r2, r2, r6
 8007e9a:	6122      	str	r2, [r4, #16]
 8007e9c:	f8cd a000 	str.w	sl, [sp]
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	aa03      	add	r2, sp, #12
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	f7ff fee2 	bl	8007c70 <_printf_common>
 8007eac:	3001      	adds	r0, #1
 8007eae:	d14c      	bne.n	8007f4a <_printf_i+0x1fe>
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007eb4:	b004      	add	sp, #16
 8007eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eba:	4835      	ldr	r0, [pc, #212]	; (8007f90 <_printf_i+0x244>)
 8007ebc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	680e      	ldr	r6, [r1, #0]
 8007ec4:	061f      	lsls	r7, r3, #24
 8007ec6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007eca:	600e      	str	r6, [r1, #0]
 8007ecc:	d514      	bpl.n	8007ef8 <_printf_i+0x1ac>
 8007ece:	07d9      	lsls	r1, r3, #31
 8007ed0:	bf44      	itt	mi
 8007ed2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ed6:	6023      	strmi	r3, [r4, #0]
 8007ed8:	b91d      	cbnz	r5, 8007ee2 <_printf_i+0x196>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	f023 0320 	bic.w	r3, r3, #32
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	2310      	movs	r3, #16
 8007ee4:	e7b0      	b.n	8007e48 <_printf_i+0xfc>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	f043 0320 	orr.w	r3, r3, #32
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	2378      	movs	r3, #120	; 0x78
 8007ef0:	4828      	ldr	r0, [pc, #160]	; (8007f94 <_printf_i+0x248>)
 8007ef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ef6:	e7e3      	b.n	8007ec0 <_printf_i+0x174>
 8007ef8:	065e      	lsls	r6, r3, #25
 8007efa:	bf48      	it	mi
 8007efc:	b2ad      	uxthmi	r5, r5
 8007efe:	e7e6      	b.n	8007ece <_printf_i+0x182>
 8007f00:	4616      	mov	r6, r2
 8007f02:	e7bb      	b.n	8007e7c <_printf_i+0x130>
 8007f04:	680b      	ldr	r3, [r1, #0]
 8007f06:	6826      	ldr	r6, [r4, #0]
 8007f08:	6960      	ldr	r0, [r4, #20]
 8007f0a:	1d1d      	adds	r5, r3, #4
 8007f0c:	600d      	str	r5, [r1, #0]
 8007f0e:	0635      	lsls	r5, r6, #24
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	d501      	bpl.n	8007f18 <_printf_i+0x1cc>
 8007f14:	6018      	str	r0, [r3, #0]
 8007f16:	e002      	b.n	8007f1e <_printf_i+0x1d2>
 8007f18:	0671      	lsls	r1, r6, #25
 8007f1a:	d5fb      	bpl.n	8007f14 <_printf_i+0x1c8>
 8007f1c:	8018      	strh	r0, [r3, #0]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	4616      	mov	r6, r2
 8007f24:	e7ba      	b.n	8007e9c <_printf_i+0x150>
 8007f26:	680b      	ldr	r3, [r1, #0]
 8007f28:	1d1a      	adds	r2, r3, #4
 8007f2a:	600a      	str	r2, [r1, #0]
 8007f2c:	681e      	ldr	r6, [r3, #0]
 8007f2e:	6862      	ldr	r2, [r4, #4]
 8007f30:	2100      	movs	r1, #0
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7f8 f94c 	bl	80001d0 <memchr>
 8007f38:	b108      	cbz	r0, 8007f3e <_printf_i+0x1f2>
 8007f3a:	1b80      	subs	r0, r0, r6
 8007f3c:	6060      	str	r0, [r4, #4]
 8007f3e:	6863      	ldr	r3, [r4, #4]
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	2300      	movs	r3, #0
 8007f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f48:	e7a8      	b.n	8007e9c <_printf_i+0x150>
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4640      	mov	r0, r8
 8007f52:	47d0      	blx	sl
 8007f54:	3001      	adds	r0, #1
 8007f56:	d0ab      	beq.n	8007eb0 <_printf_i+0x164>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	079b      	lsls	r3, r3, #30
 8007f5c:	d413      	bmi.n	8007f86 <_printf_i+0x23a>
 8007f5e:	68e0      	ldr	r0, [r4, #12]
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	4298      	cmp	r0, r3
 8007f64:	bfb8      	it	lt
 8007f66:	4618      	movlt	r0, r3
 8007f68:	e7a4      	b.n	8007eb4 <_printf_i+0x168>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	4649      	mov	r1, r9
 8007f70:	4640      	mov	r0, r8
 8007f72:	47d0      	blx	sl
 8007f74:	3001      	adds	r0, #1
 8007f76:	d09b      	beq.n	8007eb0 <_printf_i+0x164>
 8007f78:	3501      	adds	r5, #1
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	9903      	ldr	r1, [sp, #12]
 8007f7e:	1a5b      	subs	r3, r3, r1
 8007f80:	42ab      	cmp	r3, r5
 8007f82:	dcf2      	bgt.n	8007f6a <_printf_i+0x21e>
 8007f84:	e7eb      	b.n	8007f5e <_printf_i+0x212>
 8007f86:	2500      	movs	r5, #0
 8007f88:	f104 0619 	add.w	r6, r4, #25
 8007f8c:	e7f5      	b.n	8007f7a <_printf_i+0x22e>
 8007f8e:	bf00      	nop
 8007f90:	08009b21 	.word	0x08009b21
 8007f94:	08009b32 	.word	0x08009b32

08007f98 <_sbrk_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4d06      	ldr	r5, [pc, #24]	; (8007fb4 <_sbrk_r+0x1c>)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	602b      	str	r3, [r5, #0]
 8007fa4:	f7fa f968 	bl	8002278 <_sbrk>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d102      	bne.n	8007fb2 <_sbrk_r+0x1a>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	b103      	cbz	r3, 8007fb2 <_sbrk_r+0x1a>
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	2000052c 	.word	0x2000052c

08007fb8 <__sread>:
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	460c      	mov	r4, r1
 8007fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc0:	f000 f8a0 	bl	8008104 <_read_r>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	bfab      	itete	ge
 8007fc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fca:	89a3      	ldrhlt	r3, [r4, #12]
 8007fcc:	181b      	addge	r3, r3, r0
 8007fce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fd2:	bfac      	ite	ge
 8007fd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fd6:	81a3      	strhlt	r3, [r4, #12]
 8007fd8:	bd10      	pop	{r4, pc}

08007fda <__swrite>:
 8007fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fde:	461f      	mov	r7, r3
 8007fe0:	898b      	ldrh	r3, [r1, #12]
 8007fe2:	05db      	lsls	r3, r3, #23
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	4616      	mov	r6, r2
 8007fea:	d505      	bpl.n	8007ff8 <__swrite+0x1e>
 8007fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f000 f868 	bl	80080c8 <_lseek_r>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	4632      	mov	r2, r6
 8008006:	463b      	mov	r3, r7
 8008008:	4628      	mov	r0, r5
 800800a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800800e:	f000 b817 	b.w	8008040 <_write_r>

08008012 <__sseek>:
 8008012:	b510      	push	{r4, lr}
 8008014:	460c      	mov	r4, r1
 8008016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800801a:	f000 f855 	bl	80080c8 <_lseek_r>
 800801e:	1c43      	adds	r3, r0, #1
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	bf15      	itete	ne
 8008024:	6560      	strne	r0, [r4, #84]	; 0x54
 8008026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800802a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800802e:	81a3      	strheq	r3, [r4, #12]
 8008030:	bf18      	it	ne
 8008032:	81a3      	strhne	r3, [r4, #12]
 8008034:	bd10      	pop	{r4, pc}

08008036 <__sclose>:
 8008036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803a:	f000 b813 	b.w	8008064 <_close_r>
	...

08008040 <_write_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4d07      	ldr	r5, [pc, #28]	; (8008060 <_write_r+0x20>)
 8008044:	4604      	mov	r4, r0
 8008046:	4608      	mov	r0, r1
 8008048:	4611      	mov	r1, r2
 800804a:	2200      	movs	r2, #0
 800804c:	602a      	str	r2, [r5, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	f7f8 fe60 	bl	8000d14 <_write>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_write_r+0x1e>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_write_r+0x1e>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	2000052c 	.word	0x2000052c

08008064 <_close_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d06      	ldr	r5, [pc, #24]	; (8008080 <_close_r+0x1c>)
 8008068:	2300      	movs	r3, #0
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	602b      	str	r3, [r5, #0]
 8008070:	f7fa f8cd 	bl	800220e <_close>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d102      	bne.n	800807e <_close_r+0x1a>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	b103      	cbz	r3, 800807e <_close_r+0x1a>
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	2000052c 	.word	0x2000052c

08008084 <_fstat_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d07      	ldr	r5, [pc, #28]	; (80080a4 <_fstat_r+0x20>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	4611      	mov	r1, r2
 8008090:	602b      	str	r3, [r5, #0]
 8008092:	f7fa f8c8 	bl	8002226 <_fstat>
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	d102      	bne.n	80080a0 <_fstat_r+0x1c>
 800809a:	682b      	ldr	r3, [r5, #0]
 800809c:	b103      	cbz	r3, 80080a0 <_fstat_r+0x1c>
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	bd38      	pop	{r3, r4, r5, pc}
 80080a2:	bf00      	nop
 80080a4:	2000052c 	.word	0x2000052c

080080a8 <_isatty_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d06      	ldr	r5, [pc, #24]	; (80080c4 <_isatty_r+0x1c>)
 80080ac:	2300      	movs	r3, #0
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	f7fa f8c7 	bl	8002246 <_isatty>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_isatty_r+0x1a>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_isatty_r+0x1a>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	2000052c 	.word	0x2000052c

080080c8 <_lseek_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d07      	ldr	r5, [pc, #28]	; (80080e8 <_lseek_r+0x20>)
 80080cc:	4604      	mov	r4, r0
 80080ce:	4608      	mov	r0, r1
 80080d0:	4611      	mov	r1, r2
 80080d2:	2200      	movs	r2, #0
 80080d4:	602a      	str	r2, [r5, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f7fa f8c0 	bl	800225c <_lseek>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_lseek_r+0x1e>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_lseek_r+0x1e>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	2000052c 	.word	0x2000052c

080080ec <__malloc_lock>:
 80080ec:	4801      	ldr	r0, [pc, #4]	; (80080f4 <__malloc_lock+0x8>)
 80080ee:	f7ff bb55 	b.w	800779c <__retarget_lock_acquire_recursive>
 80080f2:	bf00      	nop
 80080f4:	20000524 	.word	0x20000524

080080f8 <__malloc_unlock>:
 80080f8:	4801      	ldr	r0, [pc, #4]	; (8008100 <__malloc_unlock+0x8>)
 80080fa:	f7ff bb50 	b.w	800779e <__retarget_lock_release_recursive>
 80080fe:	bf00      	nop
 8008100:	20000524 	.word	0x20000524

08008104 <_read_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4d07      	ldr	r5, [pc, #28]	; (8008124 <_read_r+0x20>)
 8008108:	4604      	mov	r4, r0
 800810a:	4608      	mov	r0, r1
 800810c:	4611      	mov	r1, r2
 800810e:	2200      	movs	r2, #0
 8008110:	602a      	str	r2, [r5, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	f7fa f85e 	bl	80021d4 <_read>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_read_r+0x1e>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_read_r+0x1e>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	2000052c 	.word	0x2000052c

08008128 <cos>:
 8008128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800812a:	ec53 2b10 	vmov	r2, r3, d0
 800812e:	4824      	ldr	r0, [pc, #144]	; (80081c0 <cos+0x98>)
 8008130:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008134:	4281      	cmp	r1, r0
 8008136:	dc06      	bgt.n	8008146 <cos+0x1e>
 8008138:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80081b8 <cos+0x90>
 800813c:	f000 fe28 	bl	8008d90 <__kernel_cos>
 8008140:	ec51 0b10 	vmov	r0, r1, d0
 8008144:	e007      	b.n	8008156 <cos+0x2e>
 8008146:	481f      	ldr	r0, [pc, #124]	; (80081c4 <cos+0x9c>)
 8008148:	4281      	cmp	r1, r0
 800814a:	dd09      	ble.n	8008160 <cos+0x38>
 800814c:	ee10 0a10 	vmov	r0, s0
 8008150:	4619      	mov	r1, r3
 8008152:	f7f8 f891 	bl	8000278 <__aeabi_dsub>
 8008156:	ec41 0b10 	vmov	d0, r0, r1
 800815a:	b005      	add	sp, #20
 800815c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008160:	4668      	mov	r0, sp
 8008162:	f000 fb55 	bl	8008810 <__ieee754_rem_pio2>
 8008166:	f000 0003 	and.w	r0, r0, #3
 800816a:	2801      	cmp	r0, #1
 800816c:	d007      	beq.n	800817e <cos+0x56>
 800816e:	2802      	cmp	r0, #2
 8008170:	d012      	beq.n	8008198 <cos+0x70>
 8008172:	b9c0      	cbnz	r0, 80081a6 <cos+0x7e>
 8008174:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008178:	ed9d 0b00 	vldr	d0, [sp]
 800817c:	e7de      	b.n	800813c <cos+0x14>
 800817e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008182:	ed9d 0b00 	vldr	d0, [sp]
 8008186:	f001 fa0b 	bl	80095a0 <__kernel_sin>
 800818a:	ec53 2b10 	vmov	r2, r3, d0
 800818e:	ee10 0a10 	vmov	r0, s0
 8008192:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008196:	e7de      	b.n	8008156 <cos+0x2e>
 8008198:	ed9d 1b02 	vldr	d1, [sp, #8]
 800819c:	ed9d 0b00 	vldr	d0, [sp]
 80081a0:	f000 fdf6 	bl	8008d90 <__kernel_cos>
 80081a4:	e7f1      	b.n	800818a <cos+0x62>
 80081a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80081aa:	ed9d 0b00 	vldr	d0, [sp]
 80081ae:	2001      	movs	r0, #1
 80081b0:	f001 f9f6 	bl	80095a0 <__kernel_sin>
 80081b4:	e7c4      	b.n	8008140 <cos+0x18>
 80081b6:	bf00      	nop
	...
 80081c0:	3fe921fb 	.word	0x3fe921fb
 80081c4:	7fefffff 	.word	0x7fefffff

080081c8 <sin>:
 80081c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081ca:	ec53 2b10 	vmov	r2, r3, d0
 80081ce:	4826      	ldr	r0, [pc, #152]	; (8008268 <sin+0xa0>)
 80081d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081d4:	4281      	cmp	r1, r0
 80081d6:	dc07      	bgt.n	80081e8 <sin+0x20>
 80081d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008260 <sin+0x98>
 80081dc:	2000      	movs	r0, #0
 80081de:	f001 f9df 	bl	80095a0 <__kernel_sin>
 80081e2:	ec51 0b10 	vmov	r0, r1, d0
 80081e6:	e007      	b.n	80081f8 <sin+0x30>
 80081e8:	4820      	ldr	r0, [pc, #128]	; (800826c <sin+0xa4>)
 80081ea:	4281      	cmp	r1, r0
 80081ec:	dd09      	ble.n	8008202 <sin+0x3a>
 80081ee:	ee10 0a10 	vmov	r0, s0
 80081f2:	4619      	mov	r1, r3
 80081f4:	f7f8 f840 	bl	8000278 <__aeabi_dsub>
 80081f8:	ec41 0b10 	vmov	d0, r0, r1
 80081fc:	b005      	add	sp, #20
 80081fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8008202:	4668      	mov	r0, sp
 8008204:	f000 fb04 	bl	8008810 <__ieee754_rem_pio2>
 8008208:	f000 0003 	and.w	r0, r0, #3
 800820c:	2801      	cmp	r0, #1
 800820e:	d008      	beq.n	8008222 <sin+0x5a>
 8008210:	2802      	cmp	r0, #2
 8008212:	d00d      	beq.n	8008230 <sin+0x68>
 8008214:	b9d0      	cbnz	r0, 800824c <sin+0x84>
 8008216:	ed9d 1b02 	vldr	d1, [sp, #8]
 800821a:	ed9d 0b00 	vldr	d0, [sp]
 800821e:	2001      	movs	r0, #1
 8008220:	e7dd      	b.n	80081de <sin+0x16>
 8008222:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008226:	ed9d 0b00 	vldr	d0, [sp]
 800822a:	f000 fdb1 	bl	8008d90 <__kernel_cos>
 800822e:	e7d8      	b.n	80081e2 <sin+0x1a>
 8008230:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008234:	ed9d 0b00 	vldr	d0, [sp]
 8008238:	2001      	movs	r0, #1
 800823a:	f001 f9b1 	bl	80095a0 <__kernel_sin>
 800823e:	ec53 2b10 	vmov	r2, r3, d0
 8008242:	ee10 0a10 	vmov	r0, s0
 8008246:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800824a:	e7d5      	b.n	80081f8 <sin+0x30>
 800824c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008250:	ed9d 0b00 	vldr	d0, [sp]
 8008254:	f000 fd9c 	bl	8008d90 <__kernel_cos>
 8008258:	e7f1      	b.n	800823e <sin+0x76>
 800825a:	bf00      	nop
 800825c:	f3af 8000 	nop.w
	...
 8008268:	3fe921fb 	.word	0x3fe921fb
 800826c:	7fefffff 	.word	0x7fefffff

08008270 <acos>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	ed2d 8b02 	vpush	{d8}
 8008276:	ec55 4b10 	vmov	r4, r5, d0
 800827a:	f000 f869 	bl	8008350 <__ieee754_acos>
 800827e:	4b16      	ldr	r3, [pc, #88]	; (80082d8 <acos+0x68>)
 8008280:	eeb0 8a40 	vmov.f32	s16, s0
 8008284:	eef0 8a60 	vmov.f32	s17, s1
 8008288:	f993 3000 	ldrsb.w	r3, [r3]
 800828c:	3301      	adds	r3, #1
 800828e:	d01c      	beq.n	80082ca <acos+0x5a>
 8008290:	4622      	mov	r2, r4
 8008292:	462b      	mov	r3, r5
 8008294:	4620      	mov	r0, r4
 8008296:	4629      	mov	r1, r5
 8008298:	f7f8 fc40 	bl	8000b1c <__aeabi_dcmpun>
 800829c:	b9a8      	cbnz	r0, 80082ca <acos+0x5a>
 800829e:	ec45 4b10 	vmov	d0, r4, r5
 80082a2:	f001 fa3b 	bl	800971c <fabs>
 80082a6:	4b0d      	ldr	r3, [pc, #52]	; (80082dc <acos+0x6c>)
 80082a8:	ec51 0b10 	vmov	r0, r1, d0
 80082ac:	2200      	movs	r2, #0
 80082ae:	f7f8 fc2b 	bl	8000b08 <__aeabi_dcmpgt>
 80082b2:	b150      	cbz	r0, 80082ca <acos+0x5a>
 80082b4:	f7fe ff2c 	bl	8007110 <__errno>
 80082b8:	ecbd 8b02 	vpop	{d8}
 80082bc:	2321      	movs	r3, #33	; 0x21
 80082be:	6003      	str	r3, [r0, #0]
 80082c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082c4:	4806      	ldr	r0, [pc, #24]	; (80082e0 <acos+0x70>)
 80082c6:	f001 bab3 	b.w	8009830 <nan>
 80082ca:	eeb0 0a48 	vmov.f32	s0, s16
 80082ce:	eef0 0a68 	vmov.f32	s1, s17
 80082d2:	ecbd 8b02 	vpop	{d8}
 80082d6:	bd38      	pop	{r3, r4, r5, pc}
 80082d8:	20000070 	.word	0x20000070
 80082dc:	3ff00000 	.word	0x3ff00000
 80082e0:	08009b15 	.word	0x08009b15

080082e4 <sqrt>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	ed2d 8b02 	vpush	{d8}
 80082ea:	ec55 4b10 	vmov	r4, r5, d0
 80082ee:	f000 fc99 	bl	8008c24 <__ieee754_sqrt>
 80082f2:	4b15      	ldr	r3, [pc, #84]	; (8008348 <sqrt+0x64>)
 80082f4:	eeb0 8a40 	vmov.f32	s16, s0
 80082f8:	eef0 8a60 	vmov.f32	s17, s1
 80082fc:	f993 3000 	ldrsb.w	r3, [r3]
 8008300:	3301      	adds	r3, #1
 8008302:	d019      	beq.n	8008338 <sqrt+0x54>
 8008304:	4622      	mov	r2, r4
 8008306:	462b      	mov	r3, r5
 8008308:	4620      	mov	r0, r4
 800830a:	4629      	mov	r1, r5
 800830c:	f7f8 fc06 	bl	8000b1c <__aeabi_dcmpun>
 8008310:	b990      	cbnz	r0, 8008338 <sqrt+0x54>
 8008312:	2200      	movs	r2, #0
 8008314:	2300      	movs	r3, #0
 8008316:	4620      	mov	r0, r4
 8008318:	4629      	mov	r1, r5
 800831a:	f7f8 fbd7 	bl	8000acc <__aeabi_dcmplt>
 800831e:	b158      	cbz	r0, 8008338 <sqrt+0x54>
 8008320:	f7fe fef6 	bl	8007110 <__errno>
 8008324:	2321      	movs	r3, #33	; 0x21
 8008326:	6003      	str	r3, [r0, #0]
 8008328:	2200      	movs	r2, #0
 800832a:	2300      	movs	r3, #0
 800832c:	4610      	mov	r0, r2
 800832e:	4619      	mov	r1, r3
 8008330:	f7f8 fa84 	bl	800083c <__aeabi_ddiv>
 8008334:	ec41 0b18 	vmov	d8, r0, r1
 8008338:	eeb0 0a48 	vmov.f32	s0, s16
 800833c:	eef0 0a68 	vmov.f32	s1, s17
 8008340:	ecbd 8b02 	vpop	{d8}
 8008344:	bd38      	pop	{r3, r4, r5, pc}
 8008346:	bf00      	nop
 8008348:	20000070 	.word	0x20000070
 800834c:	00000000 	.word	0x00000000

08008350 <__ieee754_acos>:
 8008350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	ec55 4b10 	vmov	r4, r5, d0
 8008358:	49b7      	ldr	r1, [pc, #732]	; (8008638 <__ieee754_acos+0x2e8>)
 800835a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800835e:	428b      	cmp	r3, r1
 8008360:	dd1b      	ble.n	800839a <__ieee754_acos+0x4a>
 8008362:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8008366:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800836a:	4323      	orrs	r3, r4
 800836c:	d106      	bne.n	800837c <__ieee754_acos+0x2c>
 800836e:	2d00      	cmp	r5, #0
 8008370:	f300 8211 	bgt.w	8008796 <__ieee754_acos+0x446>
 8008374:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80085d0 <__ieee754_acos+0x280>
 8008378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837c:	ee10 2a10 	vmov	r2, s0
 8008380:	462b      	mov	r3, r5
 8008382:	ee10 0a10 	vmov	r0, s0
 8008386:	4629      	mov	r1, r5
 8008388:	f7f7 ff76 	bl	8000278 <__aeabi_dsub>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	f7f8 fa54 	bl	800083c <__aeabi_ddiv>
 8008394:	ec41 0b10 	vmov	d0, r0, r1
 8008398:	e7ee      	b.n	8008378 <__ieee754_acos+0x28>
 800839a:	49a8      	ldr	r1, [pc, #672]	; (800863c <__ieee754_acos+0x2ec>)
 800839c:	428b      	cmp	r3, r1
 800839e:	f300 8087 	bgt.w	80084b0 <__ieee754_acos+0x160>
 80083a2:	4aa7      	ldr	r2, [pc, #668]	; (8008640 <__ieee754_acos+0x2f0>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	f340 81f9 	ble.w	800879c <__ieee754_acos+0x44c>
 80083aa:	ee10 2a10 	vmov	r2, s0
 80083ae:	ee10 0a10 	vmov	r0, s0
 80083b2:	462b      	mov	r3, r5
 80083b4:	4629      	mov	r1, r5
 80083b6:	f7f8 f917 	bl	80005e8 <__aeabi_dmul>
 80083ba:	a387      	add	r3, pc, #540	; (adr r3, 80085d8 <__ieee754_acos+0x288>)
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	4606      	mov	r6, r0
 80083c2:	460f      	mov	r7, r1
 80083c4:	f7f8 f910 	bl	80005e8 <__aeabi_dmul>
 80083c8:	a385      	add	r3, pc, #532	; (adr r3, 80085e0 <__ieee754_acos+0x290>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f7f7 ff55 	bl	800027c <__adddf3>
 80083d2:	4632      	mov	r2, r6
 80083d4:	463b      	mov	r3, r7
 80083d6:	f7f8 f907 	bl	80005e8 <__aeabi_dmul>
 80083da:	a383      	add	r3, pc, #524	; (adr r3, 80085e8 <__ieee754_acos+0x298>)
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	f7f7 ff4a 	bl	8000278 <__aeabi_dsub>
 80083e4:	4632      	mov	r2, r6
 80083e6:	463b      	mov	r3, r7
 80083e8:	f7f8 f8fe 	bl	80005e8 <__aeabi_dmul>
 80083ec:	a380      	add	r3, pc, #512	; (adr r3, 80085f0 <__ieee754_acos+0x2a0>)
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f7f7 ff43 	bl	800027c <__adddf3>
 80083f6:	4632      	mov	r2, r6
 80083f8:	463b      	mov	r3, r7
 80083fa:	f7f8 f8f5 	bl	80005e8 <__aeabi_dmul>
 80083fe:	a37e      	add	r3, pc, #504	; (adr r3, 80085f8 <__ieee754_acos+0x2a8>)
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	f7f7 ff38 	bl	8000278 <__aeabi_dsub>
 8008408:	4632      	mov	r2, r6
 800840a:	463b      	mov	r3, r7
 800840c:	f7f8 f8ec 	bl	80005e8 <__aeabi_dmul>
 8008410:	a37b      	add	r3, pc, #492	; (adr r3, 8008600 <__ieee754_acos+0x2b0>)
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	f7f7 ff31 	bl	800027c <__adddf3>
 800841a:	4632      	mov	r2, r6
 800841c:	463b      	mov	r3, r7
 800841e:	f7f8 f8e3 	bl	80005e8 <__aeabi_dmul>
 8008422:	a379      	add	r3, pc, #484	; (adr r3, 8008608 <__ieee754_acos+0x2b8>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	4680      	mov	r8, r0
 800842a:	4689      	mov	r9, r1
 800842c:	4630      	mov	r0, r6
 800842e:	4639      	mov	r1, r7
 8008430:	f7f8 f8da 	bl	80005e8 <__aeabi_dmul>
 8008434:	a376      	add	r3, pc, #472	; (adr r3, 8008610 <__ieee754_acos+0x2c0>)
 8008436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843a:	f7f7 ff1d 	bl	8000278 <__aeabi_dsub>
 800843e:	4632      	mov	r2, r6
 8008440:	463b      	mov	r3, r7
 8008442:	f7f8 f8d1 	bl	80005e8 <__aeabi_dmul>
 8008446:	a374      	add	r3, pc, #464	; (adr r3, 8008618 <__ieee754_acos+0x2c8>)
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	f7f7 ff16 	bl	800027c <__adddf3>
 8008450:	4632      	mov	r2, r6
 8008452:	463b      	mov	r3, r7
 8008454:	f7f8 f8c8 	bl	80005e8 <__aeabi_dmul>
 8008458:	a371      	add	r3, pc, #452	; (adr r3, 8008620 <__ieee754_acos+0x2d0>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f7f7 ff0b 	bl	8000278 <__aeabi_dsub>
 8008462:	4632      	mov	r2, r6
 8008464:	463b      	mov	r3, r7
 8008466:	f7f8 f8bf 	bl	80005e8 <__aeabi_dmul>
 800846a:	4b76      	ldr	r3, [pc, #472]	; (8008644 <__ieee754_acos+0x2f4>)
 800846c:	2200      	movs	r2, #0
 800846e:	f7f7 ff05 	bl	800027c <__adddf3>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4640      	mov	r0, r8
 8008478:	4649      	mov	r1, r9
 800847a:	f7f8 f9df 	bl	800083c <__aeabi_ddiv>
 800847e:	4622      	mov	r2, r4
 8008480:	462b      	mov	r3, r5
 8008482:	f7f8 f8b1 	bl	80005e8 <__aeabi_dmul>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	a167      	add	r1, pc, #412	; (adr r1, 8008628 <__ieee754_acos+0x2d8>)
 800848c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008490:	f7f7 fef2 	bl	8000278 <__aeabi_dsub>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4620      	mov	r0, r4
 800849a:	4629      	mov	r1, r5
 800849c:	f7f7 feec 	bl	8000278 <__aeabi_dsub>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	a162      	add	r1, pc, #392	; (adr r1, 8008630 <__ieee754_acos+0x2e0>)
 80084a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084aa:	f7f7 fee5 	bl	8000278 <__aeabi_dsub>
 80084ae:	e771      	b.n	8008394 <__ieee754_acos+0x44>
 80084b0:	2d00      	cmp	r5, #0
 80084b2:	f280 80cb 	bge.w	800864c <__ieee754_acos+0x2fc>
 80084b6:	ee10 0a10 	vmov	r0, s0
 80084ba:	4b62      	ldr	r3, [pc, #392]	; (8008644 <__ieee754_acos+0x2f4>)
 80084bc:	2200      	movs	r2, #0
 80084be:	4629      	mov	r1, r5
 80084c0:	f7f7 fedc 	bl	800027c <__adddf3>
 80084c4:	4b60      	ldr	r3, [pc, #384]	; (8008648 <__ieee754_acos+0x2f8>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	f7f8 f88e 	bl	80005e8 <__aeabi_dmul>
 80084cc:	a342      	add	r3, pc, #264	; (adr r3, 80085d8 <__ieee754_acos+0x288>)
 80084ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d2:	4604      	mov	r4, r0
 80084d4:	460d      	mov	r5, r1
 80084d6:	f7f8 f887 	bl	80005e8 <__aeabi_dmul>
 80084da:	a341      	add	r3, pc, #260	; (adr r3, 80085e0 <__ieee754_acos+0x290>)
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	f7f7 fecc 	bl	800027c <__adddf3>
 80084e4:	4622      	mov	r2, r4
 80084e6:	462b      	mov	r3, r5
 80084e8:	f7f8 f87e 	bl	80005e8 <__aeabi_dmul>
 80084ec:	a33e      	add	r3, pc, #248	; (adr r3, 80085e8 <__ieee754_acos+0x298>)
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	f7f7 fec1 	bl	8000278 <__aeabi_dsub>
 80084f6:	4622      	mov	r2, r4
 80084f8:	462b      	mov	r3, r5
 80084fa:	f7f8 f875 	bl	80005e8 <__aeabi_dmul>
 80084fe:	a33c      	add	r3, pc, #240	; (adr r3, 80085f0 <__ieee754_acos+0x2a0>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	f7f7 feba 	bl	800027c <__adddf3>
 8008508:	4622      	mov	r2, r4
 800850a:	462b      	mov	r3, r5
 800850c:	f7f8 f86c 	bl	80005e8 <__aeabi_dmul>
 8008510:	a339      	add	r3, pc, #228	; (adr r3, 80085f8 <__ieee754_acos+0x2a8>)
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	f7f7 feaf 	bl	8000278 <__aeabi_dsub>
 800851a:	4622      	mov	r2, r4
 800851c:	462b      	mov	r3, r5
 800851e:	f7f8 f863 	bl	80005e8 <__aeabi_dmul>
 8008522:	a337      	add	r3, pc, #220	; (adr r3, 8008600 <__ieee754_acos+0x2b0>)
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	f7f7 fea8 	bl	800027c <__adddf3>
 800852c:	4622      	mov	r2, r4
 800852e:	462b      	mov	r3, r5
 8008530:	f7f8 f85a 	bl	80005e8 <__aeabi_dmul>
 8008534:	ec45 4b10 	vmov	d0, r4, r5
 8008538:	4680      	mov	r8, r0
 800853a:	4689      	mov	r9, r1
 800853c:	f000 fb72 	bl	8008c24 <__ieee754_sqrt>
 8008540:	a331      	add	r3, pc, #196	; (adr r3, 8008608 <__ieee754_acos+0x2b8>)
 8008542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008546:	4620      	mov	r0, r4
 8008548:	4629      	mov	r1, r5
 800854a:	ec57 6b10 	vmov	r6, r7, d0
 800854e:	f7f8 f84b 	bl	80005e8 <__aeabi_dmul>
 8008552:	a32f      	add	r3, pc, #188	; (adr r3, 8008610 <__ieee754_acos+0x2c0>)
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	f7f7 fe8e 	bl	8000278 <__aeabi_dsub>
 800855c:	4622      	mov	r2, r4
 800855e:	462b      	mov	r3, r5
 8008560:	f7f8 f842 	bl	80005e8 <__aeabi_dmul>
 8008564:	a32c      	add	r3, pc, #176	; (adr r3, 8008618 <__ieee754_acos+0x2c8>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f7f7 fe87 	bl	800027c <__adddf3>
 800856e:	4622      	mov	r2, r4
 8008570:	462b      	mov	r3, r5
 8008572:	f7f8 f839 	bl	80005e8 <__aeabi_dmul>
 8008576:	a32a      	add	r3, pc, #168	; (adr r3, 8008620 <__ieee754_acos+0x2d0>)
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f7f7 fe7c 	bl	8000278 <__aeabi_dsub>
 8008580:	4622      	mov	r2, r4
 8008582:	462b      	mov	r3, r5
 8008584:	f7f8 f830 	bl	80005e8 <__aeabi_dmul>
 8008588:	4b2e      	ldr	r3, [pc, #184]	; (8008644 <__ieee754_acos+0x2f4>)
 800858a:	2200      	movs	r2, #0
 800858c:	f7f7 fe76 	bl	800027c <__adddf3>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4640      	mov	r0, r8
 8008596:	4649      	mov	r1, r9
 8008598:	f7f8 f950 	bl	800083c <__aeabi_ddiv>
 800859c:	4632      	mov	r2, r6
 800859e:	463b      	mov	r3, r7
 80085a0:	f7f8 f822 	bl	80005e8 <__aeabi_dmul>
 80085a4:	a320      	add	r3, pc, #128	; (adr r3, 8008628 <__ieee754_acos+0x2d8>)
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	f7f7 fe65 	bl	8000278 <__aeabi_dsub>
 80085ae:	4632      	mov	r2, r6
 80085b0:	463b      	mov	r3, r7
 80085b2:	f7f7 fe63 	bl	800027c <__adddf3>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	f7f7 fe5f 	bl	800027c <__adddf3>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	a103      	add	r1, pc, #12	; (adr r1, 80085d0 <__ieee754_acos+0x280>)
 80085c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085c8:	e76f      	b.n	80084aa <__ieee754_acos+0x15a>
 80085ca:	bf00      	nop
 80085cc:	f3af 8000 	nop.w
 80085d0:	54442d18 	.word	0x54442d18
 80085d4:	400921fb 	.word	0x400921fb
 80085d8:	0dfdf709 	.word	0x0dfdf709
 80085dc:	3f023de1 	.word	0x3f023de1
 80085e0:	7501b288 	.word	0x7501b288
 80085e4:	3f49efe0 	.word	0x3f49efe0
 80085e8:	b5688f3b 	.word	0xb5688f3b
 80085ec:	3fa48228 	.word	0x3fa48228
 80085f0:	0e884455 	.word	0x0e884455
 80085f4:	3fc9c155 	.word	0x3fc9c155
 80085f8:	03eb6f7d 	.word	0x03eb6f7d
 80085fc:	3fd4d612 	.word	0x3fd4d612
 8008600:	55555555 	.word	0x55555555
 8008604:	3fc55555 	.word	0x3fc55555
 8008608:	b12e9282 	.word	0xb12e9282
 800860c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008610:	1b8d0159 	.word	0x1b8d0159
 8008614:	3fe6066c 	.word	0x3fe6066c
 8008618:	9c598ac8 	.word	0x9c598ac8
 800861c:	40002ae5 	.word	0x40002ae5
 8008620:	1c8a2d4b 	.word	0x1c8a2d4b
 8008624:	40033a27 	.word	0x40033a27
 8008628:	33145c07 	.word	0x33145c07
 800862c:	3c91a626 	.word	0x3c91a626
 8008630:	54442d18 	.word	0x54442d18
 8008634:	3ff921fb 	.word	0x3ff921fb
 8008638:	3fefffff 	.word	0x3fefffff
 800863c:	3fdfffff 	.word	0x3fdfffff
 8008640:	3c600000 	.word	0x3c600000
 8008644:	3ff00000 	.word	0x3ff00000
 8008648:	3fe00000 	.word	0x3fe00000
 800864c:	ee10 2a10 	vmov	r2, s0
 8008650:	462b      	mov	r3, r5
 8008652:	496d      	ldr	r1, [pc, #436]	; (8008808 <__ieee754_acos+0x4b8>)
 8008654:	2000      	movs	r0, #0
 8008656:	f7f7 fe0f 	bl	8000278 <__aeabi_dsub>
 800865a:	4b6c      	ldr	r3, [pc, #432]	; (800880c <__ieee754_acos+0x4bc>)
 800865c:	2200      	movs	r2, #0
 800865e:	f7f7 ffc3 	bl	80005e8 <__aeabi_dmul>
 8008662:	4604      	mov	r4, r0
 8008664:	460d      	mov	r5, r1
 8008666:	ec45 4b10 	vmov	d0, r4, r5
 800866a:	f000 fadb 	bl	8008c24 <__ieee754_sqrt>
 800866e:	a34e      	add	r3, pc, #312	; (adr r3, 80087a8 <__ieee754_acos+0x458>)
 8008670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008674:	4620      	mov	r0, r4
 8008676:	4629      	mov	r1, r5
 8008678:	ec59 8b10 	vmov	r8, r9, d0
 800867c:	f7f7 ffb4 	bl	80005e8 <__aeabi_dmul>
 8008680:	a34b      	add	r3, pc, #300	; (adr r3, 80087b0 <__ieee754_acos+0x460>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f7 fdf9 	bl	800027c <__adddf3>
 800868a:	4622      	mov	r2, r4
 800868c:	462b      	mov	r3, r5
 800868e:	f7f7 ffab 	bl	80005e8 <__aeabi_dmul>
 8008692:	a349      	add	r3, pc, #292	; (adr r3, 80087b8 <__ieee754_acos+0x468>)
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	f7f7 fdee 	bl	8000278 <__aeabi_dsub>
 800869c:	4622      	mov	r2, r4
 800869e:	462b      	mov	r3, r5
 80086a0:	f7f7 ffa2 	bl	80005e8 <__aeabi_dmul>
 80086a4:	a346      	add	r3, pc, #280	; (adr r3, 80087c0 <__ieee754_acos+0x470>)
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	f7f7 fde7 	bl	800027c <__adddf3>
 80086ae:	4622      	mov	r2, r4
 80086b0:	462b      	mov	r3, r5
 80086b2:	f7f7 ff99 	bl	80005e8 <__aeabi_dmul>
 80086b6:	a344      	add	r3, pc, #272	; (adr r3, 80087c8 <__ieee754_acos+0x478>)
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	f7f7 fddc 	bl	8000278 <__aeabi_dsub>
 80086c0:	4622      	mov	r2, r4
 80086c2:	462b      	mov	r3, r5
 80086c4:	f7f7 ff90 	bl	80005e8 <__aeabi_dmul>
 80086c8:	a341      	add	r3, pc, #260	; (adr r3, 80087d0 <__ieee754_acos+0x480>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f7f7 fdd5 	bl	800027c <__adddf3>
 80086d2:	4622      	mov	r2, r4
 80086d4:	462b      	mov	r3, r5
 80086d6:	f7f7 ff87 	bl	80005e8 <__aeabi_dmul>
 80086da:	a33f      	add	r3, pc, #252	; (adr r3, 80087d8 <__ieee754_acos+0x488>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	4682      	mov	sl, r0
 80086e2:	468b      	mov	fp, r1
 80086e4:	4620      	mov	r0, r4
 80086e6:	4629      	mov	r1, r5
 80086e8:	f7f7 ff7e 	bl	80005e8 <__aeabi_dmul>
 80086ec:	a33c      	add	r3, pc, #240	; (adr r3, 80087e0 <__ieee754_acos+0x490>)
 80086ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f2:	f7f7 fdc1 	bl	8000278 <__aeabi_dsub>
 80086f6:	4622      	mov	r2, r4
 80086f8:	462b      	mov	r3, r5
 80086fa:	f7f7 ff75 	bl	80005e8 <__aeabi_dmul>
 80086fe:	a33a      	add	r3, pc, #232	; (adr r3, 80087e8 <__ieee754_acos+0x498>)
 8008700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008704:	f7f7 fdba 	bl	800027c <__adddf3>
 8008708:	4622      	mov	r2, r4
 800870a:	462b      	mov	r3, r5
 800870c:	f7f7 ff6c 	bl	80005e8 <__aeabi_dmul>
 8008710:	a337      	add	r3, pc, #220	; (adr r3, 80087f0 <__ieee754_acos+0x4a0>)
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	f7f7 fdaf 	bl	8000278 <__aeabi_dsub>
 800871a:	4622      	mov	r2, r4
 800871c:	462b      	mov	r3, r5
 800871e:	f7f7 ff63 	bl	80005e8 <__aeabi_dmul>
 8008722:	4b39      	ldr	r3, [pc, #228]	; (8008808 <__ieee754_acos+0x4b8>)
 8008724:	2200      	movs	r2, #0
 8008726:	f7f7 fda9 	bl	800027c <__adddf3>
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	4650      	mov	r0, sl
 8008730:	4659      	mov	r1, fp
 8008732:	f7f8 f883 	bl	800083c <__aeabi_ddiv>
 8008736:	4642      	mov	r2, r8
 8008738:	464b      	mov	r3, r9
 800873a:	f7f7 ff55 	bl	80005e8 <__aeabi_dmul>
 800873e:	2600      	movs	r6, #0
 8008740:	4682      	mov	sl, r0
 8008742:	468b      	mov	fp, r1
 8008744:	4632      	mov	r2, r6
 8008746:	464b      	mov	r3, r9
 8008748:	4630      	mov	r0, r6
 800874a:	4649      	mov	r1, r9
 800874c:	f7f7 ff4c 	bl	80005e8 <__aeabi_dmul>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4620      	mov	r0, r4
 8008756:	4629      	mov	r1, r5
 8008758:	f7f7 fd8e 	bl	8000278 <__aeabi_dsub>
 800875c:	4632      	mov	r2, r6
 800875e:	4604      	mov	r4, r0
 8008760:	460d      	mov	r5, r1
 8008762:	464b      	mov	r3, r9
 8008764:	4640      	mov	r0, r8
 8008766:	4649      	mov	r1, r9
 8008768:	f7f7 fd88 	bl	800027c <__adddf3>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	4620      	mov	r0, r4
 8008772:	4629      	mov	r1, r5
 8008774:	f7f8 f862 	bl	800083c <__aeabi_ddiv>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4650      	mov	r0, sl
 800877e:	4659      	mov	r1, fp
 8008780:	f7f7 fd7c 	bl	800027c <__adddf3>
 8008784:	4632      	mov	r2, r6
 8008786:	464b      	mov	r3, r9
 8008788:	f7f7 fd78 	bl	800027c <__adddf3>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	f7f7 fd74 	bl	800027c <__adddf3>
 8008794:	e5fe      	b.n	8008394 <__ieee754_acos+0x44>
 8008796:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80087f8 <__ieee754_acos+0x4a8>
 800879a:	e5ed      	b.n	8008378 <__ieee754_acos+0x28>
 800879c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8008800 <__ieee754_acos+0x4b0>
 80087a0:	e5ea      	b.n	8008378 <__ieee754_acos+0x28>
 80087a2:	bf00      	nop
 80087a4:	f3af 8000 	nop.w
 80087a8:	0dfdf709 	.word	0x0dfdf709
 80087ac:	3f023de1 	.word	0x3f023de1
 80087b0:	7501b288 	.word	0x7501b288
 80087b4:	3f49efe0 	.word	0x3f49efe0
 80087b8:	b5688f3b 	.word	0xb5688f3b
 80087bc:	3fa48228 	.word	0x3fa48228
 80087c0:	0e884455 	.word	0x0e884455
 80087c4:	3fc9c155 	.word	0x3fc9c155
 80087c8:	03eb6f7d 	.word	0x03eb6f7d
 80087cc:	3fd4d612 	.word	0x3fd4d612
 80087d0:	55555555 	.word	0x55555555
 80087d4:	3fc55555 	.word	0x3fc55555
 80087d8:	b12e9282 	.word	0xb12e9282
 80087dc:	3fb3b8c5 	.word	0x3fb3b8c5
 80087e0:	1b8d0159 	.word	0x1b8d0159
 80087e4:	3fe6066c 	.word	0x3fe6066c
 80087e8:	9c598ac8 	.word	0x9c598ac8
 80087ec:	40002ae5 	.word	0x40002ae5
 80087f0:	1c8a2d4b 	.word	0x1c8a2d4b
 80087f4:	40033a27 	.word	0x40033a27
	...
 8008800:	54442d18 	.word	0x54442d18
 8008804:	3ff921fb 	.word	0x3ff921fb
 8008808:	3ff00000 	.word	0x3ff00000
 800880c:	3fe00000 	.word	0x3fe00000

08008810 <__ieee754_rem_pio2>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	ed2d 8b02 	vpush	{d8}
 8008818:	ec55 4b10 	vmov	r4, r5, d0
 800881c:	4bca      	ldr	r3, [pc, #808]	; (8008b48 <__ieee754_rem_pio2+0x338>)
 800881e:	b08b      	sub	sp, #44	; 0x2c
 8008820:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008824:	4598      	cmp	r8, r3
 8008826:	4682      	mov	sl, r0
 8008828:	9502      	str	r5, [sp, #8]
 800882a:	dc08      	bgt.n	800883e <__ieee754_rem_pio2+0x2e>
 800882c:	2200      	movs	r2, #0
 800882e:	2300      	movs	r3, #0
 8008830:	ed80 0b00 	vstr	d0, [r0]
 8008834:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008838:	f04f 0b00 	mov.w	fp, #0
 800883c:	e028      	b.n	8008890 <__ieee754_rem_pio2+0x80>
 800883e:	4bc3      	ldr	r3, [pc, #780]	; (8008b4c <__ieee754_rem_pio2+0x33c>)
 8008840:	4598      	cmp	r8, r3
 8008842:	dc78      	bgt.n	8008936 <__ieee754_rem_pio2+0x126>
 8008844:	9b02      	ldr	r3, [sp, #8]
 8008846:	4ec2      	ldr	r6, [pc, #776]	; (8008b50 <__ieee754_rem_pio2+0x340>)
 8008848:	2b00      	cmp	r3, #0
 800884a:	ee10 0a10 	vmov	r0, s0
 800884e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x300>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	4629      	mov	r1, r5
 8008856:	dd39      	ble.n	80088cc <__ieee754_rem_pio2+0xbc>
 8008858:	f7f7 fd0e 	bl	8000278 <__aeabi_dsub>
 800885c:	45b0      	cmp	r8, r6
 800885e:	4604      	mov	r4, r0
 8008860:	460d      	mov	r5, r1
 8008862:	d01b      	beq.n	800889c <__ieee754_rem_pio2+0x8c>
 8008864:	a3ac      	add	r3, pc, #688	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x308>)
 8008866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886a:	f7f7 fd05 	bl	8000278 <__aeabi_dsub>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	e9ca 2300 	strd	r2, r3, [sl]
 8008876:	4620      	mov	r0, r4
 8008878:	4629      	mov	r1, r5
 800887a:	f7f7 fcfd 	bl	8000278 <__aeabi_dsub>
 800887e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x308>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f7f7 fcf8 	bl	8000278 <__aeabi_dsub>
 8008888:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800888c:	f04f 0b01 	mov.w	fp, #1
 8008890:	4658      	mov	r0, fp
 8008892:	b00b      	add	sp, #44	; 0x2c
 8008894:	ecbd 8b02 	vpop	{d8}
 8008898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x310>)
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	f7f7 fce9 	bl	8000278 <__aeabi_dsub>
 80088a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x318>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	4604      	mov	r4, r0
 80088ae:	460d      	mov	r5, r1
 80088b0:	f7f7 fce2 	bl	8000278 <__aeabi_dsub>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	e9ca 2300 	strd	r2, r3, [sl]
 80088bc:	4620      	mov	r0, r4
 80088be:	4629      	mov	r1, r5
 80088c0:	f7f7 fcda 	bl	8000278 <__aeabi_dsub>
 80088c4:	a398      	add	r3, pc, #608	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x318>)
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	e7db      	b.n	8008884 <__ieee754_rem_pio2+0x74>
 80088cc:	f7f7 fcd6 	bl	800027c <__adddf3>
 80088d0:	45b0      	cmp	r8, r6
 80088d2:	4604      	mov	r4, r0
 80088d4:	460d      	mov	r5, r1
 80088d6:	d016      	beq.n	8008906 <__ieee754_rem_pio2+0xf6>
 80088d8:	a38f      	add	r3, pc, #572	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x308>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 fccd 	bl	800027c <__adddf3>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	e9ca 2300 	strd	r2, r3, [sl]
 80088ea:	4620      	mov	r0, r4
 80088ec:	4629      	mov	r1, r5
 80088ee:	f7f7 fcc3 	bl	8000278 <__aeabi_dsub>
 80088f2:	a389      	add	r3, pc, #548	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x308>)
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f7f7 fcc0 	bl	800027c <__adddf3>
 80088fc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008900:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008904:	e7c4      	b.n	8008890 <__ieee754_rem_pio2+0x80>
 8008906:	a386      	add	r3, pc, #536	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x310>)
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	f7f7 fcb6 	bl	800027c <__adddf3>
 8008910:	a385      	add	r3, pc, #532	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x318>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	4604      	mov	r4, r0
 8008918:	460d      	mov	r5, r1
 800891a:	f7f7 fcaf 	bl	800027c <__adddf3>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	e9ca 2300 	strd	r2, r3, [sl]
 8008926:	4620      	mov	r0, r4
 8008928:	4629      	mov	r1, r5
 800892a:	f7f7 fca5 	bl	8000278 <__aeabi_dsub>
 800892e:	a37e      	add	r3, pc, #504	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x318>)
 8008930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008934:	e7e0      	b.n	80088f8 <__ieee754_rem_pio2+0xe8>
 8008936:	4b87      	ldr	r3, [pc, #540]	; (8008b54 <__ieee754_rem_pio2+0x344>)
 8008938:	4598      	cmp	r8, r3
 800893a:	f300 80d9 	bgt.w	8008af0 <__ieee754_rem_pio2+0x2e0>
 800893e:	f000 feed 	bl	800971c <fabs>
 8008942:	ec55 4b10 	vmov	r4, r5, d0
 8008946:	ee10 0a10 	vmov	r0, s0
 800894a:	a379      	add	r3, pc, #484	; (adr r3, 8008b30 <__ieee754_rem_pio2+0x320>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	4629      	mov	r1, r5
 8008952:	f7f7 fe49 	bl	80005e8 <__aeabi_dmul>
 8008956:	4b80      	ldr	r3, [pc, #512]	; (8008b58 <__ieee754_rem_pio2+0x348>)
 8008958:	2200      	movs	r2, #0
 800895a:	f7f7 fc8f 	bl	800027c <__adddf3>
 800895e:	f7f8 f8f3 	bl	8000b48 <__aeabi_d2iz>
 8008962:	4683      	mov	fp, r0
 8008964:	f7f7 fdd6 	bl	8000514 <__aeabi_i2d>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	ec43 2b18 	vmov	d8, r2, r3
 8008970:	a367      	add	r3, pc, #412	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x300>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f7f7 fe37 	bl	80005e8 <__aeabi_dmul>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4620      	mov	r0, r4
 8008980:	4629      	mov	r1, r5
 8008982:	f7f7 fc79 	bl	8000278 <__aeabi_dsub>
 8008986:	a364      	add	r3, pc, #400	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x308>)
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	4606      	mov	r6, r0
 800898e:	460f      	mov	r7, r1
 8008990:	ec51 0b18 	vmov	r0, r1, d8
 8008994:	f7f7 fe28 	bl	80005e8 <__aeabi_dmul>
 8008998:	f1bb 0f1f 	cmp.w	fp, #31
 800899c:	4604      	mov	r4, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	dc0d      	bgt.n	80089be <__ieee754_rem_pio2+0x1ae>
 80089a2:	4b6e      	ldr	r3, [pc, #440]	; (8008b5c <__ieee754_rem_pio2+0x34c>)
 80089a4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80089a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ac:	4543      	cmp	r3, r8
 80089ae:	d006      	beq.n	80089be <__ieee754_rem_pio2+0x1ae>
 80089b0:	4622      	mov	r2, r4
 80089b2:	462b      	mov	r3, r5
 80089b4:	4630      	mov	r0, r6
 80089b6:	4639      	mov	r1, r7
 80089b8:	f7f7 fc5e 	bl	8000278 <__aeabi_dsub>
 80089bc:	e00f      	b.n	80089de <__ieee754_rem_pio2+0x1ce>
 80089be:	462b      	mov	r3, r5
 80089c0:	4622      	mov	r2, r4
 80089c2:	4630      	mov	r0, r6
 80089c4:	4639      	mov	r1, r7
 80089c6:	f7f7 fc57 	bl	8000278 <__aeabi_dsub>
 80089ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80089ce:	9303      	str	r3, [sp, #12]
 80089d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80089d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80089d8:	f1b8 0f10 	cmp.w	r8, #16
 80089dc:	dc02      	bgt.n	80089e4 <__ieee754_rem_pio2+0x1d4>
 80089de:	e9ca 0100 	strd	r0, r1, [sl]
 80089e2:	e039      	b.n	8008a58 <__ieee754_rem_pio2+0x248>
 80089e4:	a34e      	add	r3, pc, #312	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x310>)
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	ec51 0b18 	vmov	r0, r1, d8
 80089ee:	f7f7 fdfb 	bl	80005e8 <__aeabi_dmul>
 80089f2:	4604      	mov	r4, r0
 80089f4:	460d      	mov	r5, r1
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4630      	mov	r0, r6
 80089fc:	4639      	mov	r1, r7
 80089fe:	f7f7 fc3b 	bl	8000278 <__aeabi_dsub>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4680      	mov	r8, r0
 8008a08:	4689      	mov	r9, r1
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	f7f7 fc33 	bl	8000278 <__aeabi_dsub>
 8008a12:	4622      	mov	r2, r4
 8008a14:	462b      	mov	r3, r5
 8008a16:	f7f7 fc2f 	bl	8000278 <__aeabi_dsub>
 8008a1a:	a343      	add	r3, pc, #268	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x318>)
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	4604      	mov	r4, r0
 8008a22:	460d      	mov	r5, r1
 8008a24:	ec51 0b18 	vmov	r0, r1, d8
 8008a28:	f7f7 fdde 	bl	80005e8 <__aeabi_dmul>
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	462b      	mov	r3, r5
 8008a30:	f7f7 fc22 	bl	8000278 <__aeabi_dsub>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4604      	mov	r4, r0
 8008a3a:	460d      	mov	r5, r1
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	4649      	mov	r1, r9
 8008a40:	f7f7 fc1a 	bl	8000278 <__aeabi_dsub>
 8008a44:	9a03      	ldr	r2, [sp, #12]
 8008a46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	2b31      	cmp	r3, #49	; 0x31
 8008a4e:	dc24      	bgt.n	8008a9a <__ieee754_rem_pio2+0x28a>
 8008a50:	e9ca 0100 	strd	r0, r1, [sl]
 8008a54:	4646      	mov	r6, r8
 8008a56:	464f      	mov	r7, r9
 8008a58:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	4642      	mov	r2, r8
 8008a60:	464b      	mov	r3, r9
 8008a62:	4639      	mov	r1, r7
 8008a64:	f7f7 fc08 	bl	8000278 <__aeabi_dsub>
 8008a68:	462b      	mov	r3, r5
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	f7f7 fc04 	bl	8000278 <__aeabi_dsub>
 8008a70:	9b02      	ldr	r3, [sp, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a78:	f6bf af0a 	bge.w	8008890 <__ieee754_rem_pio2+0x80>
 8008a7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a80:	f8ca 3004 	str.w	r3, [sl, #4]
 8008a84:	f8ca 8000 	str.w	r8, [sl]
 8008a88:	f8ca 0008 	str.w	r0, [sl, #8]
 8008a8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a90:	f8ca 300c 	str.w	r3, [sl, #12]
 8008a94:	f1cb 0b00 	rsb	fp, fp, #0
 8008a98:	e6fa      	b.n	8008890 <__ieee754_rem_pio2+0x80>
 8008a9a:	a327      	add	r3, pc, #156	; (adr r3, 8008b38 <__ieee754_rem_pio2+0x328>)
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	ec51 0b18 	vmov	r0, r1, d8
 8008aa4:	f7f7 fda0 	bl	80005e8 <__aeabi_dmul>
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	460d      	mov	r5, r1
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	f7f7 fbe0 	bl	8000278 <__aeabi_dsub>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	4606      	mov	r6, r0
 8008abe:	460f      	mov	r7, r1
 8008ac0:	4640      	mov	r0, r8
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	f7f7 fbd8 	bl	8000278 <__aeabi_dsub>
 8008ac8:	4622      	mov	r2, r4
 8008aca:	462b      	mov	r3, r5
 8008acc:	f7f7 fbd4 	bl	8000278 <__aeabi_dsub>
 8008ad0:	a31b      	add	r3, pc, #108	; (adr r3, 8008b40 <__ieee754_rem_pio2+0x330>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	460d      	mov	r5, r1
 8008ada:	ec51 0b18 	vmov	r0, r1, d8
 8008ade:	f7f7 fd83 	bl	80005e8 <__aeabi_dmul>
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	462b      	mov	r3, r5
 8008ae6:	f7f7 fbc7 	bl	8000278 <__aeabi_dsub>
 8008aea:	4604      	mov	r4, r0
 8008aec:	460d      	mov	r5, r1
 8008aee:	e75f      	b.n	80089b0 <__ieee754_rem_pio2+0x1a0>
 8008af0:	4b1b      	ldr	r3, [pc, #108]	; (8008b60 <__ieee754_rem_pio2+0x350>)
 8008af2:	4598      	cmp	r8, r3
 8008af4:	dd36      	ble.n	8008b64 <__ieee754_rem_pio2+0x354>
 8008af6:	ee10 2a10 	vmov	r2, s0
 8008afa:	462b      	mov	r3, r5
 8008afc:	4620      	mov	r0, r4
 8008afe:	4629      	mov	r1, r5
 8008b00:	f7f7 fbba 	bl	8000278 <__aeabi_dsub>
 8008b04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008b08:	e9ca 0100 	strd	r0, r1, [sl]
 8008b0c:	e694      	b.n	8008838 <__ieee754_rem_pio2+0x28>
 8008b0e:	bf00      	nop
 8008b10:	54400000 	.word	0x54400000
 8008b14:	3ff921fb 	.word	0x3ff921fb
 8008b18:	1a626331 	.word	0x1a626331
 8008b1c:	3dd0b461 	.word	0x3dd0b461
 8008b20:	1a600000 	.word	0x1a600000
 8008b24:	3dd0b461 	.word	0x3dd0b461
 8008b28:	2e037073 	.word	0x2e037073
 8008b2c:	3ba3198a 	.word	0x3ba3198a
 8008b30:	6dc9c883 	.word	0x6dc9c883
 8008b34:	3fe45f30 	.word	0x3fe45f30
 8008b38:	2e000000 	.word	0x2e000000
 8008b3c:	3ba3198a 	.word	0x3ba3198a
 8008b40:	252049c1 	.word	0x252049c1
 8008b44:	397b839a 	.word	0x397b839a
 8008b48:	3fe921fb 	.word	0x3fe921fb
 8008b4c:	4002d97b 	.word	0x4002d97b
 8008b50:	3ff921fb 	.word	0x3ff921fb
 8008b54:	413921fb 	.word	0x413921fb
 8008b58:	3fe00000 	.word	0x3fe00000
 8008b5c:	08009b44 	.word	0x08009b44
 8008b60:	7fefffff 	.word	0x7fefffff
 8008b64:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008b68:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008b6c:	ee10 0a10 	vmov	r0, s0
 8008b70:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008b74:	ee10 6a10 	vmov	r6, s0
 8008b78:	460f      	mov	r7, r1
 8008b7a:	f7f7 ffe5 	bl	8000b48 <__aeabi_d2iz>
 8008b7e:	f7f7 fcc9 	bl	8000514 <__aeabi_i2d>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4630      	mov	r0, r6
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b8e:	f7f7 fb73 	bl	8000278 <__aeabi_dsub>
 8008b92:	4b22      	ldr	r3, [pc, #136]	; (8008c1c <__ieee754_rem_pio2+0x40c>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	f7f7 fd27 	bl	80005e8 <__aeabi_dmul>
 8008b9a:	460f      	mov	r7, r1
 8008b9c:	4606      	mov	r6, r0
 8008b9e:	f7f7 ffd3 	bl	8000b48 <__aeabi_d2iz>
 8008ba2:	f7f7 fcb7 	bl	8000514 <__aeabi_i2d>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4630      	mov	r0, r6
 8008bac:	4639      	mov	r1, r7
 8008bae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008bb2:	f7f7 fb61 	bl	8000278 <__aeabi_dsub>
 8008bb6:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <__ieee754_rem_pio2+0x40c>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f7f7 fd15 	bl	80005e8 <__aeabi_dmul>
 8008bbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008bc2:	ad04      	add	r5, sp, #16
 8008bc4:	f04f 0803 	mov.w	r8, #3
 8008bc8:	46a9      	mov	r9, r5
 8008bca:	2600      	movs	r6, #0
 8008bcc:	2700      	movs	r7, #0
 8008bce:	4632      	mov	r2, r6
 8008bd0:	463b      	mov	r3, r7
 8008bd2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008bd6:	46c3      	mov	fp, r8
 8008bd8:	3d08      	subs	r5, #8
 8008bda:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008bde:	f7f7 ff6b 	bl	8000ab8 <__aeabi_dcmpeq>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d1f3      	bne.n	8008bce <__ieee754_rem_pio2+0x3be>
 8008be6:	4b0e      	ldr	r3, [pc, #56]	; (8008c20 <__ieee754_rem_pio2+0x410>)
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	2302      	movs	r3, #2
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	4622      	mov	r2, r4
 8008bf0:	465b      	mov	r3, fp
 8008bf2:	4651      	mov	r1, sl
 8008bf4:	4648      	mov	r0, r9
 8008bf6:	f000 f993 	bl	8008f20 <__kernel_rem_pio2>
 8008bfa:	9b02      	ldr	r3, [sp, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	4683      	mov	fp, r0
 8008c00:	f6bf ae46 	bge.w	8008890 <__ieee754_rem_pio2+0x80>
 8008c04:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008c08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c0c:	f8ca 3004 	str.w	r3, [sl, #4]
 8008c10:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008c14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c18:	e73a      	b.n	8008a90 <__ieee754_rem_pio2+0x280>
 8008c1a:	bf00      	nop
 8008c1c:	41700000 	.word	0x41700000
 8008c20:	08009bc4 	.word	0x08009bc4

08008c24 <__ieee754_sqrt>:
 8008c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c28:	ec55 4b10 	vmov	r4, r5, d0
 8008c2c:	4e56      	ldr	r6, [pc, #344]	; (8008d88 <__ieee754_sqrt+0x164>)
 8008c2e:	43ae      	bics	r6, r5
 8008c30:	ee10 0a10 	vmov	r0, s0
 8008c34:	ee10 3a10 	vmov	r3, s0
 8008c38:	4629      	mov	r1, r5
 8008c3a:	462a      	mov	r2, r5
 8008c3c:	d110      	bne.n	8008c60 <__ieee754_sqrt+0x3c>
 8008c3e:	ee10 2a10 	vmov	r2, s0
 8008c42:	462b      	mov	r3, r5
 8008c44:	f7f7 fcd0 	bl	80005e8 <__aeabi_dmul>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	4629      	mov	r1, r5
 8008c50:	f7f7 fb14 	bl	800027c <__adddf3>
 8008c54:	4604      	mov	r4, r0
 8008c56:	460d      	mov	r5, r1
 8008c58:	ec45 4b10 	vmov	d0, r4, r5
 8008c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	dc10      	bgt.n	8008c86 <__ieee754_sqrt+0x62>
 8008c64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c68:	4330      	orrs	r0, r6
 8008c6a:	d0f5      	beq.n	8008c58 <__ieee754_sqrt+0x34>
 8008c6c:	b15d      	cbz	r5, 8008c86 <__ieee754_sqrt+0x62>
 8008c6e:	ee10 2a10 	vmov	r2, s0
 8008c72:	462b      	mov	r3, r5
 8008c74:	ee10 0a10 	vmov	r0, s0
 8008c78:	f7f7 fafe 	bl	8000278 <__aeabi_dsub>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	f7f7 fddc 	bl	800083c <__aeabi_ddiv>
 8008c84:	e7e6      	b.n	8008c54 <__ieee754_sqrt+0x30>
 8008c86:	1509      	asrs	r1, r1, #20
 8008c88:	d076      	beq.n	8008d78 <__ieee754_sqrt+0x154>
 8008c8a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008c8e:	07ce      	lsls	r6, r1, #31
 8008c90:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008c94:	bf5e      	ittt	pl
 8008c96:	0fda      	lsrpl	r2, r3, #31
 8008c98:	005b      	lslpl	r3, r3, #1
 8008c9a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008c9e:	0fda      	lsrs	r2, r3, #31
 8008ca0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008ca4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008ca8:	2000      	movs	r0, #0
 8008caa:	106d      	asrs	r5, r5, #1
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	f04f 0e16 	mov.w	lr, #22
 8008cb2:	4684      	mov	ip, r0
 8008cb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cb8:	eb0c 0401 	add.w	r4, ip, r1
 8008cbc:	4294      	cmp	r4, r2
 8008cbe:	bfde      	ittt	le
 8008cc0:	1b12      	suble	r2, r2, r4
 8008cc2:	eb04 0c01 	addle.w	ip, r4, r1
 8008cc6:	1840      	addle	r0, r0, r1
 8008cc8:	0052      	lsls	r2, r2, #1
 8008cca:	f1be 0e01 	subs.w	lr, lr, #1
 8008cce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008cd2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008cd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008cda:	d1ed      	bne.n	8008cb8 <__ieee754_sqrt+0x94>
 8008cdc:	4671      	mov	r1, lr
 8008cde:	2720      	movs	r7, #32
 8008ce0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008ce4:	4562      	cmp	r2, ip
 8008ce6:	eb04 060e 	add.w	r6, r4, lr
 8008cea:	dc02      	bgt.n	8008cf2 <__ieee754_sqrt+0xce>
 8008cec:	d113      	bne.n	8008d16 <__ieee754_sqrt+0xf2>
 8008cee:	429e      	cmp	r6, r3
 8008cf0:	d811      	bhi.n	8008d16 <__ieee754_sqrt+0xf2>
 8008cf2:	2e00      	cmp	r6, #0
 8008cf4:	eb06 0e04 	add.w	lr, r6, r4
 8008cf8:	da43      	bge.n	8008d82 <__ieee754_sqrt+0x15e>
 8008cfa:	f1be 0f00 	cmp.w	lr, #0
 8008cfe:	db40      	blt.n	8008d82 <__ieee754_sqrt+0x15e>
 8008d00:	f10c 0801 	add.w	r8, ip, #1
 8008d04:	eba2 020c 	sub.w	r2, r2, ip
 8008d08:	429e      	cmp	r6, r3
 8008d0a:	bf88      	it	hi
 8008d0c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008d10:	1b9b      	subs	r3, r3, r6
 8008d12:	4421      	add	r1, r4
 8008d14:	46c4      	mov	ip, r8
 8008d16:	0052      	lsls	r2, r2, #1
 8008d18:	3f01      	subs	r7, #1
 8008d1a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008d1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008d22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d26:	d1dd      	bne.n	8008ce4 <__ieee754_sqrt+0xc0>
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	d006      	beq.n	8008d3a <__ieee754_sqrt+0x116>
 8008d2c:	1c4c      	adds	r4, r1, #1
 8008d2e:	bf13      	iteet	ne
 8008d30:	3101      	addne	r1, #1
 8008d32:	3001      	addeq	r0, #1
 8008d34:	4639      	moveq	r1, r7
 8008d36:	f021 0101 	bicne.w	r1, r1, #1
 8008d3a:	1043      	asrs	r3, r0, #1
 8008d3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008d40:	0849      	lsrs	r1, r1, #1
 8008d42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008d46:	07c2      	lsls	r2, r0, #31
 8008d48:	bf48      	it	mi
 8008d4a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008d4e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008d52:	460c      	mov	r4, r1
 8008d54:	463d      	mov	r5, r7
 8008d56:	e77f      	b.n	8008c58 <__ieee754_sqrt+0x34>
 8008d58:	0ada      	lsrs	r2, r3, #11
 8008d5a:	3815      	subs	r0, #21
 8008d5c:	055b      	lsls	r3, r3, #21
 8008d5e:	2a00      	cmp	r2, #0
 8008d60:	d0fa      	beq.n	8008d58 <__ieee754_sqrt+0x134>
 8008d62:	02d7      	lsls	r7, r2, #11
 8008d64:	d50a      	bpl.n	8008d7c <__ieee754_sqrt+0x158>
 8008d66:	f1c1 0420 	rsb	r4, r1, #32
 8008d6a:	fa23 f404 	lsr.w	r4, r3, r4
 8008d6e:	1e4d      	subs	r5, r1, #1
 8008d70:	408b      	lsls	r3, r1
 8008d72:	4322      	orrs	r2, r4
 8008d74:	1b41      	subs	r1, r0, r5
 8008d76:	e788      	b.n	8008c8a <__ieee754_sqrt+0x66>
 8008d78:	4608      	mov	r0, r1
 8008d7a:	e7f0      	b.n	8008d5e <__ieee754_sqrt+0x13a>
 8008d7c:	0052      	lsls	r2, r2, #1
 8008d7e:	3101      	adds	r1, #1
 8008d80:	e7ef      	b.n	8008d62 <__ieee754_sqrt+0x13e>
 8008d82:	46e0      	mov	r8, ip
 8008d84:	e7be      	b.n	8008d04 <__ieee754_sqrt+0xe0>
 8008d86:	bf00      	nop
 8008d88:	7ff00000 	.word	0x7ff00000
 8008d8c:	00000000 	.word	0x00000000

08008d90 <__kernel_cos>:
 8008d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	ec57 6b10 	vmov	r6, r7, d0
 8008d98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008d9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008da0:	ed8d 1b00 	vstr	d1, [sp]
 8008da4:	da07      	bge.n	8008db6 <__kernel_cos+0x26>
 8008da6:	ee10 0a10 	vmov	r0, s0
 8008daa:	4639      	mov	r1, r7
 8008dac:	f7f7 fecc 	bl	8000b48 <__aeabi_d2iz>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	f000 8088 	beq.w	8008ec6 <__kernel_cos+0x136>
 8008db6:	4632      	mov	r2, r6
 8008db8:	463b      	mov	r3, r7
 8008dba:	4630      	mov	r0, r6
 8008dbc:	4639      	mov	r1, r7
 8008dbe:	f7f7 fc13 	bl	80005e8 <__aeabi_dmul>
 8008dc2:	4b51      	ldr	r3, [pc, #324]	; (8008f08 <__kernel_cos+0x178>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	460d      	mov	r5, r1
 8008dca:	f7f7 fc0d 	bl	80005e8 <__aeabi_dmul>
 8008dce:	a340      	add	r3, pc, #256	; (adr r3, 8008ed0 <__kernel_cos+0x140>)
 8008dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	468b      	mov	fp, r1
 8008dd8:	4620      	mov	r0, r4
 8008dda:	4629      	mov	r1, r5
 8008ddc:	f7f7 fc04 	bl	80005e8 <__aeabi_dmul>
 8008de0:	a33d      	add	r3, pc, #244	; (adr r3, 8008ed8 <__kernel_cos+0x148>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	f7f7 fa49 	bl	800027c <__adddf3>
 8008dea:	4622      	mov	r2, r4
 8008dec:	462b      	mov	r3, r5
 8008dee:	f7f7 fbfb 	bl	80005e8 <__aeabi_dmul>
 8008df2:	a33b      	add	r3, pc, #236	; (adr r3, 8008ee0 <__kernel_cos+0x150>)
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f7f7 fa3e 	bl	8000278 <__aeabi_dsub>
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	462b      	mov	r3, r5
 8008e00:	f7f7 fbf2 	bl	80005e8 <__aeabi_dmul>
 8008e04:	a338      	add	r3, pc, #224	; (adr r3, 8008ee8 <__kernel_cos+0x158>)
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	f7f7 fa37 	bl	800027c <__adddf3>
 8008e0e:	4622      	mov	r2, r4
 8008e10:	462b      	mov	r3, r5
 8008e12:	f7f7 fbe9 	bl	80005e8 <__aeabi_dmul>
 8008e16:	a336      	add	r3, pc, #216	; (adr r3, 8008ef0 <__kernel_cos+0x160>)
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	f7f7 fa2c 	bl	8000278 <__aeabi_dsub>
 8008e20:	4622      	mov	r2, r4
 8008e22:	462b      	mov	r3, r5
 8008e24:	f7f7 fbe0 	bl	80005e8 <__aeabi_dmul>
 8008e28:	a333      	add	r3, pc, #204	; (adr r3, 8008ef8 <__kernel_cos+0x168>)
 8008e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2e:	f7f7 fa25 	bl	800027c <__adddf3>
 8008e32:	4622      	mov	r2, r4
 8008e34:	462b      	mov	r3, r5
 8008e36:	f7f7 fbd7 	bl	80005e8 <__aeabi_dmul>
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	462b      	mov	r3, r5
 8008e3e:	f7f7 fbd3 	bl	80005e8 <__aeabi_dmul>
 8008e42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e46:	4604      	mov	r4, r0
 8008e48:	460d      	mov	r5, r1
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	f7f7 fbcb 	bl	80005e8 <__aeabi_dmul>
 8008e52:	460b      	mov	r3, r1
 8008e54:	4602      	mov	r2, r0
 8008e56:	4629      	mov	r1, r5
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f7f7 fa0d 	bl	8000278 <__aeabi_dsub>
 8008e5e:	4b2b      	ldr	r3, [pc, #172]	; (8008f0c <__kernel_cos+0x17c>)
 8008e60:	4598      	cmp	r8, r3
 8008e62:	4606      	mov	r6, r0
 8008e64:	460f      	mov	r7, r1
 8008e66:	dc10      	bgt.n	8008e8a <__kernel_cos+0xfa>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4650      	mov	r0, sl
 8008e6e:	4659      	mov	r1, fp
 8008e70:	f7f7 fa02 	bl	8000278 <__aeabi_dsub>
 8008e74:	460b      	mov	r3, r1
 8008e76:	4926      	ldr	r1, [pc, #152]	; (8008f10 <__kernel_cos+0x180>)
 8008e78:	4602      	mov	r2, r0
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	f7f7 f9fc 	bl	8000278 <__aeabi_dsub>
 8008e80:	ec41 0b10 	vmov	d0, r0, r1
 8008e84:	b003      	add	sp, #12
 8008e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8a:	4b22      	ldr	r3, [pc, #136]	; (8008f14 <__kernel_cos+0x184>)
 8008e8c:	4920      	ldr	r1, [pc, #128]	; (8008f10 <__kernel_cos+0x180>)
 8008e8e:	4598      	cmp	r8, r3
 8008e90:	bfcc      	ite	gt
 8008e92:	4d21      	ldrgt	r5, [pc, #132]	; (8008f18 <__kernel_cos+0x188>)
 8008e94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008e98:	2400      	movs	r4, #0
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	f7f7 f9ea 	bl	8000278 <__aeabi_dsub>
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	4680      	mov	r8, r0
 8008ea8:	4689      	mov	r9, r1
 8008eaa:	462b      	mov	r3, r5
 8008eac:	4650      	mov	r0, sl
 8008eae:	4659      	mov	r1, fp
 8008eb0:	f7f7 f9e2 	bl	8000278 <__aeabi_dsub>
 8008eb4:	4632      	mov	r2, r6
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	f7f7 f9de 	bl	8000278 <__aeabi_dsub>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	e7da      	b.n	8008e7c <__kernel_cos+0xec>
 8008ec6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008f00 <__kernel_cos+0x170>
 8008eca:	e7db      	b.n	8008e84 <__kernel_cos+0xf4>
 8008ecc:	f3af 8000 	nop.w
 8008ed0:	be8838d4 	.word	0xbe8838d4
 8008ed4:	bda8fae9 	.word	0xbda8fae9
 8008ed8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008edc:	3e21ee9e 	.word	0x3e21ee9e
 8008ee0:	809c52ad 	.word	0x809c52ad
 8008ee4:	3e927e4f 	.word	0x3e927e4f
 8008ee8:	19cb1590 	.word	0x19cb1590
 8008eec:	3efa01a0 	.word	0x3efa01a0
 8008ef0:	16c15177 	.word	0x16c15177
 8008ef4:	3f56c16c 	.word	0x3f56c16c
 8008ef8:	5555554c 	.word	0x5555554c
 8008efc:	3fa55555 	.word	0x3fa55555
 8008f00:	00000000 	.word	0x00000000
 8008f04:	3ff00000 	.word	0x3ff00000
 8008f08:	3fe00000 	.word	0x3fe00000
 8008f0c:	3fd33332 	.word	0x3fd33332
 8008f10:	3ff00000 	.word	0x3ff00000
 8008f14:	3fe90000 	.word	0x3fe90000
 8008f18:	3fd20000 	.word	0x3fd20000
 8008f1c:	00000000 	.word	0x00000000

08008f20 <__kernel_rem_pio2>:
 8008f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	ed2d 8b02 	vpush	{d8}
 8008f28:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008f2c:	f112 0f14 	cmn.w	r2, #20
 8008f30:	9308      	str	r3, [sp, #32]
 8008f32:	9101      	str	r1, [sp, #4]
 8008f34:	4bc6      	ldr	r3, [pc, #792]	; (8009250 <__kernel_rem_pio2+0x330>)
 8008f36:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008f38:	9009      	str	r0, [sp, #36]	; 0x24
 8008f3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f3e:	9304      	str	r3, [sp, #16]
 8008f40:	9b08      	ldr	r3, [sp, #32]
 8008f42:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008f46:	bfa8      	it	ge
 8008f48:	1ed4      	subge	r4, r2, #3
 8008f4a:	9306      	str	r3, [sp, #24]
 8008f4c:	bfb2      	itee	lt
 8008f4e:	2400      	movlt	r4, #0
 8008f50:	2318      	movge	r3, #24
 8008f52:	fb94 f4f3 	sdivge	r4, r4, r3
 8008f56:	f06f 0317 	mvn.w	r3, #23
 8008f5a:	fb04 3303 	mla	r3, r4, r3, r3
 8008f5e:	eb03 0a02 	add.w	sl, r3, r2
 8008f62:	9b04      	ldr	r3, [sp, #16]
 8008f64:	9a06      	ldr	r2, [sp, #24]
 8008f66:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009240 <__kernel_rem_pio2+0x320>
 8008f6a:	eb03 0802 	add.w	r8, r3, r2
 8008f6e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008f70:	1aa7      	subs	r7, r4, r2
 8008f72:	ae20      	add	r6, sp, #128	; 0x80
 8008f74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008f78:	2500      	movs	r5, #0
 8008f7a:	4545      	cmp	r5, r8
 8008f7c:	dd18      	ble.n	8008fb0 <__kernel_rem_pio2+0x90>
 8008f7e:	9b08      	ldr	r3, [sp, #32]
 8008f80:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008f84:	aa20      	add	r2, sp, #128	; 0x80
 8008f86:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009240 <__kernel_rem_pio2+0x320>
 8008f8a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008f8e:	f1c3 0301 	rsb	r3, r3, #1
 8008f92:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008f96:	9307      	str	r3, [sp, #28]
 8008f98:	9b07      	ldr	r3, [sp, #28]
 8008f9a:	9a04      	ldr	r2, [sp, #16]
 8008f9c:	4443      	add	r3, r8
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	db2f      	blt.n	8009002 <__kernel_rem_pio2+0xe2>
 8008fa2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008fa6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008faa:	462f      	mov	r7, r5
 8008fac:	2600      	movs	r6, #0
 8008fae:	e01b      	b.n	8008fe8 <__kernel_rem_pio2+0xc8>
 8008fb0:	42ef      	cmn	r7, r5
 8008fb2:	d407      	bmi.n	8008fc4 <__kernel_rem_pio2+0xa4>
 8008fb4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008fb8:	f7f7 faac 	bl	8000514 <__aeabi_i2d>
 8008fbc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008fc0:	3501      	adds	r5, #1
 8008fc2:	e7da      	b.n	8008f7a <__kernel_rem_pio2+0x5a>
 8008fc4:	ec51 0b18 	vmov	r0, r1, d8
 8008fc8:	e7f8      	b.n	8008fbc <__kernel_rem_pio2+0x9c>
 8008fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fce:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008fd2:	f7f7 fb09 	bl	80005e8 <__aeabi_dmul>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fde:	f7f7 f94d 	bl	800027c <__adddf3>
 8008fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fe6:	3601      	adds	r6, #1
 8008fe8:	9b06      	ldr	r3, [sp, #24]
 8008fea:	429e      	cmp	r6, r3
 8008fec:	f1a7 0708 	sub.w	r7, r7, #8
 8008ff0:	ddeb      	ble.n	8008fca <__kernel_rem_pio2+0xaa>
 8008ff2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ff6:	3508      	adds	r5, #8
 8008ff8:	ecab 7b02 	vstmia	fp!, {d7}
 8008ffc:	f108 0801 	add.w	r8, r8, #1
 8009000:	e7ca      	b.n	8008f98 <__kernel_rem_pio2+0x78>
 8009002:	9b04      	ldr	r3, [sp, #16]
 8009004:	aa0c      	add	r2, sp, #48	; 0x30
 8009006:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800900a:	930b      	str	r3, [sp, #44]	; 0x2c
 800900c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800900e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009012:	9c04      	ldr	r4, [sp, #16]
 8009014:	930a      	str	r3, [sp, #40]	; 0x28
 8009016:	ab98      	add	r3, sp, #608	; 0x260
 8009018:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800901c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009020:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009024:	f8cd b008 	str.w	fp, [sp, #8]
 8009028:	4625      	mov	r5, r4
 800902a:	2d00      	cmp	r5, #0
 800902c:	dc78      	bgt.n	8009120 <__kernel_rem_pio2+0x200>
 800902e:	ec47 6b10 	vmov	d0, r6, r7
 8009032:	4650      	mov	r0, sl
 8009034:	f000 fc04 	bl	8009840 <scalbn>
 8009038:	ec57 6b10 	vmov	r6, r7, d0
 800903c:	2200      	movs	r2, #0
 800903e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009042:	ee10 0a10 	vmov	r0, s0
 8009046:	4639      	mov	r1, r7
 8009048:	f7f7 face 	bl	80005e8 <__aeabi_dmul>
 800904c:	ec41 0b10 	vmov	d0, r0, r1
 8009050:	f000 fb6e 	bl	8009730 <floor>
 8009054:	4b7f      	ldr	r3, [pc, #508]	; (8009254 <__kernel_rem_pio2+0x334>)
 8009056:	ec51 0b10 	vmov	r0, r1, d0
 800905a:	2200      	movs	r2, #0
 800905c:	f7f7 fac4 	bl	80005e8 <__aeabi_dmul>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4630      	mov	r0, r6
 8009066:	4639      	mov	r1, r7
 8009068:	f7f7 f906 	bl	8000278 <__aeabi_dsub>
 800906c:	460f      	mov	r7, r1
 800906e:	4606      	mov	r6, r0
 8009070:	f7f7 fd6a 	bl	8000b48 <__aeabi_d2iz>
 8009074:	9007      	str	r0, [sp, #28]
 8009076:	f7f7 fa4d 	bl	8000514 <__aeabi_i2d>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4630      	mov	r0, r6
 8009080:	4639      	mov	r1, r7
 8009082:	f7f7 f8f9 	bl	8000278 <__aeabi_dsub>
 8009086:	f1ba 0f00 	cmp.w	sl, #0
 800908a:	4606      	mov	r6, r0
 800908c:	460f      	mov	r7, r1
 800908e:	dd70      	ble.n	8009172 <__kernel_rem_pio2+0x252>
 8009090:	1e62      	subs	r2, r4, #1
 8009092:	ab0c      	add	r3, sp, #48	; 0x30
 8009094:	9d07      	ldr	r5, [sp, #28]
 8009096:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800909a:	f1ca 0118 	rsb	r1, sl, #24
 800909e:	fa40 f301 	asr.w	r3, r0, r1
 80090a2:	441d      	add	r5, r3
 80090a4:	408b      	lsls	r3, r1
 80090a6:	1ac0      	subs	r0, r0, r3
 80090a8:	ab0c      	add	r3, sp, #48	; 0x30
 80090aa:	9507      	str	r5, [sp, #28]
 80090ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80090b0:	f1ca 0317 	rsb	r3, sl, #23
 80090b4:	fa40 f303 	asr.w	r3, r0, r3
 80090b8:	9302      	str	r3, [sp, #8]
 80090ba:	9b02      	ldr	r3, [sp, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dd66      	ble.n	800918e <__kernel_rem_pio2+0x26e>
 80090c0:	9b07      	ldr	r3, [sp, #28]
 80090c2:	2200      	movs	r2, #0
 80090c4:	3301      	adds	r3, #1
 80090c6:	9307      	str	r3, [sp, #28]
 80090c8:	4615      	mov	r5, r2
 80090ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80090ce:	4294      	cmp	r4, r2
 80090d0:	f300 8099 	bgt.w	8009206 <__kernel_rem_pio2+0x2e6>
 80090d4:	f1ba 0f00 	cmp.w	sl, #0
 80090d8:	dd07      	ble.n	80090ea <__kernel_rem_pio2+0x1ca>
 80090da:	f1ba 0f01 	cmp.w	sl, #1
 80090de:	f000 80a5 	beq.w	800922c <__kernel_rem_pio2+0x30c>
 80090e2:	f1ba 0f02 	cmp.w	sl, #2
 80090e6:	f000 80c1 	beq.w	800926c <__kernel_rem_pio2+0x34c>
 80090ea:	9b02      	ldr	r3, [sp, #8]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d14e      	bne.n	800918e <__kernel_rem_pio2+0x26e>
 80090f0:	4632      	mov	r2, r6
 80090f2:	463b      	mov	r3, r7
 80090f4:	4958      	ldr	r1, [pc, #352]	; (8009258 <__kernel_rem_pio2+0x338>)
 80090f6:	2000      	movs	r0, #0
 80090f8:	f7f7 f8be 	bl	8000278 <__aeabi_dsub>
 80090fc:	4606      	mov	r6, r0
 80090fe:	460f      	mov	r7, r1
 8009100:	2d00      	cmp	r5, #0
 8009102:	d044      	beq.n	800918e <__kernel_rem_pio2+0x26e>
 8009104:	4650      	mov	r0, sl
 8009106:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009248 <__kernel_rem_pio2+0x328>
 800910a:	f000 fb99 	bl	8009840 <scalbn>
 800910e:	4630      	mov	r0, r6
 8009110:	4639      	mov	r1, r7
 8009112:	ec53 2b10 	vmov	r2, r3, d0
 8009116:	f7f7 f8af 	bl	8000278 <__aeabi_dsub>
 800911a:	4606      	mov	r6, r0
 800911c:	460f      	mov	r7, r1
 800911e:	e036      	b.n	800918e <__kernel_rem_pio2+0x26e>
 8009120:	4b4e      	ldr	r3, [pc, #312]	; (800925c <__kernel_rem_pio2+0x33c>)
 8009122:	2200      	movs	r2, #0
 8009124:	4630      	mov	r0, r6
 8009126:	4639      	mov	r1, r7
 8009128:	f7f7 fa5e 	bl	80005e8 <__aeabi_dmul>
 800912c:	f7f7 fd0c 	bl	8000b48 <__aeabi_d2iz>
 8009130:	f7f7 f9f0 	bl	8000514 <__aeabi_i2d>
 8009134:	4b4a      	ldr	r3, [pc, #296]	; (8009260 <__kernel_rem_pio2+0x340>)
 8009136:	2200      	movs	r2, #0
 8009138:	4680      	mov	r8, r0
 800913a:	4689      	mov	r9, r1
 800913c:	f7f7 fa54 	bl	80005e8 <__aeabi_dmul>
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	4630      	mov	r0, r6
 8009146:	4639      	mov	r1, r7
 8009148:	f7f7 f896 	bl	8000278 <__aeabi_dsub>
 800914c:	f7f7 fcfc 	bl	8000b48 <__aeabi_d2iz>
 8009150:	9b02      	ldr	r3, [sp, #8]
 8009152:	f843 0b04 	str.w	r0, [r3], #4
 8009156:	3d01      	subs	r5, #1
 8009158:	9302      	str	r3, [sp, #8]
 800915a:	ab70      	add	r3, sp, #448	; 0x1c0
 800915c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	4640      	mov	r0, r8
 8009166:	4649      	mov	r1, r9
 8009168:	f7f7 f888 	bl	800027c <__adddf3>
 800916c:	4606      	mov	r6, r0
 800916e:	460f      	mov	r7, r1
 8009170:	e75b      	b.n	800902a <__kernel_rem_pio2+0x10a>
 8009172:	d105      	bne.n	8009180 <__kernel_rem_pio2+0x260>
 8009174:	1e63      	subs	r3, r4, #1
 8009176:	aa0c      	add	r2, sp, #48	; 0x30
 8009178:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800917c:	15c3      	asrs	r3, r0, #23
 800917e:	e79b      	b.n	80090b8 <__kernel_rem_pio2+0x198>
 8009180:	4b38      	ldr	r3, [pc, #224]	; (8009264 <__kernel_rem_pio2+0x344>)
 8009182:	2200      	movs	r2, #0
 8009184:	f7f7 fcb6 	bl	8000af4 <__aeabi_dcmpge>
 8009188:	2800      	cmp	r0, #0
 800918a:	d139      	bne.n	8009200 <__kernel_rem_pio2+0x2e0>
 800918c:	9002      	str	r0, [sp, #8]
 800918e:	2200      	movs	r2, #0
 8009190:	2300      	movs	r3, #0
 8009192:	4630      	mov	r0, r6
 8009194:	4639      	mov	r1, r7
 8009196:	f7f7 fc8f 	bl	8000ab8 <__aeabi_dcmpeq>
 800919a:	2800      	cmp	r0, #0
 800919c:	f000 80b4 	beq.w	8009308 <__kernel_rem_pio2+0x3e8>
 80091a0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80091a4:	465b      	mov	r3, fp
 80091a6:	2200      	movs	r2, #0
 80091a8:	9904      	ldr	r1, [sp, #16]
 80091aa:	428b      	cmp	r3, r1
 80091ac:	da65      	bge.n	800927a <__kernel_rem_pio2+0x35a>
 80091ae:	2a00      	cmp	r2, #0
 80091b0:	d07b      	beq.n	80092aa <__kernel_rem_pio2+0x38a>
 80091b2:	ab0c      	add	r3, sp, #48	; 0x30
 80091b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80091b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 80a0 	beq.w	8009302 <__kernel_rem_pio2+0x3e2>
 80091c2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009248 <__kernel_rem_pio2+0x328>
 80091c6:	4650      	mov	r0, sl
 80091c8:	f000 fb3a 	bl	8009840 <scalbn>
 80091cc:	4f23      	ldr	r7, [pc, #140]	; (800925c <__kernel_rem_pio2+0x33c>)
 80091ce:	ec55 4b10 	vmov	r4, r5, d0
 80091d2:	46d8      	mov	r8, fp
 80091d4:	2600      	movs	r6, #0
 80091d6:	f1b8 0f00 	cmp.w	r8, #0
 80091da:	f280 80cf 	bge.w	800937c <__kernel_rem_pio2+0x45c>
 80091de:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009240 <__kernel_rem_pio2+0x320>
 80091e2:	465f      	mov	r7, fp
 80091e4:	f04f 0800 	mov.w	r8, #0
 80091e8:	2f00      	cmp	r7, #0
 80091ea:	f2c0 80fd 	blt.w	80093e8 <__kernel_rem_pio2+0x4c8>
 80091ee:	ab70      	add	r3, sp, #448	; 0x1c0
 80091f0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009268 <__kernel_rem_pio2+0x348>
 80091f4:	ec55 4b18 	vmov	r4, r5, d8
 80091f8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80091fc:	2600      	movs	r6, #0
 80091fe:	e0e5      	b.n	80093cc <__kernel_rem_pio2+0x4ac>
 8009200:	2302      	movs	r3, #2
 8009202:	9302      	str	r3, [sp, #8]
 8009204:	e75c      	b.n	80090c0 <__kernel_rem_pio2+0x1a0>
 8009206:	f8db 3000 	ldr.w	r3, [fp]
 800920a:	b955      	cbnz	r5, 8009222 <__kernel_rem_pio2+0x302>
 800920c:	b123      	cbz	r3, 8009218 <__kernel_rem_pio2+0x2f8>
 800920e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009212:	f8cb 3000 	str.w	r3, [fp]
 8009216:	2301      	movs	r3, #1
 8009218:	3201      	adds	r2, #1
 800921a:	f10b 0b04 	add.w	fp, fp, #4
 800921e:	461d      	mov	r5, r3
 8009220:	e755      	b.n	80090ce <__kernel_rem_pio2+0x1ae>
 8009222:	1acb      	subs	r3, r1, r3
 8009224:	f8cb 3000 	str.w	r3, [fp]
 8009228:	462b      	mov	r3, r5
 800922a:	e7f5      	b.n	8009218 <__kernel_rem_pio2+0x2f8>
 800922c:	1e62      	subs	r2, r4, #1
 800922e:	ab0c      	add	r3, sp, #48	; 0x30
 8009230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009234:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009238:	a90c      	add	r1, sp, #48	; 0x30
 800923a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800923e:	e754      	b.n	80090ea <__kernel_rem_pio2+0x1ca>
	...
 800924c:	3ff00000 	.word	0x3ff00000
 8009250:	08009d10 	.word	0x08009d10
 8009254:	40200000 	.word	0x40200000
 8009258:	3ff00000 	.word	0x3ff00000
 800925c:	3e700000 	.word	0x3e700000
 8009260:	41700000 	.word	0x41700000
 8009264:	3fe00000 	.word	0x3fe00000
 8009268:	08009cd0 	.word	0x08009cd0
 800926c:	1e62      	subs	r2, r4, #1
 800926e:	ab0c      	add	r3, sp, #48	; 0x30
 8009270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009274:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009278:	e7de      	b.n	8009238 <__kernel_rem_pio2+0x318>
 800927a:	a90c      	add	r1, sp, #48	; 0x30
 800927c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009280:	3b01      	subs	r3, #1
 8009282:	430a      	orrs	r2, r1
 8009284:	e790      	b.n	80091a8 <__kernel_rem_pio2+0x288>
 8009286:	3301      	adds	r3, #1
 8009288:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800928c:	2900      	cmp	r1, #0
 800928e:	d0fa      	beq.n	8009286 <__kernel_rem_pio2+0x366>
 8009290:	9a08      	ldr	r2, [sp, #32]
 8009292:	18e3      	adds	r3, r4, r3
 8009294:	18a6      	adds	r6, r4, r2
 8009296:	aa20      	add	r2, sp, #128	; 0x80
 8009298:	1c65      	adds	r5, r4, #1
 800929a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800929e:	9302      	str	r3, [sp, #8]
 80092a0:	9b02      	ldr	r3, [sp, #8]
 80092a2:	42ab      	cmp	r3, r5
 80092a4:	da04      	bge.n	80092b0 <__kernel_rem_pio2+0x390>
 80092a6:	461c      	mov	r4, r3
 80092a8:	e6b5      	b.n	8009016 <__kernel_rem_pio2+0xf6>
 80092aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092ac:	2301      	movs	r3, #1
 80092ae:	e7eb      	b.n	8009288 <__kernel_rem_pio2+0x368>
 80092b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092b6:	f7f7 f92d 	bl	8000514 <__aeabi_i2d>
 80092ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80092be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c0:	46b3      	mov	fp, r6
 80092c2:	461c      	mov	r4, r3
 80092c4:	2700      	movs	r7, #0
 80092c6:	f04f 0800 	mov.w	r8, #0
 80092ca:	f04f 0900 	mov.w	r9, #0
 80092ce:	9b06      	ldr	r3, [sp, #24]
 80092d0:	429f      	cmp	r7, r3
 80092d2:	dd06      	ble.n	80092e2 <__kernel_rem_pio2+0x3c2>
 80092d4:	ab70      	add	r3, sp, #448	; 0x1c0
 80092d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80092da:	e9c3 8900 	strd	r8, r9, [r3]
 80092de:	3501      	adds	r5, #1
 80092e0:	e7de      	b.n	80092a0 <__kernel_rem_pio2+0x380>
 80092e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80092e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80092ea:	f7f7 f97d 	bl	80005e8 <__aeabi_dmul>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	f7f6 ffc1 	bl	800027c <__adddf3>
 80092fa:	3701      	adds	r7, #1
 80092fc:	4680      	mov	r8, r0
 80092fe:	4689      	mov	r9, r1
 8009300:	e7e5      	b.n	80092ce <__kernel_rem_pio2+0x3ae>
 8009302:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009306:	e754      	b.n	80091b2 <__kernel_rem_pio2+0x292>
 8009308:	ec47 6b10 	vmov	d0, r6, r7
 800930c:	f1ca 0000 	rsb	r0, sl, #0
 8009310:	f000 fa96 	bl	8009840 <scalbn>
 8009314:	ec57 6b10 	vmov	r6, r7, d0
 8009318:	4b9f      	ldr	r3, [pc, #636]	; (8009598 <__kernel_rem_pio2+0x678>)
 800931a:	ee10 0a10 	vmov	r0, s0
 800931e:	2200      	movs	r2, #0
 8009320:	4639      	mov	r1, r7
 8009322:	f7f7 fbe7 	bl	8000af4 <__aeabi_dcmpge>
 8009326:	b300      	cbz	r0, 800936a <__kernel_rem_pio2+0x44a>
 8009328:	4b9c      	ldr	r3, [pc, #624]	; (800959c <__kernel_rem_pio2+0x67c>)
 800932a:	2200      	movs	r2, #0
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f7 f95a 	bl	80005e8 <__aeabi_dmul>
 8009334:	f7f7 fc08 	bl	8000b48 <__aeabi_d2iz>
 8009338:	4605      	mov	r5, r0
 800933a:	f7f7 f8eb 	bl	8000514 <__aeabi_i2d>
 800933e:	4b96      	ldr	r3, [pc, #600]	; (8009598 <__kernel_rem_pio2+0x678>)
 8009340:	2200      	movs	r2, #0
 8009342:	f7f7 f951 	bl	80005e8 <__aeabi_dmul>
 8009346:	460b      	mov	r3, r1
 8009348:	4602      	mov	r2, r0
 800934a:	4639      	mov	r1, r7
 800934c:	4630      	mov	r0, r6
 800934e:	f7f6 ff93 	bl	8000278 <__aeabi_dsub>
 8009352:	f7f7 fbf9 	bl	8000b48 <__aeabi_d2iz>
 8009356:	f104 0b01 	add.w	fp, r4, #1
 800935a:	ab0c      	add	r3, sp, #48	; 0x30
 800935c:	f10a 0a18 	add.w	sl, sl, #24
 8009360:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009364:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009368:	e72b      	b.n	80091c2 <__kernel_rem_pio2+0x2a2>
 800936a:	4630      	mov	r0, r6
 800936c:	4639      	mov	r1, r7
 800936e:	f7f7 fbeb 	bl	8000b48 <__aeabi_d2iz>
 8009372:	ab0c      	add	r3, sp, #48	; 0x30
 8009374:	46a3      	mov	fp, r4
 8009376:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800937a:	e722      	b.n	80091c2 <__kernel_rem_pio2+0x2a2>
 800937c:	ab70      	add	r3, sp, #448	; 0x1c0
 800937e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009382:	ab0c      	add	r3, sp, #48	; 0x30
 8009384:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009388:	f7f7 f8c4 	bl	8000514 <__aeabi_i2d>
 800938c:	4622      	mov	r2, r4
 800938e:	462b      	mov	r3, r5
 8009390:	f7f7 f92a 	bl	80005e8 <__aeabi_dmul>
 8009394:	4632      	mov	r2, r6
 8009396:	e9c9 0100 	strd	r0, r1, [r9]
 800939a:	463b      	mov	r3, r7
 800939c:	4620      	mov	r0, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f7 f922 	bl	80005e8 <__aeabi_dmul>
 80093a4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80093a8:	4604      	mov	r4, r0
 80093aa:	460d      	mov	r5, r1
 80093ac:	e713      	b.n	80091d6 <__kernel_rem_pio2+0x2b6>
 80093ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80093b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80093b6:	f7f7 f917 	bl	80005e8 <__aeabi_dmul>
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	4620      	mov	r0, r4
 80093c0:	4629      	mov	r1, r5
 80093c2:	f7f6 ff5b 	bl	800027c <__adddf3>
 80093c6:	3601      	adds	r6, #1
 80093c8:	4604      	mov	r4, r0
 80093ca:	460d      	mov	r5, r1
 80093cc:	9b04      	ldr	r3, [sp, #16]
 80093ce:	429e      	cmp	r6, r3
 80093d0:	dc01      	bgt.n	80093d6 <__kernel_rem_pio2+0x4b6>
 80093d2:	45b0      	cmp	r8, r6
 80093d4:	daeb      	bge.n	80093ae <__kernel_rem_pio2+0x48e>
 80093d6:	ab48      	add	r3, sp, #288	; 0x120
 80093d8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80093dc:	e9c3 4500 	strd	r4, r5, [r3]
 80093e0:	3f01      	subs	r7, #1
 80093e2:	f108 0801 	add.w	r8, r8, #1
 80093e6:	e6ff      	b.n	80091e8 <__kernel_rem_pio2+0x2c8>
 80093e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	dc0b      	bgt.n	8009406 <__kernel_rem_pio2+0x4e6>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	dc6e      	bgt.n	80094d0 <__kernel_rem_pio2+0x5b0>
 80093f2:	d045      	beq.n	8009480 <__kernel_rem_pio2+0x560>
 80093f4:	9b07      	ldr	r3, [sp, #28]
 80093f6:	f003 0007 	and.w	r0, r3, #7
 80093fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80093fe:	ecbd 8b02 	vpop	{d8}
 8009402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009406:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009408:	2b03      	cmp	r3, #3
 800940a:	d1f3      	bne.n	80093f4 <__kernel_rem_pio2+0x4d4>
 800940c:	ab48      	add	r3, sp, #288	; 0x120
 800940e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009412:	46d0      	mov	r8, sl
 8009414:	46d9      	mov	r9, fp
 8009416:	f1b9 0f00 	cmp.w	r9, #0
 800941a:	f1a8 0808 	sub.w	r8, r8, #8
 800941e:	dc64      	bgt.n	80094ea <__kernel_rem_pio2+0x5ca>
 8009420:	465c      	mov	r4, fp
 8009422:	2c01      	cmp	r4, #1
 8009424:	f1aa 0a08 	sub.w	sl, sl, #8
 8009428:	dc7e      	bgt.n	8009528 <__kernel_rem_pio2+0x608>
 800942a:	2000      	movs	r0, #0
 800942c:	2100      	movs	r1, #0
 800942e:	f1bb 0f01 	cmp.w	fp, #1
 8009432:	f300 8097 	bgt.w	8009564 <__kernel_rem_pio2+0x644>
 8009436:	9b02      	ldr	r3, [sp, #8]
 8009438:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800943c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009440:	2b00      	cmp	r3, #0
 8009442:	f040 8099 	bne.w	8009578 <__kernel_rem_pio2+0x658>
 8009446:	9b01      	ldr	r3, [sp, #4]
 8009448:	e9c3 5600 	strd	r5, r6, [r3]
 800944c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009450:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009454:	e7ce      	b.n	80093f4 <__kernel_rem_pio2+0x4d4>
 8009456:	ab48      	add	r3, sp, #288	; 0x120
 8009458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	f7f6 ff0c 	bl	800027c <__adddf3>
 8009464:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009468:	f1bb 0f00 	cmp.w	fp, #0
 800946c:	daf3      	bge.n	8009456 <__kernel_rem_pio2+0x536>
 800946e:	9b02      	ldr	r3, [sp, #8]
 8009470:	b113      	cbz	r3, 8009478 <__kernel_rem_pio2+0x558>
 8009472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009476:	4619      	mov	r1, r3
 8009478:	9b01      	ldr	r3, [sp, #4]
 800947a:	e9c3 0100 	strd	r0, r1, [r3]
 800947e:	e7b9      	b.n	80093f4 <__kernel_rem_pio2+0x4d4>
 8009480:	2000      	movs	r0, #0
 8009482:	2100      	movs	r1, #0
 8009484:	e7f0      	b.n	8009468 <__kernel_rem_pio2+0x548>
 8009486:	ab48      	add	r3, sp, #288	; 0x120
 8009488:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	f7f6 fef4 	bl	800027c <__adddf3>
 8009494:	3c01      	subs	r4, #1
 8009496:	2c00      	cmp	r4, #0
 8009498:	daf5      	bge.n	8009486 <__kernel_rem_pio2+0x566>
 800949a:	9b02      	ldr	r3, [sp, #8]
 800949c:	b1e3      	cbz	r3, 80094d8 <__kernel_rem_pio2+0x5b8>
 800949e:	4602      	mov	r2, r0
 80094a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094a4:	9c01      	ldr	r4, [sp, #4]
 80094a6:	e9c4 2300 	strd	r2, r3, [r4]
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80094b2:	f7f6 fee1 	bl	8000278 <__aeabi_dsub>
 80094b6:	ad4a      	add	r5, sp, #296	; 0x128
 80094b8:	2401      	movs	r4, #1
 80094ba:	45a3      	cmp	fp, r4
 80094bc:	da0f      	bge.n	80094de <__kernel_rem_pio2+0x5be>
 80094be:	9b02      	ldr	r3, [sp, #8]
 80094c0:	b113      	cbz	r3, 80094c8 <__kernel_rem_pio2+0x5a8>
 80094c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094c6:	4619      	mov	r1, r3
 80094c8:	9b01      	ldr	r3, [sp, #4]
 80094ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80094ce:	e791      	b.n	80093f4 <__kernel_rem_pio2+0x4d4>
 80094d0:	465c      	mov	r4, fp
 80094d2:	2000      	movs	r0, #0
 80094d4:	2100      	movs	r1, #0
 80094d6:	e7de      	b.n	8009496 <__kernel_rem_pio2+0x576>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	e7e2      	b.n	80094a4 <__kernel_rem_pio2+0x584>
 80094de:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80094e2:	f7f6 fecb 	bl	800027c <__adddf3>
 80094e6:	3401      	adds	r4, #1
 80094e8:	e7e7      	b.n	80094ba <__kernel_rem_pio2+0x59a>
 80094ea:	e9d8 4500 	ldrd	r4, r5, [r8]
 80094ee:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80094f2:	4620      	mov	r0, r4
 80094f4:	4632      	mov	r2, r6
 80094f6:	463b      	mov	r3, r7
 80094f8:	4629      	mov	r1, r5
 80094fa:	f7f6 febf 	bl	800027c <__adddf3>
 80094fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	4620      	mov	r0, r4
 8009508:	4629      	mov	r1, r5
 800950a:	f7f6 feb5 	bl	8000278 <__aeabi_dsub>
 800950e:	4632      	mov	r2, r6
 8009510:	463b      	mov	r3, r7
 8009512:	f7f6 feb3 	bl	800027c <__adddf3>
 8009516:	ed9d 7b04 	vldr	d7, [sp, #16]
 800951a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800951e:	ed88 7b00 	vstr	d7, [r8]
 8009522:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009526:	e776      	b.n	8009416 <__kernel_rem_pio2+0x4f6>
 8009528:	e9da 8900 	ldrd	r8, r9, [sl]
 800952c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009530:	4640      	mov	r0, r8
 8009532:	4632      	mov	r2, r6
 8009534:	463b      	mov	r3, r7
 8009536:	4649      	mov	r1, r9
 8009538:	f7f6 fea0 	bl	800027c <__adddf3>
 800953c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4640      	mov	r0, r8
 8009546:	4649      	mov	r1, r9
 8009548:	f7f6 fe96 	bl	8000278 <__aeabi_dsub>
 800954c:	4632      	mov	r2, r6
 800954e:	463b      	mov	r3, r7
 8009550:	f7f6 fe94 	bl	800027c <__adddf3>
 8009554:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009558:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800955c:	ed8a 7b00 	vstr	d7, [sl]
 8009560:	3c01      	subs	r4, #1
 8009562:	e75e      	b.n	8009422 <__kernel_rem_pio2+0x502>
 8009564:	ab48      	add	r3, sp, #288	; 0x120
 8009566:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800956a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956e:	f7f6 fe85 	bl	800027c <__adddf3>
 8009572:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009576:	e75a      	b.n	800942e <__kernel_rem_pio2+0x50e>
 8009578:	9b01      	ldr	r3, [sp, #4]
 800957a:	9a01      	ldr	r2, [sp, #4]
 800957c:	601d      	str	r5, [r3, #0]
 800957e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009582:	605c      	str	r4, [r3, #4]
 8009584:	609f      	str	r7, [r3, #8]
 8009586:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800958a:	60d3      	str	r3, [r2, #12]
 800958c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009590:	6110      	str	r0, [r2, #16]
 8009592:	6153      	str	r3, [r2, #20]
 8009594:	e72e      	b.n	80093f4 <__kernel_rem_pio2+0x4d4>
 8009596:	bf00      	nop
 8009598:	41700000 	.word	0x41700000
 800959c:	3e700000 	.word	0x3e700000

080095a0 <__kernel_sin>:
 80095a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	ed2d 8b04 	vpush	{d8-d9}
 80095a8:	eeb0 8a41 	vmov.f32	s16, s2
 80095ac:	eef0 8a61 	vmov.f32	s17, s3
 80095b0:	ec55 4b10 	vmov	r4, r5, d0
 80095b4:	b083      	sub	sp, #12
 80095b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80095ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80095be:	9001      	str	r0, [sp, #4]
 80095c0:	da06      	bge.n	80095d0 <__kernel_sin+0x30>
 80095c2:	ee10 0a10 	vmov	r0, s0
 80095c6:	4629      	mov	r1, r5
 80095c8:	f7f7 fabe 	bl	8000b48 <__aeabi_d2iz>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d051      	beq.n	8009674 <__kernel_sin+0xd4>
 80095d0:	4622      	mov	r2, r4
 80095d2:	462b      	mov	r3, r5
 80095d4:	4620      	mov	r0, r4
 80095d6:	4629      	mov	r1, r5
 80095d8:	f7f7 f806 	bl	80005e8 <__aeabi_dmul>
 80095dc:	4682      	mov	sl, r0
 80095de:	468b      	mov	fp, r1
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4620      	mov	r0, r4
 80095e6:	4629      	mov	r1, r5
 80095e8:	f7f6 fffe 	bl	80005e8 <__aeabi_dmul>
 80095ec:	a341      	add	r3, pc, #260	; (adr r3, 80096f4 <__kernel_sin+0x154>)
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	4680      	mov	r8, r0
 80095f4:	4689      	mov	r9, r1
 80095f6:	4650      	mov	r0, sl
 80095f8:	4659      	mov	r1, fp
 80095fa:	f7f6 fff5 	bl	80005e8 <__aeabi_dmul>
 80095fe:	a33f      	add	r3, pc, #252	; (adr r3, 80096fc <__kernel_sin+0x15c>)
 8009600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009604:	f7f6 fe38 	bl	8000278 <__aeabi_dsub>
 8009608:	4652      	mov	r2, sl
 800960a:	465b      	mov	r3, fp
 800960c:	f7f6 ffec 	bl	80005e8 <__aeabi_dmul>
 8009610:	a33c      	add	r3, pc, #240	; (adr r3, 8009704 <__kernel_sin+0x164>)
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	f7f6 fe31 	bl	800027c <__adddf3>
 800961a:	4652      	mov	r2, sl
 800961c:	465b      	mov	r3, fp
 800961e:	f7f6 ffe3 	bl	80005e8 <__aeabi_dmul>
 8009622:	a33a      	add	r3, pc, #232	; (adr r3, 800970c <__kernel_sin+0x16c>)
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	f7f6 fe26 	bl	8000278 <__aeabi_dsub>
 800962c:	4652      	mov	r2, sl
 800962e:	465b      	mov	r3, fp
 8009630:	f7f6 ffda 	bl	80005e8 <__aeabi_dmul>
 8009634:	a337      	add	r3, pc, #220	; (adr r3, 8009714 <__kernel_sin+0x174>)
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	f7f6 fe1f 	bl	800027c <__adddf3>
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	4606      	mov	r6, r0
 8009642:	460f      	mov	r7, r1
 8009644:	b9eb      	cbnz	r3, 8009682 <__kernel_sin+0xe2>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	4650      	mov	r0, sl
 800964c:	4659      	mov	r1, fp
 800964e:	f7f6 ffcb 	bl	80005e8 <__aeabi_dmul>
 8009652:	a325      	add	r3, pc, #148	; (adr r3, 80096e8 <__kernel_sin+0x148>)
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	f7f6 fe0e 	bl	8000278 <__aeabi_dsub>
 800965c:	4642      	mov	r2, r8
 800965e:	464b      	mov	r3, r9
 8009660:	f7f6 ffc2 	bl	80005e8 <__aeabi_dmul>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4620      	mov	r0, r4
 800966a:	4629      	mov	r1, r5
 800966c:	f7f6 fe06 	bl	800027c <__adddf3>
 8009670:	4604      	mov	r4, r0
 8009672:	460d      	mov	r5, r1
 8009674:	ec45 4b10 	vmov	d0, r4, r5
 8009678:	b003      	add	sp, #12
 800967a:	ecbd 8b04 	vpop	{d8-d9}
 800967e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009682:	4b1b      	ldr	r3, [pc, #108]	; (80096f0 <__kernel_sin+0x150>)
 8009684:	ec51 0b18 	vmov	r0, r1, d8
 8009688:	2200      	movs	r2, #0
 800968a:	f7f6 ffad 	bl	80005e8 <__aeabi_dmul>
 800968e:	4632      	mov	r2, r6
 8009690:	ec41 0b19 	vmov	d9, r0, r1
 8009694:	463b      	mov	r3, r7
 8009696:	4640      	mov	r0, r8
 8009698:	4649      	mov	r1, r9
 800969a:	f7f6 ffa5 	bl	80005e8 <__aeabi_dmul>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	ec51 0b19 	vmov	r0, r1, d9
 80096a6:	f7f6 fde7 	bl	8000278 <__aeabi_dsub>
 80096aa:	4652      	mov	r2, sl
 80096ac:	465b      	mov	r3, fp
 80096ae:	f7f6 ff9b 	bl	80005e8 <__aeabi_dmul>
 80096b2:	ec53 2b18 	vmov	r2, r3, d8
 80096b6:	f7f6 fddf 	bl	8000278 <__aeabi_dsub>
 80096ba:	a30b      	add	r3, pc, #44	; (adr r3, 80096e8 <__kernel_sin+0x148>)
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	4606      	mov	r6, r0
 80096c2:	460f      	mov	r7, r1
 80096c4:	4640      	mov	r0, r8
 80096c6:	4649      	mov	r1, r9
 80096c8:	f7f6 ff8e 	bl	80005e8 <__aeabi_dmul>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4630      	mov	r0, r6
 80096d2:	4639      	mov	r1, r7
 80096d4:	f7f6 fdd2 	bl	800027c <__adddf3>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4620      	mov	r0, r4
 80096de:	4629      	mov	r1, r5
 80096e0:	f7f6 fdca 	bl	8000278 <__aeabi_dsub>
 80096e4:	e7c4      	b.n	8009670 <__kernel_sin+0xd0>
 80096e6:	bf00      	nop
 80096e8:	55555549 	.word	0x55555549
 80096ec:	3fc55555 	.word	0x3fc55555
 80096f0:	3fe00000 	.word	0x3fe00000
 80096f4:	5acfd57c 	.word	0x5acfd57c
 80096f8:	3de5d93a 	.word	0x3de5d93a
 80096fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8009700:	3e5ae5e6 	.word	0x3e5ae5e6
 8009704:	57b1fe7d 	.word	0x57b1fe7d
 8009708:	3ec71de3 	.word	0x3ec71de3
 800970c:	19c161d5 	.word	0x19c161d5
 8009710:	3f2a01a0 	.word	0x3f2a01a0
 8009714:	1110f8a6 	.word	0x1110f8a6
 8009718:	3f811111 	.word	0x3f811111

0800971c <fabs>:
 800971c:	ec51 0b10 	vmov	r0, r1, d0
 8009720:	ee10 2a10 	vmov	r2, s0
 8009724:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009728:	ec43 2b10 	vmov	d0, r2, r3
 800972c:	4770      	bx	lr
	...

08009730 <floor>:
 8009730:	ec51 0b10 	vmov	r0, r1, d0
 8009734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009738:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800973c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009740:	2e13      	cmp	r6, #19
 8009742:	ee10 5a10 	vmov	r5, s0
 8009746:	ee10 8a10 	vmov	r8, s0
 800974a:	460c      	mov	r4, r1
 800974c:	dc32      	bgt.n	80097b4 <floor+0x84>
 800974e:	2e00      	cmp	r6, #0
 8009750:	da14      	bge.n	800977c <floor+0x4c>
 8009752:	a333      	add	r3, pc, #204	; (adr r3, 8009820 <floor+0xf0>)
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	f7f6 fd90 	bl	800027c <__adddf3>
 800975c:	2200      	movs	r2, #0
 800975e:	2300      	movs	r3, #0
 8009760:	f7f7 f9d2 	bl	8000b08 <__aeabi_dcmpgt>
 8009764:	b138      	cbz	r0, 8009776 <floor+0x46>
 8009766:	2c00      	cmp	r4, #0
 8009768:	da57      	bge.n	800981a <floor+0xea>
 800976a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800976e:	431d      	orrs	r5, r3
 8009770:	d001      	beq.n	8009776 <floor+0x46>
 8009772:	4c2d      	ldr	r4, [pc, #180]	; (8009828 <floor+0xf8>)
 8009774:	2500      	movs	r5, #0
 8009776:	4621      	mov	r1, r4
 8009778:	4628      	mov	r0, r5
 800977a:	e025      	b.n	80097c8 <floor+0x98>
 800977c:	4f2b      	ldr	r7, [pc, #172]	; (800982c <floor+0xfc>)
 800977e:	4137      	asrs	r7, r6
 8009780:	ea01 0307 	and.w	r3, r1, r7
 8009784:	4303      	orrs	r3, r0
 8009786:	d01f      	beq.n	80097c8 <floor+0x98>
 8009788:	a325      	add	r3, pc, #148	; (adr r3, 8009820 <floor+0xf0>)
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	f7f6 fd75 	bl	800027c <__adddf3>
 8009792:	2200      	movs	r2, #0
 8009794:	2300      	movs	r3, #0
 8009796:	f7f7 f9b7 	bl	8000b08 <__aeabi_dcmpgt>
 800979a:	2800      	cmp	r0, #0
 800979c:	d0eb      	beq.n	8009776 <floor+0x46>
 800979e:	2c00      	cmp	r4, #0
 80097a0:	bfbe      	ittt	lt
 80097a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80097a6:	fa43 f606 	asrlt.w	r6, r3, r6
 80097aa:	19a4      	addlt	r4, r4, r6
 80097ac:	ea24 0407 	bic.w	r4, r4, r7
 80097b0:	2500      	movs	r5, #0
 80097b2:	e7e0      	b.n	8009776 <floor+0x46>
 80097b4:	2e33      	cmp	r6, #51	; 0x33
 80097b6:	dd0b      	ble.n	80097d0 <floor+0xa0>
 80097b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80097bc:	d104      	bne.n	80097c8 <floor+0x98>
 80097be:	ee10 2a10 	vmov	r2, s0
 80097c2:	460b      	mov	r3, r1
 80097c4:	f7f6 fd5a 	bl	800027c <__adddf3>
 80097c8:	ec41 0b10 	vmov	d0, r0, r1
 80097cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80097d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097d8:	fa23 f707 	lsr.w	r7, r3, r7
 80097dc:	4207      	tst	r7, r0
 80097de:	d0f3      	beq.n	80097c8 <floor+0x98>
 80097e0:	a30f      	add	r3, pc, #60	; (adr r3, 8009820 <floor+0xf0>)
 80097e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e6:	f7f6 fd49 	bl	800027c <__adddf3>
 80097ea:	2200      	movs	r2, #0
 80097ec:	2300      	movs	r3, #0
 80097ee:	f7f7 f98b 	bl	8000b08 <__aeabi_dcmpgt>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d0bf      	beq.n	8009776 <floor+0x46>
 80097f6:	2c00      	cmp	r4, #0
 80097f8:	da02      	bge.n	8009800 <floor+0xd0>
 80097fa:	2e14      	cmp	r6, #20
 80097fc:	d103      	bne.n	8009806 <floor+0xd6>
 80097fe:	3401      	adds	r4, #1
 8009800:	ea25 0507 	bic.w	r5, r5, r7
 8009804:	e7b7      	b.n	8009776 <floor+0x46>
 8009806:	2301      	movs	r3, #1
 8009808:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800980c:	fa03 f606 	lsl.w	r6, r3, r6
 8009810:	4435      	add	r5, r6
 8009812:	4545      	cmp	r5, r8
 8009814:	bf38      	it	cc
 8009816:	18e4      	addcc	r4, r4, r3
 8009818:	e7f2      	b.n	8009800 <floor+0xd0>
 800981a:	2500      	movs	r5, #0
 800981c:	462c      	mov	r4, r5
 800981e:	e7aa      	b.n	8009776 <floor+0x46>
 8009820:	8800759c 	.word	0x8800759c
 8009824:	7e37e43c 	.word	0x7e37e43c
 8009828:	bff00000 	.word	0xbff00000
 800982c:	000fffff 	.word	0x000fffff

08009830 <nan>:
 8009830:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009838 <nan+0x8>
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	00000000 	.word	0x00000000
 800983c:	7ff80000 	.word	0x7ff80000

08009840 <scalbn>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	ec55 4b10 	vmov	r4, r5, d0
 8009846:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800984a:	4606      	mov	r6, r0
 800984c:	462b      	mov	r3, r5
 800984e:	b99a      	cbnz	r2, 8009878 <scalbn+0x38>
 8009850:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009854:	4323      	orrs	r3, r4
 8009856:	d036      	beq.n	80098c6 <scalbn+0x86>
 8009858:	4b39      	ldr	r3, [pc, #228]	; (8009940 <scalbn+0x100>)
 800985a:	4629      	mov	r1, r5
 800985c:	ee10 0a10 	vmov	r0, s0
 8009860:	2200      	movs	r2, #0
 8009862:	f7f6 fec1 	bl	80005e8 <__aeabi_dmul>
 8009866:	4b37      	ldr	r3, [pc, #220]	; (8009944 <scalbn+0x104>)
 8009868:	429e      	cmp	r6, r3
 800986a:	4604      	mov	r4, r0
 800986c:	460d      	mov	r5, r1
 800986e:	da10      	bge.n	8009892 <scalbn+0x52>
 8009870:	a32b      	add	r3, pc, #172	; (adr r3, 8009920 <scalbn+0xe0>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	e03a      	b.n	80098ee <scalbn+0xae>
 8009878:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800987c:	428a      	cmp	r2, r1
 800987e:	d10c      	bne.n	800989a <scalbn+0x5a>
 8009880:	ee10 2a10 	vmov	r2, s0
 8009884:	4620      	mov	r0, r4
 8009886:	4629      	mov	r1, r5
 8009888:	f7f6 fcf8 	bl	800027c <__adddf3>
 800988c:	4604      	mov	r4, r0
 800988e:	460d      	mov	r5, r1
 8009890:	e019      	b.n	80098c6 <scalbn+0x86>
 8009892:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009896:	460b      	mov	r3, r1
 8009898:	3a36      	subs	r2, #54	; 0x36
 800989a:	4432      	add	r2, r6
 800989c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80098a0:	428a      	cmp	r2, r1
 80098a2:	dd08      	ble.n	80098b6 <scalbn+0x76>
 80098a4:	2d00      	cmp	r5, #0
 80098a6:	a120      	add	r1, pc, #128	; (adr r1, 8009928 <scalbn+0xe8>)
 80098a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ac:	da1c      	bge.n	80098e8 <scalbn+0xa8>
 80098ae:	a120      	add	r1, pc, #128	; (adr r1, 8009930 <scalbn+0xf0>)
 80098b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098b4:	e018      	b.n	80098e8 <scalbn+0xa8>
 80098b6:	2a00      	cmp	r2, #0
 80098b8:	dd08      	ble.n	80098cc <scalbn+0x8c>
 80098ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098c6:	ec45 4b10 	vmov	d0, r4, r5
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80098d0:	da19      	bge.n	8009906 <scalbn+0xc6>
 80098d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80098d6:	429e      	cmp	r6, r3
 80098d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80098dc:	dd0a      	ble.n	80098f4 <scalbn+0xb4>
 80098de:	a112      	add	r1, pc, #72	; (adr r1, 8009928 <scalbn+0xe8>)
 80098e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1e2      	bne.n	80098ae <scalbn+0x6e>
 80098e8:	a30f      	add	r3, pc, #60	; (adr r3, 8009928 <scalbn+0xe8>)
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	f7f6 fe7b 	bl	80005e8 <__aeabi_dmul>
 80098f2:	e7cb      	b.n	800988c <scalbn+0x4c>
 80098f4:	a10a      	add	r1, pc, #40	; (adr r1, 8009920 <scalbn+0xe0>)
 80098f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d0b8      	beq.n	8009870 <scalbn+0x30>
 80098fe:	a10e      	add	r1, pc, #56	; (adr r1, 8009938 <scalbn+0xf8>)
 8009900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009904:	e7b4      	b.n	8009870 <scalbn+0x30>
 8009906:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800990a:	3236      	adds	r2, #54	; 0x36
 800990c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009910:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009914:	4620      	mov	r0, r4
 8009916:	4b0c      	ldr	r3, [pc, #48]	; (8009948 <scalbn+0x108>)
 8009918:	2200      	movs	r2, #0
 800991a:	e7e8      	b.n	80098ee <scalbn+0xae>
 800991c:	f3af 8000 	nop.w
 8009920:	c2f8f359 	.word	0xc2f8f359
 8009924:	01a56e1f 	.word	0x01a56e1f
 8009928:	8800759c 	.word	0x8800759c
 800992c:	7e37e43c 	.word	0x7e37e43c
 8009930:	8800759c 	.word	0x8800759c
 8009934:	fe37e43c 	.word	0xfe37e43c
 8009938:	c2f8f359 	.word	0xc2f8f359
 800993c:	81a56e1f 	.word	0x81a56e1f
 8009940:	43500000 	.word	0x43500000
 8009944:	ffff3cb0 	.word	0xffff3cb0
 8009948:	3c900000 	.word	0x3c900000

0800994c <_init>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	bf00      	nop
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr

08009958 <_fini>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	bf00      	nop
 800995c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800995e:	bc08      	pop	{r3}
 8009960:	469e      	mov	lr, r3
 8009962:	4770      	bx	lr
